
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00004cc4  00004d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  00800180  00800180  00004e78  2**0
                  ALLOC
  3 .stab         000054c0  00000000  00000000  00004e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bac  00000000  00000000  0000a338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      28:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_10>
      2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__vector_13>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>

00000054 <str_inf.1428>:
      54:	69 6e 66 00 49 4e 46 00                             inf.INF.

0000005c <str_nan.1427>:
      5c:	6e 61 6e 00 4e 41 4e 00 00 40 7a 10 f3 5a 00 a0     nan.NAN..@z..Z..
      6c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      7c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      8c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      9c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      ac:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      bc:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      cc:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
      dc:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
      ec:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
      fc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     10c:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     11c:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     12c:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     13c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     14c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     15c:	3d 27                                               ='

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf e5       	ldi	r28, 0x5F	; 95
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	a0 e6       	ldi	r26, 0x60	; 96
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	e4 ec       	ldi	r30, 0xC4	; 196
     172:	fc e4       	ldi	r31, 0x4C	; 76
     174:	02 c0       	rjmp	.+4      	; 0x17a <.do_copy_data_start>

00000176 <.do_copy_data_loop>:
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0

0000017a <.do_copy_data_start>:
     17a:	a0 38       	cpi	r26, 0x80	; 128
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <.do_copy_data_loop>

00000180 <__do_clear_bss>:
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	a0 e8       	ldi	r26, 0x80	; 128
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	ac 3f       	cpi	r26, 0xFC	; 252
     18c:	b1 07       	cpc	r27, r17
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <main>
     194:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019c <__fixunssfsi>:
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	7b 01       	movw	r14, r22
     1a6:	8c 01       	movw	r16, r24
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	5f e4       	ldi	r21, 0x4F	; 79
     1b0:	0e 94 ce 03 	call	0x79c	; 0x79c <__gesf2>
     1b4:	88 23       	and	r24, r24
     1b6:	8c f0       	brlt	.+34     	; 0x1da <__fixunssfsi+0x3e>
     1b8:	c8 01       	movw	r24, r16
     1ba:	b7 01       	movw	r22, r14
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	5f e4       	ldi	r21, 0x4F	; 79
     1c4:	0e 94 46 02 	call	0x48c	; 0x48c <__subsf3>
     1c8:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	20 50       	subi	r18, 0x00	; 0
     1d2:	30 40       	sbci	r19, 0x00	; 0
     1d4:	40 40       	sbci	r20, 0x00	; 0
     1d6:	50 48       	sbci	r21, 0x80	; 128
     1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <__fixunssfsi+0x4a>
     1da:	c8 01       	movw	r24, r16
     1dc:	b7 01       	movw	r22, r14
     1de:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
     1e2:	9b 01       	movw	r18, r22
     1e4:	ac 01       	movw	r20, r24
     1e6:	b9 01       	movw	r22, r18
     1e8:	ca 01       	movw	r24, r20
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	08 95       	ret

000001f4 <_fpadd_parts>:
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	e0 e0       	ldi	r30, 0x00	; 0
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	0c 94 29 26 	jmp	0x4c52	; 0x4c52 <__prologue_saves__>
     200:	dc 01       	movw	r26, r24
     202:	2b 01       	movw	r4, r22
     204:	fa 01       	movw	r30, r20
     206:	9c 91       	ld	r25, X
     208:	92 30       	cpi	r25, 0x02	; 2
     20a:	08 f4       	brcc	.+2      	; 0x20e <_fpadd_parts+0x1a>
     20c:	39 c1       	rjmp	.+626    	; 0x480 <_fpadd_parts+0x28c>
     20e:	eb 01       	movw	r28, r22
     210:	88 81       	ld	r24, Y
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	08 f4       	brcc	.+2      	; 0x218 <_fpadd_parts+0x24>
     216:	33 c1       	rjmp	.+614    	; 0x47e <_fpadd_parts+0x28a>
     218:	94 30       	cpi	r25, 0x04	; 4
     21a:	69 f4       	brne	.+26     	; 0x236 <_fpadd_parts+0x42>
     21c:	84 30       	cpi	r24, 0x04	; 4
     21e:	09 f0       	breq	.+2      	; 0x222 <_fpadd_parts+0x2e>
     220:	2f c1       	rjmp	.+606    	; 0x480 <_fpadd_parts+0x28c>
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	9c 91       	ld	r25, X
     226:	11 97       	sbiw	r26, 0x01	; 1
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	98 17       	cp	r25, r24
     22c:	09 f4       	brne	.+2      	; 0x230 <_fpadd_parts+0x3c>
     22e:	28 c1       	rjmp	.+592    	; 0x480 <_fpadd_parts+0x28c>
     230:	ac e4       	ldi	r26, 0x4C	; 76
     232:	b1 e0       	ldi	r27, 0x01	; 1
     234:	25 c1       	rjmp	.+586    	; 0x480 <_fpadd_parts+0x28c>
     236:	84 30       	cpi	r24, 0x04	; 4
     238:	09 f4       	brne	.+2      	; 0x23c <_fpadd_parts+0x48>
     23a:	21 c1       	rjmp	.+578    	; 0x47e <_fpadd_parts+0x28a>
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	a9 f4       	brne	.+42     	; 0x26a <_fpadd_parts+0x76>
     240:	92 30       	cpi	r25, 0x02	; 2
     242:	09 f0       	breq	.+2      	; 0x246 <_fpadd_parts+0x52>
     244:	1d c1       	rjmp	.+570    	; 0x480 <_fpadd_parts+0x28c>
     246:	9a 01       	movw	r18, r20
     248:	ad 01       	movw	r20, r26
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	ea 01       	movw	r28, r20
     24e:	09 90       	ld	r0, Y+
     250:	ae 01       	movw	r20, r28
     252:	e9 01       	movw	r28, r18
     254:	09 92       	st	Y+, r0
     256:	9e 01       	movw	r18, r28
     258:	81 50       	subi	r24, 0x01	; 1
     25a:	c1 f7       	brne	.-16     	; 0x24c <_fpadd_parts+0x58>
     25c:	e2 01       	movw	r28, r4
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	11 96       	adiw	r26, 0x01	; 1
     262:	9c 91       	ld	r25, X
     264:	89 23       	and	r24, r25
     266:	81 83       	std	Z+1, r24	; 0x01
     268:	08 c1       	rjmp	.+528    	; 0x47a <_fpadd_parts+0x286>
     26a:	92 30       	cpi	r25, 0x02	; 2
     26c:	09 f4       	brne	.+2      	; 0x270 <_fpadd_parts+0x7c>
     26e:	07 c1       	rjmp	.+526    	; 0x47e <_fpadd_parts+0x28a>
     270:	12 96       	adiw	r26, 0x02	; 2
     272:	2d 90       	ld	r2, X+
     274:	3c 90       	ld	r3, X
     276:	13 97       	sbiw	r26, 0x03	; 3
     278:	eb 01       	movw	r28, r22
     27a:	8a 81       	ldd	r24, Y+2	; 0x02
     27c:	9b 81       	ldd	r25, Y+3	; 0x03
     27e:	14 96       	adiw	r26, 0x04	; 4
     280:	ad 90       	ld	r10, X+
     282:	bd 90       	ld	r11, X+
     284:	cd 90       	ld	r12, X+
     286:	dc 90       	ld	r13, X
     288:	17 97       	sbiw	r26, 0x07	; 7
     28a:	ec 80       	ldd	r14, Y+4	; 0x04
     28c:	fd 80       	ldd	r15, Y+5	; 0x05
     28e:	0e 81       	ldd	r16, Y+6	; 0x06
     290:	1f 81       	ldd	r17, Y+7	; 0x07
     292:	91 01       	movw	r18, r2
     294:	28 1b       	sub	r18, r24
     296:	39 0b       	sbc	r19, r25
     298:	b9 01       	movw	r22, r18
     29a:	37 ff       	sbrs	r19, 7
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <_fpadd_parts+0xb2>
     29e:	66 27       	eor	r22, r22
     2a0:	77 27       	eor	r23, r23
     2a2:	62 1b       	sub	r22, r18
     2a4:	73 0b       	sbc	r23, r19
     2a6:	60 32       	cpi	r22, 0x20	; 32
     2a8:	71 05       	cpc	r23, r1
     2aa:	0c f0       	brlt	.+2      	; 0x2ae <_fpadd_parts+0xba>
     2ac:	61 c0       	rjmp	.+194    	; 0x370 <_fpadd_parts+0x17c>
     2ae:	12 16       	cp	r1, r18
     2b0:	13 06       	cpc	r1, r19
     2b2:	6c f5       	brge	.+90     	; 0x30e <_fpadd_parts+0x11a>
     2b4:	37 01       	movw	r6, r14
     2b6:	48 01       	movw	r8, r16
     2b8:	06 2e       	mov	r0, r22
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <_fpadd_parts+0xd0>
     2bc:	96 94       	lsr	r9
     2be:	87 94       	ror	r8
     2c0:	77 94       	ror	r7
     2c2:	67 94       	ror	r6
     2c4:	0a 94       	dec	r0
     2c6:	d2 f7       	brpl	.-12     	; 0x2bc <_fpadd_parts+0xc8>
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <_fpadd_parts+0xe6>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	6a 95       	dec	r22
     2dc:	d2 f7       	brpl	.-12     	; 0x2d2 <_fpadd_parts+0xde>
     2de:	21 50       	subi	r18, 0x01	; 1
     2e0:	30 40       	sbci	r19, 0x00	; 0
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	50 40       	sbci	r21, 0x00	; 0
     2e6:	2e 21       	and	r18, r14
     2e8:	3f 21       	and	r19, r15
     2ea:	40 23       	and	r20, r16
     2ec:	51 23       	and	r21, r17
     2ee:	21 15       	cp	r18, r1
     2f0:	31 05       	cpc	r19, r1
     2f2:	41 05       	cpc	r20, r1
     2f4:	51 05       	cpc	r21, r1
     2f6:	21 f0       	breq	.+8      	; 0x300 <_fpadd_parts+0x10c>
     2f8:	21 e0       	ldi	r18, 0x01	; 1
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	79 01       	movw	r14, r18
     302:	8a 01       	movw	r16, r20
     304:	e6 28       	or	r14, r6
     306:	f7 28       	or	r15, r7
     308:	08 29       	or	r16, r8
     30a:	19 29       	or	r17, r9
     30c:	3c c0       	rjmp	.+120    	; 0x386 <_fpadd_parts+0x192>
     30e:	23 2b       	or	r18, r19
     310:	d1 f1       	breq	.+116    	; 0x386 <_fpadd_parts+0x192>
     312:	26 0e       	add	r2, r22
     314:	37 1e       	adc	r3, r23
     316:	35 01       	movw	r6, r10
     318:	46 01       	movw	r8, r12
     31a:	06 2e       	mov	r0, r22
     31c:	04 c0       	rjmp	.+8      	; 0x326 <_fpadd_parts+0x132>
     31e:	96 94       	lsr	r9
     320:	87 94       	ror	r8
     322:	77 94       	ror	r7
     324:	67 94       	ror	r6
     326:	0a 94       	dec	r0
     328:	d2 f7       	brpl	.-12     	; 0x31e <_fpadd_parts+0x12a>
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	04 c0       	rjmp	.+8      	; 0x33c <_fpadd_parts+0x148>
     334:	22 0f       	add	r18, r18
     336:	33 1f       	adc	r19, r19
     338:	44 1f       	adc	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	6a 95       	dec	r22
     33e:	d2 f7       	brpl	.-12     	; 0x334 <_fpadd_parts+0x140>
     340:	21 50       	subi	r18, 0x01	; 1
     342:	30 40       	sbci	r19, 0x00	; 0
     344:	40 40       	sbci	r20, 0x00	; 0
     346:	50 40       	sbci	r21, 0x00	; 0
     348:	2a 21       	and	r18, r10
     34a:	3b 21       	and	r19, r11
     34c:	4c 21       	and	r20, r12
     34e:	5d 21       	and	r21, r13
     350:	21 15       	cp	r18, r1
     352:	31 05       	cpc	r19, r1
     354:	41 05       	cpc	r20, r1
     356:	51 05       	cpc	r21, r1
     358:	21 f0       	breq	.+8      	; 0x362 <_fpadd_parts+0x16e>
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	59 01       	movw	r10, r18
     364:	6a 01       	movw	r12, r20
     366:	a6 28       	or	r10, r6
     368:	b7 28       	or	r11, r7
     36a:	c8 28       	or	r12, r8
     36c:	d9 28       	or	r13, r9
     36e:	0b c0       	rjmp	.+22     	; 0x386 <_fpadd_parts+0x192>
     370:	82 15       	cp	r24, r2
     372:	93 05       	cpc	r25, r3
     374:	2c f0       	brlt	.+10     	; 0x380 <_fpadd_parts+0x18c>
     376:	1c 01       	movw	r2, r24
     378:	aa 24       	eor	r10, r10
     37a:	bb 24       	eor	r11, r11
     37c:	65 01       	movw	r12, r10
     37e:	03 c0       	rjmp	.+6      	; 0x386 <_fpadd_parts+0x192>
     380:	ee 24       	eor	r14, r14
     382:	ff 24       	eor	r15, r15
     384:	87 01       	movw	r16, r14
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	9c 91       	ld	r25, X
     38a:	d2 01       	movw	r26, r4
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	8c 91       	ld	r24, X
     390:	98 17       	cp	r25, r24
     392:	09 f4       	brne	.+2      	; 0x396 <_fpadd_parts+0x1a2>
     394:	45 c0       	rjmp	.+138    	; 0x420 <_fpadd_parts+0x22c>
     396:	99 23       	and	r25, r25
     398:	39 f0       	breq	.+14     	; 0x3a8 <_fpadd_parts+0x1b4>
     39a:	a8 01       	movw	r20, r16
     39c:	97 01       	movw	r18, r14
     39e:	2a 19       	sub	r18, r10
     3a0:	3b 09       	sbc	r19, r11
     3a2:	4c 09       	sbc	r20, r12
     3a4:	5d 09       	sbc	r21, r13
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <_fpadd_parts+0x1c0>
     3a8:	a6 01       	movw	r20, r12
     3aa:	95 01       	movw	r18, r10
     3ac:	2e 19       	sub	r18, r14
     3ae:	3f 09       	sbc	r19, r15
     3b0:	40 0b       	sbc	r20, r16
     3b2:	51 0b       	sbc	r21, r17
     3b4:	57 fd       	sbrc	r21, 7
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <_fpadd_parts+0x1d4>
     3b8:	11 82       	std	Z+1, r1	; 0x01
     3ba:	33 82       	std	Z+3, r3	; 0x03
     3bc:	22 82       	std	Z+2, r2	; 0x02
     3be:	24 83       	std	Z+4, r18	; 0x04
     3c0:	35 83       	std	Z+5, r19	; 0x05
     3c2:	46 83       	std	Z+6, r20	; 0x06
     3c4:	57 83       	std	Z+7, r21	; 0x07
     3c6:	1d c0       	rjmp	.+58     	; 0x402 <_fpadd_parts+0x20e>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	81 83       	std	Z+1, r24	; 0x01
     3cc:	33 82       	std	Z+3, r3	; 0x03
     3ce:	22 82       	std	Z+2, r2	; 0x02
     3d0:	88 27       	eor	r24, r24
     3d2:	99 27       	eor	r25, r25
     3d4:	dc 01       	movw	r26, r24
     3d6:	82 1b       	sub	r24, r18
     3d8:	93 0b       	sbc	r25, r19
     3da:	a4 0b       	sbc	r26, r20
     3dc:	b5 0b       	sbc	r27, r21
     3de:	84 83       	std	Z+4, r24	; 0x04
     3e0:	95 83       	std	Z+5, r25	; 0x05
     3e2:	a6 83       	std	Z+6, r26	; 0x06
     3e4:	b7 83       	std	Z+7, r27	; 0x07
     3e6:	0d c0       	rjmp	.+26     	; 0x402 <_fpadd_parts+0x20e>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	44 1f       	adc	r20, r20
     3ee:	55 1f       	adc	r21, r21
     3f0:	24 83       	std	Z+4, r18	; 0x04
     3f2:	35 83       	std	Z+5, r19	; 0x05
     3f4:	46 83       	std	Z+6, r20	; 0x06
     3f6:	57 83       	std	Z+7, r21	; 0x07
     3f8:	82 81       	ldd	r24, Z+2	; 0x02
     3fa:	93 81       	ldd	r25, Z+3	; 0x03
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	93 83       	std	Z+3, r25	; 0x03
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	24 81       	ldd	r18, Z+4	; 0x04
     404:	35 81       	ldd	r19, Z+5	; 0x05
     406:	46 81       	ldd	r20, Z+6	; 0x06
     408:	57 81       	ldd	r21, Z+7	; 0x07
     40a:	da 01       	movw	r26, r20
     40c:	c9 01       	movw	r24, r18
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	a1 09       	sbc	r26, r1
     412:	b1 09       	sbc	r27, r1
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	9f 4f       	sbci	r25, 0xFF	; 255
     418:	af 4f       	sbci	r26, 0xFF	; 255
     41a:	bf 43       	sbci	r27, 0x3F	; 63
     41c:	28 f3       	brcs	.-54     	; 0x3e8 <_fpadd_parts+0x1f4>
     41e:	0b c0       	rjmp	.+22     	; 0x436 <_fpadd_parts+0x242>
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	33 82       	std	Z+3, r3	; 0x03
     424:	22 82       	std	Z+2, r2	; 0x02
     426:	ea 0c       	add	r14, r10
     428:	fb 1c       	adc	r15, r11
     42a:	0c 1d       	adc	r16, r12
     42c:	1d 1d       	adc	r17, r13
     42e:	e4 82       	std	Z+4, r14	; 0x04
     430:	f5 82       	std	Z+5, r15	; 0x05
     432:	06 83       	std	Z+6, r16	; 0x06
     434:	17 83       	std	Z+7, r17	; 0x07
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	80 83       	st	Z, r24
     43a:	24 81       	ldd	r18, Z+4	; 0x04
     43c:	35 81       	ldd	r19, Z+5	; 0x05
     43e:	46 81       	ldd	r20, Z+6	; 0x06
     440:	57 81       	ldd	r21, Z+7	; 0x07
     442:	57 ff       	sbrs	r21, 7
     444:	1a c0       	rjmp	.+52     	; 0x47a <_fpadd_parts+0x286>
     446:	c9 01       	movw	r24, r18
     448:	aa 27       	eor	r26, r26
     44a:	97 fd       	sbrc	r25, 7
     44c:	a0 95       	com	r26
     44e:	ba 2f       	mov	r27, r26
     450:	81 70       	andi	r24, 0x01	; 1
     452:	90 70       	andi	r25, 0x00	; 0
     454:	a0 70       	andi	r26, 0x00	; 0
     456:	b0 70       	andi	r27, 0x00	; 0
     458:	56 95       	lsr	r21
     45a:	47 95       	ror	r20
     45c:	37 95       	ror	r19
     45e:	27 95       	ror	r18
     460:	82 2b       	or	r24, r18
     462:	93 2b       	or	r25, r19
     464:	a4 2b       	or	r26, r20
     466:	b5 2b       	or	r27, r21
     468:	84 83       	std	Z+4, r24	; 0x04
     46a:	95 83       	std	Z+5, r25	; 0x05
     46c:	a6 83       	std	Z+6, r26	; 0x06
     46e:	b7 83       	std	Z+7, r27	; 0x07
     470:	82 81       	ldd	r24, Z+2	; 0x02
     472:	93 81       	ldd	r25, Z+3	; 0x03
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	93 83       	std	Z+3, r25	; 0x03
     478:	82 83       	std	Z+2, r24	; 0x02
     47a:	df 01       	movw	r26, r30
     47c:	01 c0       	rjmp	.+2      	; 0x480 <_fpadd_parts+0x28c>
     47e:	d2 01       	movw	r26, r4
     480:	cd 01       	movw	r24, r26
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	e2 e1       	ldi	r30, 0x12	; 18
     488:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <__epilogue_restores__>

0000048c <__subsf3>:
     48c:	a0 e2       	ldi	r26, 0x20	; 32
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	ec e4       	ldi	r30, 0x4C	; 76
     492:	f2 e0       	ldi	r31, 0x02	; 2
     494:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__prologue_saves__+0x18>
     498:	69 83       	std	Y+1, r22	; 0x01
     49a:	7a 83       	std	Y+2, r23	; 0x02
     49c:	8b 83       	std	Y+3, r24	; 0x03
     49e:	9c 83       	std	Y+4, r25	; 0x04
     4a0:	2d 83       	std	Y+5, r18	; 0x05
     4a2:	3e 83       	std	Y+6, r19	; 0x06
     4a4:	4f 83       	std	Y+7, r20	; 0x07
     4a6:	58 87       	std	Y+8, r21	; 0x08
     4a8:	e9 e0       	ldi	r30, 0x09	; 9
     4aa:	ee 2e       	mov	r14, r30
     4ac:	f1 2c       	mov	r15, r1
     4ae:	ec 0e       	add	r14, r28
     4b0:	fd 1e       	adc	r15, r29
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	b7 01       	movw	r22, r14
     4b8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     4bc:	8e 01       	movw	r16, r28
     4be:	0f 5e       	subi	r16, 0xEF	; 239
     4c0:	1f 4f       	sbci	r17, 0xFF	; 255
     4c2:	ce 01       	movw	r24, r28
     4c4:	05 96       	adiw	r24, 0x05	; 5
     4c6:	b8 01       	movw	r22, r16
     4c8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	89 27       	eor	r24, r25
     4d2:	8a 8b       	std	Y+18, r24	; 0x12
     4d4:	c7 01       	movw	r24, r14
     4d6:	b8 01       	movw	r22, r16
     4d8:	ae 01       	movw	r20, r28
     4da:	47 5e       	subi	r20, 0xE7	; 231
     4dc:	5f 4f       	sbci	r21, 0xFF	; 255
     4de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_fpadd_parts>
     4e2:	0e 94 82 04 	call	0x904	; 0x904 <__pack_f>
     4e6:	a0 96       	adiw	r28, 0x20	; 32
     4e8:	e6 e0       	ldi	r30, 0x06	; 6
     4ea:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__epilogue_restores__+0x18>

000004ee <__addsf3>:
     4ee:	a0 e2       	ldi	r26, 0x20	; 32
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	ed e7       	ldi	r30, 0x7D	; 125
     4f4:	f2 e0       	ldi	r31, 0x02	; 2
     4f6:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__prologue_saves__+0x18>
     4fa:	69 83       	std	Y+1, r22	; 0x01
     4fc:	7a 83       	std	Y+2, r23	; 0x02
     4fe:	8b 83       	std	Y+3, r24	; 0x03
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	2d 83       	std	Y+5, r18	; 0x05
     504:	3e 83       	std	Y+6, r19	; 0x06
     506:	4f 83       	std	Y+7, r20	; 0x07
     508:	58 87       	std	Y+8, r21	; 0x08
     50a:	f9 e0       	ldi	r31, 0x09	; 9
     50c:	ef 2e       	mov	r14, r31
     50e:	f1 2c       	mov	r15, r1
     510:	ec 0e       	add	r14, r28
     512:	fd 1e       	adc	r15, r29
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	b7 01       	movw	r22, r14
     51a:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     51e:	8e 01       	movw	r16, r28
     520:	0f 5e       	subi	r16, 0xEF	; 239
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	ce 01       	movw	r24, r28
     526:	05 96       	adiw	r24, 0x05	; 5
     528:	b8 01       	movw	r22, r16
     52a:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     52e:	c7 01       	movw	r24, r14
     530:	b8 01       	movw	r22, r16
     532:	ae 01       	movw	r20, r28
     534:	47 5e       	subi	r20, 0xE7	; 231
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_fpadd_parts>
     53c:	0e 94 82 04 	call	0x904	; 0x904 <__pack_f>
     540:	a0 96       	adiw	r28, 0x20	; 32
     542:	e6 e0       	ldi	r30, 0x06	; 6
     544:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__epilogue_restores__+0x18>

00000548 <__mulsf3>:
     548:	a0 e2       	ldi	r26, 0x20	; 32
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	ea ea       	ldi	r30, 0xAA	; 170
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	0c 94 29 26 	jmp	0x4c52	; 0x4c52 <__prologue_saves__>
     554:	69 83       	std	Y+1, r22	; 0x01
     556:	7a 83       	std	Y+2, r23	; 0x02
     558:	8b 83       	std	Y+3, r24	; 0x03
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	2d 83       	std	Y+5, r18	; 0x05
     55e:	3e 83       	std	Y+6, r19	; 0x06
     560:	4f 83       	std	Y+7, r20	; 0x07
     562:	58 87       	std	Y+8, r21	; 0x08
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	be 01       	movw	r22, r28
     56a:	67 5f       	subi	r22, 0xF7	; 247
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     572:	ce 01       	movw	r24, r28
     574:	05 96       	adiw	r24, 0x05	; 5
     576:	be 01       	movw	r22, r28
     578:	6f 5e       	subi	r22, 0xEF	; 239
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     580:	99 85       	ldd	r25, Y+9	; 0x09
     582:	92 30       	cpi	r25, 0x02	; 2
     584:	88 f0       	brcs	.+34     	; 0x5a8 <__mulsf3+0x60>
     586:	89 89       	ldd	r24, Y+17	; 0x11
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	c8 f0       	brcs	.+50     	; 0x5be <__mulsf3+0x76>
     58c:	94 30       	cpi	r25, 0x04	; 4
     58e:	19 f4       	brne	.+6      	; 0x596 <__mulsf3+0x4e>
     590:	82 30       	cpi	r24, 0x02	; 2
     592:	51 f4       	brne	.+20     	; 0x5a8 <__mulsf3+0x60>
     594:	04 c0       	rjmp	.+8      	; 0x59e <__mulsf3+0x56>
     596:	84 30       	cpi	r24, 0x04	; 4
     598:	29 f4       	brne	.+10     	; 0x5a4 <__mulsf3+0x5c>
     59a:	92 30       	cpi	r25, 0x02	; 2
     59c:	81 f4       	brne	.+32     	; 0x5be <__mulsf3+0x76>
     59e:	8c e4       	ldi	r24, 0x4C	; 76
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	c6 c0       	rjmp	.+396    	; 0x730 <__mulsf3+0x1e8>
     5a4:	92 30       	cpi	r25, 0x02	; 2
     5a6:	49 f4       	brne	.+18     	; 0x5ba <__mulsf3+0x72>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ac:	8a 89       	ldd	r24, Y+18	; 0x12
     5ae:	98 13       	cpse	r25, r24
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	2a 87       	std	Y+10, r18	; 0x0a
     5b4:	ce 01       	movw	r24, r28
     5b6:	09 96       	adiw	r24, 0x09	; 9
     5b8:	bb c0       	rjmp	.+374    	; 0x730 <__mulsf3+0x1e8>
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	49 f4       	brne	.+18     	; 0x5d0 <__mulsf3+0x88>
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c2:	8a 89       	ldd	r24, Y+18	; 0x12
     5c4:	98 13       	cpse	r25, r24
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	2a 8b       	std	Y+18, r18	; 0x12
     5ca:	ce 01       	movw	r24, r28
     5cc:	41 96       	adiw	r24, 0x11	; 17
     5ce:	b0 c0       	rjmp	.+352    	; 0x730 <__mulsf3+0x1e8>
     5d0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5d2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5d4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5d6:	58 88       	ldd	r5, Y+16	; 0x10
     5d8:	6d 88       	ldd	r6, Y+21	; 0x15
     5da:	7e 88       	ldd	r7, Y+22	; 0x16
     5dc:	8f 88       	ldd	r8, Y+23	; 0x17
     5de:	98 8c       	ldd	r9, Y+24	; 0x18
     5e0:	ee 24       	eor	r14, r14
     5e2:	ff 24       	eor	r15, r15
     5e4:	87 01       	movw	r16, r14
     5e6:	aa 24       	eor	r10, r10
     5e8:	bb 24       	eor	r11, r11
     5ea:	65 01       	movw	r12, r10
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	e0 e0       	ldi	r30, 0x00	; 0
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	c1 01       	movw	r24, r2
     5fa:	81 70       	andi	r24, 0x01	; 1
     5fc:	90 70       	andi	r25, 0x00	; 0
     5fe:	89 2b       	or	r24, r25
     600:	e9 f0       	breq	.+58     	; 0x63c <__mulsf3+0xf4>
     602:	e6 0c       	add	r14, r6
     604:	f7 1c       	adc	r15, r7
     606:	08 1d       	adc	r16, r8
     608:	19 1d       	adc	r17, r9
     60a:	9a 01       	movw	r18, r20
     60c:	ab 01       	movw	r20, r22
     60e:	2a 0d       	add	r18, r10
     610:	3b 1d       	adc	r19, r11
     612:	4c 1d       	adc	r20, r12
     614:	5d 1d       	adc	r21, r13
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e6 14       	cp	r14, r6
     620:	f7 04       	cpc	r15, r7
     622:	08 05       	cpc	r16, r8
     624:	19 05       	cpc	r17, r9
     626:	20 f4       	brcc	.+8      	; 0x630 <__mulsf3+0xe8>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	ba 01       	movw	r22, r20
     632:	a9 01       	movw	r20, r18
     634:	48 0f       	add	r20, r24
     636:	59 1f       	adc	r21, r25
     638:	6a 1f       	adc	r22, r26
     63a:	7b 1f       	adc	r23, r27
     63c:	aa 0c       	add	r10, r10
     63e:	bb 1c       	adc	r11, r11
     640:	cc 1c       	adc	r12, r12
     642:	dd 1c       	adc	r13, r13
     644:	97 fe       	sbrs	r9, 7
     646:	08 c0       	rjmp	.+16     	; 0x658 <__mulsf3+0x110>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	a0 e0       	ldi	r26, 0x00	; 0
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	a8 2a       	or	r10, r24
     652:	b9 2a       	or	r11, r25
     654:	ca 2a       	or	r12, r26
     656:	db 2a       	or	r13, r27
     658:	31 96       	adiw	r30, 0x01	; 1
     65a:	e0 32       	cpi	r30, 0x20	; 32
     65c:	f1 05       	cpc	r31, r1
     65e:	49 f0       	breq	.+18     	; 0x672 <__mulsf3+0x12a>
     660:	66 0c       	add	r6, r6
     662:	77 1c       	adc	r7, r7
     664:	88 1c       	adc	r8, r8
     666:	99 1c       	adc	r9, r9
     668:	56 94       	lsr	r5
     66a:	47 94       	ror	r4
     66c:	37 94       	ror	r3
     66e:	27 94       	ror	r2
     670:	c3 cf       	rjmp	.-122    	; 0x5f8 <__mulsf3+0xb0>
     672:	fa 85       	ldd	r31, Y+10	; 0x0a
     674:	ea 89       	ldd	r30, Y+18	; 0x12
     676:	2b 89       	ldd	r18, Y+19	; 0x13
     678:	3c 89       	ldd	r19, Y+20	; 0x14
     67a:	8b 85       	ldd	r24, Y+11	; 0x0b
     67c:	9c 85       	ldd	r25, Y+12	; 0x0c
     67e:	28 0f       	add	r18, r24
     680:	39 1f       	adc	r19, r25
     682:	2e 5f       	subi	r18, 0xFE	; 254
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	17 c0       	rjmp	.+46     	; 0x6b6 <__mulsf3+0x16e>
     688:	ca 01       	movw	r24, r20
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	90 70       	andi	r25, 0x00	; 0
     68e:	89 2b       	or	r24, r25
     690:	61 f0       	breq	.+24     	; 0x6aa <__mulsf3+0x162>
     692:	16 95       	lsr	r17
     694:	07 95       	ror	r16
     696:	f7 94       	ror	r15
     698:	e7 94       	ror	r14
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a0 e0       	ldi	r26, 0x00	; 0
     6a0:	b0 e8       	ldi	r27, 0x80	; 128
     6a2:	e8 2a       	or	r14, r24
     6a4:	f9 2a       	or	r15, r25
     6a6:	0a 2b       	or	r16, r26
     6a8:	1b 2b       	or	r17, r27
     6aa:	76 95       	lsr	r23
     6ac:	67 95       	ror	r22
     6ae:	57 95       	ror	r21
     6b0:	47 95       	ror	r20
     6b2:	2f 5f       	subi	r18, 0xFF	; 255
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	77 fd       	sbrc	r23, 7
     6b8:	e7 cf       	rjmp	.-50     	; 0x688 <__mulsf3+0x140>
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <__mulsf3+0x18c>
     6bc:	44 0f       	add	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	66 1f       	adc	r22, r22
     6c2:	77 1f       	adc	r23, r23
     6c4:	17 fd       	sbrc	r17, 7
     6c6:	41 60       	ori	r20, 0x01	; 1
     6c8:	ee 0c       	add	r14, r14
     6ca:	ff 1c       	adc	r15, r15
     6cc:	00 1f       	adc	r16, r16
     6ce:	11 1f       	adc	r17, r17
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	30 40       	sbci	r19, 0x00	; 0
     6d4:	40 30       	cpi	r20, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	59 07       	cpc	r21, r25
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	69 07       	cpc	r22, r25
     6de:	90 e4       	ldi	r25, 0x40	; 64
     6e0:	79 07       	cpc	r23, r25
     6e2:	60 f3       	brcs	.-40     	; 0x6bc <__mulsf3+0x174>
     6e4:	2b 8f       	std	Y+27, r18	; 0x1b
     6e6:	3c 8f       	std	Y+28, r19	; 0x1c
     6e8:	db 01       	movw	r26, r22
     6ea:	ca 01       	movw	r24, r20
     6ec:	8f 77       	andi	r24, 0x7F	; 127
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	a0 70       	andi	r26, 0x00	; 0
     6f2:	b0 70       	andi	r27, 0x00	; 0
     6f4:	80 34       	cpi	r24, 0x40	; 64
     6f6:	91 05       	cpc	r25, r1
     6f8:	a1 05       	cpc	r26, r1
     6fa:	b1 05       	cpc	r27, r1
     6fc:	61 f4       	brne	.+24     	; 0x716 <__mulsf3+0x1ce>
     6fe:	47 fd       	sbrc	r20, 7
     700:	0a c0       	rjmp	.+20     	; 0x716 <__mulsf3+0x1ce>
     702:	e1 14       	cp	r14, r1
     704:	f1 04       	cpc	r15, r1
     706:	01 05       	cpc	r16, r1
     708:	11 05       	cpc	r17, r1
     70a:	29 f0       	breq	.+10     	; 0x716 <__mulsf3+0x1ce>
     70c:	40 5c       	subi	r20, 0xC0	; 192
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	6f 4f       	sbci	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	40 78       	andi	r20, 0x80	; 128
     716:	1a 8e       	std	Y+26, r1	; 0x1a
     718:	fe 17       	cp	r31, r30
     71a:	11 f0       	breq	.+4      	; 0x720 <__mulsf3+0x1d8>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	8a 8f       	std	Y+26, r24	; 0x1a
     720:	4d 8f       	std	Y+29, r20	; 0x1d
     722:	5e 8f       	std	Y+30, r21	; 0x1e
     724:	6f 8f       	std	Y+31, r22	; 0x1f
     726:	78 a3       	std	Y+32, r23	; 0x20
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	89 8f       	std	Y+25, r24	; 0x19
     72c:	ce 01       	movw	r24, r28
     72e:	49 96       	adiw	r24, 0x19	; 25
     730:	0e 94 82 04 	call	0x904	; 0x904 <__pack_f>
     734:	a0 96       	adiw	r28, 0x20	; 32
     736:	e2 e1       	ldi	r30, 0x12	; 18
     738:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <__epilogue_restores__>

0000073c <__gtsf2>:
     73c:	a8 e1       	ldi	r26, 0x18	; 24
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e4 ea       	ldi	r30, 0xA4	; 164
     742:	f3 e0       	ldi	r31, 0x03	; 3
     744:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__prologue_saves__+0x18>
     748:	69 83       	std	Y+1, r22	; 0x01
     74a:	7a 83       	std	Y+2, r23	; 0x02
     74c:	8b 83       	std	Y+3, r24	; 0x03
     74e:	9c 83       	std	Y+4, r25	; 0x04
     750:	2d 83       	std	Y+5, r18	; 0x05
     752:	3e 83       	std	Y+6, r19	; 0x06
     754:	4f 83       	std	Y+7, r20	; 0x07
     756:	58 87       	std	Y+8, r21	; 0x08
     758:	89 e0       	ldi	r24, 0x09	; 9
     75a:	e8 2e       	mov	r14, r24
     75c:	f1 2c       	mov	r15, r1
     75e:	ec 0e       	add	r14, r28
     760:	fd 1e       	adc	r15, r29
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	b7 01       	movw	r22, r14
     768:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     76c:	8e 01       	movw	r16, r28
     76e:	0f 5e       	subi	r16, 0xEF	; 239
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	ce 01       	movw	r24, r28
     774:	05 96       	adiw	r24, 0x05	; 5
     776:	b8 01       	movw	r22, r16
     778:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     77c:	89 85       	ldd	r24, Y+9	; 0x09
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	40 f0       	brcs	.+16     	; 0x792 <__gtsf2+0x56>
     782:	89 89       	ldd	r24, Y+17	; 0x11
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	28 f0       	brcs	.+10     	; 0x792 <__gtsf2+0x56>
     788:	c7 01       	movw	r24, r14
     78a:	b8 01       	movw	r22, r16
     78c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fpcmp_parts_f>
     790:	01 c0       	rjmp	.+2      	; 0x794 <__gtsf2+0x58>
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	68 96       	adiw	r28, 0x18	; 24
     796:	e6 e0       	ldi	r30, 0x06	; 6
     798:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__epilogue_restores__+0x18>

0000079c <__gesf2>:
     79c:	a8 e1       	ldi	r26, 0x18	; 24
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	e4 ed       	ldi	r30, 0xD4	; 212
     7a2:	f3 e0       	ldi	r31, 0x03	; 3
     7a4:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__prologue_saves__+0x18>
     7a8:	69 83       	std	Y+1, r22	; 0x01
     7aa:	7a 83       	std	Y+2, r23	; 0x02
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	9c 83       	std	Y+4, r25	; 0x04
     7b0:	2d 83       	std	Y+5, r18	; 0x05
     7b2:	3e 83       	std	Y+6, r19	; 0x06
     7b4:	4f 83       	std	Y+7, r20	; 0x07
     7b6:	58 87       	std	Y+8, r21	; 0x08
     7b8:	89 e0       	ldi	r24, 0x09	; 9
     7ba:	e8 2e       	mov	r14, r24
     7bc:	f1 2c       	mov	r15, r1
     7be:	ec 0e       	add	r14, r28
     7c0:	fd 1e       	adc	r15, r29
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	b7 01       	movw	r22, r14
     7c8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     7cc:	8e 01       	movw	r16, r28
     7ce:	0f 5e       	subi	r16, 0xEF	; 239
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	ce 01       	movw	r24, r28
     7d4:	05 96       	adiw	r24, 0x05	; 5
     7d6:	b8 01       	movw	r22, r16
     7d8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     7dc:	89 85       	ldd	r24, Y+9	; 0x09
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	40 f0       	brcs	.+16     	; 0x7f2 <__gesf2+0x56>
     7e2:	89 89       	ldd	r24, Y+17	; 0x11
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	28 f0       	brcs	.+10     	; 0x7f2 <__gesf2+0x56>
     7e8:	c7 01       	movw	r24, r14
     7ea:	b8 01       	movw	r22, r16
     7ec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fpcmp_parts_f>
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <__gesf2+0x58>
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	68 96       	adiw	r28, 0x18	; 24
     7f6:	e6 e0       	ldi	r30, 0x06	; 6
     7f8:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__epilogue_restores__+0x18>

000007fc <__ltsf2>:
     7fc:	a8 e1       	ldi	r26, 0x18	; 24
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e4 e0       	ldi	r30, 0x04	; 4
     802:	f4 e0       	ldi	r31, 0x04	; 4
     804:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__prologue_saves__+0x18>
     808:	69 83       	std	Y+1, r22	; 0x01
     80a:	7a 83       	std	Y+2, r23	; 0x02
     80c:	8b 83       	std	Y+3, r24	; 0x03
     80e:	9c 83       	std	Y+4, r25	; 0x04
     810:	2d 83       	std	Y+5, r18	; 0x05
     812:	3e 83       	std	Y+6, r19	; 0x06
     814:	4f 83       	std	Y+7, r20	; 0x07
     816:	58 87       	std	Y+8, r21	; 0x08
     818:	89 e0       	ldi	r24, 0x09	; 9
     81a:	e8 2e       	mov	r14, r24
     81c:	f1 2c       	mov	r15, r1
     81e:	ec 0e       	add	r14, r28
     820:	fd 1e       	adc	r15, r29
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	b7 01       	movw	r22, r14
     828:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     82c:	8e 01       	movw	r16, r28
     82e:	0f 5e       	subi	r16, 0xEF	; 239
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	ce 01       	movw	r24, r28
     834:	05 96       	adiw	r24, 0x05	; 5
     836:	b8 01       	movw	r22, r16
     838:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     83c:	89 85       	ldd	r24, Y+9	; 0x09
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	40 f0       	brcs	.+16     	; 0x852 <__ltsf2+0x56>
     842:	89 89       	ldd	r24, Y+17	; 0x11
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	28 f0       	brcs	.+10     	; 0x852 <__ltsf2+0x56>
     848:	c7 01       	movw	r24, r14
     84a:	b8 01       	movw	r22, r16
     84c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fpcmp_parts_f>
     850:	01 c0       	rjmp	.+2      	; 0x854 <__ltsf2+0x58>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	68 96       	adiw	r28, 0x18	; 24
     856:	e6 e0       	ldi	r30, 0x06	; 6
     858:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__epilogue_restores__+0x18>

0000085c <__fixsfsi>:
     85c:	ac e0       	ldi	r26, 0x0C	; 12
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	e4 e3       	ldi	r30, 0x34	; 52
     862:	f4 e0       	ldi	r31, 0x04	; 4
     864:	0c 94 39 26 	jmp	0x4c72	; 0x4c72 <__prologue_saves__+0x20>
     868:	69 83       	std	Y+1, r22	; 0x01
     86a:	7a 83       	std	Y+2, r23	; 0x02
     86c:	8b 83       	std	Y+3, r24	; 0x03
     86e:	9c 83       	std	Y+4, r25	; 0x04
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	be 01       	movw	r22, r28
     876:	6b 5f       	subi	r22, 0xFB	; 251
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     87e:	8d 81       	ldd	r24, Y+5	; 0x05
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	61 f1       	breq	.+88     	; 0x8dc <__stack+0x7d>
     884:	82 30       	cpi	r24, 0x02	; 2
     886:	50 f1       	brcs	.+84     	; 0x8dc <__stack+0x7d>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	21 f4       	brne	.+8      	; 0x894 <__stack+0x35>
     88c:	8e 81       	ldd	r24, Y+6	; 0x06
     88e:	88 23       	and	r24, r24
     890:	51 f1       	breq	.+84     	; 0x8e6 <__stack+0x87>
     892:	2e c0       	rjmp	.+92     	; 0x8f0 <__stack+0x91>
     894:	2f 81       	ldd	r18, Y+7	; 0x07
     896:	38 85       	ldd	r19, Y+8	; 0x08
     898:	37 fd       	sbrc	r19, 7
     89a:	20 c0       	rjmp	.+64     	; 0x8dc <__stack+0x7d>
     89c:	6e 81       	ldd	r22, Y+6	; 0x06
     89e:	2f 31       	cpi	r18, 0x1F	; 31
     8a0:	31 05       	cpc	r19, r1
     8a2:	1c f0       	brlt	.+6      	; 0x8aa <__stack+0x4b>
     8a4:	66 23       	and	r22, r22
     8a6:	f9 f0       	breq	.+62     	; 0x8e6 <__stack+0x87>
     8a8:	23 c0       	rjmp	.+70     	; 0x8f0 <__stack+0x91>
     8aa:	8e e1       	ldi	r24, 0x1E	; 30
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	82 1b       	sub	r24, r18
     8b0:	93 0b       	sbc	r25, r19
     8b2:	29 85       	ldd	r18, Y+9	; 0x09
     8b4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8b8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__stack+0x65>
     8bc:	56 95       	lsr	r21
     8be:	47 95       	ror	r20
     8c0:	37 95       	ror	r19
     8c2:	27 95       	ror	r18
     8c4:	8a 95       	dec	r24
     8c6:	d2 f7       	brpl	.-12     	; 0x8bc <__stack+0x5d>
     8c8:	66 23       	and	r22, r22
     8ca:	b1 f0       	breq	.+44     	; 0x8f8 <__stack+0x99>
     8cc:	50 95       	com	r21
     8ce:	40 95       	com	r20
     8d0:	30 95       	com	r19
     8d2:	21 95       	neg	r18
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	4f 4f       	sbci	r20, 0xFF	; 255
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	0e c0       	rjmp	.+28     	; 0x8f8 <__stack+0x99>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__stack+0x99>
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	4f ef       	ldi	r20, 0xFF	; 255
     8ec:	5f e7       	ldi	r21, 0x7F	; 127
     8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e8       	ldi	r21, 0x80	; 128
     8f8:	b9 01       	movw	r22, r18
     8fa:	ca 01       	movw	r24, r20
     8fc:	2c 96       	adiw	r28, 0x0c	; 12
     8fe:	e2 e0       	ldi	r30, 0x02	; 2
     900:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__epilogue_restores__+0x20>

00000904 <__pack_f>:
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	fc 01       	movw	r30, r24
     910:	e4 80       	ldd	r14, Z+4	; 0x04
     912:	f5 80       	ldd	r15, Z+5	; 0x05
     914:	06 81       	ldd	r16, Z+6	; 0x06
     916:	17 81       	ldd	r17, Z+7	; 0x07
     918:	d1 80       	ldd	r13, Z+1	; 0x01
     91a:	80 81       	ld	r24, Z
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	48 f4       	brcc	.+18     	; 0x932 <__pack_f+0x2e>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e1       	ldi	r26, 0x10	; 16
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 2a       	or	r14, r24
     92a:	f9 2a       	or	r15, r25
     92c:	0a 2b       	or	r16, r26
     92e:	1b 2b       	or	r17, r27
     930:	a5 c0       	rjmp	.+330    	; 0xa7c <__pack_f+0x178>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	09 f4       	brne	.+2      	; 0x938 <__pack_f+0x34>
     936:	9f c0       	rjmp	.+318    	; 0xa76 <__pack_f+0x172>
     938:	82 30       	cpi	r24, 0x02	; 2
     93a:	21 f4       	brne	.+8      	; 0x944 <__pack_f+0x40>
     93c:	ee 24       	eor	r14, r14
     93e:	ff 24       	eor	r15, r15
     940:	87 01       	movw	r16, r14
     942:	05 c0       	rjmp	.+10     	; 0x94e <__pack_f+0x4a>
     944:	e1 14       	cp	r14, r1
     946:	f1 04       	cpc	r15, r1
     948:	01 05       	cpc	r16, r1
     94a:	11 05       	cpc	r17, r1
     94c:	19 f4       	brne	.+6      	; 0x954 <__pack_f+0x50>
     94e:	e0 e0       	ldi	r30, 0x00	; 0
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	96 c0       	rjmp	.+300    	; 0xa80 <__pack_f+0x17c>
     954:	62 81       	ldd	r22, Z+2	; 0x02
     956:	73 81       	ldd	r23, Z+3	; 0x03
     958:	9f ef       	ldi	r25, 0xFF	; 255
     95a:	62 38       	cpi	r22, 0x82	; 130
     95c:	79 07       	cpc	r23, r25
     95e:	0c f0       	brlt	.+2      	; 0x962 <__pack_f+0x5e>
     960:	5b c0       	rjmp	.+182    	; 0xa18 <__pack_f+0x114>
     962:	22 e8       	ldi	r18, 0x82	; 130
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	26 1b       	sub	r18, r22
     968:	37 0b       	sbc	r19, r23
     96a:	2a 31       	cpi	r18, 0x1A	; 26
     96c:	31 05       	cpc	r19, r1
     96e:	2c f0       	brlt	.+10     	; 0x97a <__pack_f+0x76>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	2a c0       	rjmp	.+84     	; 0x9ce <__pack_f+0xca>
     97a:	b8 01       	movw	r22, r16
     97c:	a7 01       	movw	r20, r14
     97e:	02 2e       	mov	r0, r18
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0x86>
     982:	76 95       	lsr	r23
     984:	67 95       	ror	r22
     986:	57 95       	ror	r21
     988:	47 95       	ror	r20
     98a:	0a 94       	dec	r0
     98c:	d2 f7       	brpl	.-12     	; 0x982 <__pack_f+0x7e>
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__pack_f+0x9c>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	aa 1f       	adc	r26, r26
     99e:	bb 1f       	adc	r27, r27
     9a0:	2a 95       	dec	r18
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__pack_f+0x94>
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	a1 09       	sbc	r26, r1
     9a8:	b1 09       	sbc	r27, r1
     9aa:	8e 21       	and	r24, r14
     9ac:	9f 21       	and	r25, r15
     9ae:	a0 23       	and	r26, r16
     9b0:	b1 23       	and	r27, r17
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <__pack_f+0xbe>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	9a 01       	movw	r18, r20
     9c4:	ab 01       	movw	r20, r22
     9c6:	28 2b       	or	r18, r24
     9c8:	39 2b       	or	r19, r25
     9ca:	4a 2b       	or	r20, r26
     9cc:	5b 2b       	or	r21, r27
     9ce:	da 01       	movw	r26, r20
     9d0:	c9 01       	movw	r24, r18
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	90 70       	andi	r25, 0x00	; 0
     9d6:	a0 70       	andi	r26, 0x00	; 0
     9d8:	b0 70       	andi	r27, 0x00	; 0
     9da:	80 34       	cpi	r24, 0x40	; 64
     9dc:	91 05       	cpc	r25, r1
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	39 f4       	brne	.+14     	; 0x9f2 <__pack_f+0xee>
     9e4:	27 ff       	sbrs	r18, 7
     9e6:	09 c0       	rjmp	.+18     	; 0x9fa <__pack_f+0xf6>
     9e8:	20 5c       	subi	r18, 0xC0	; 192
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	4f 4f       	sbci	r20, 0xFF	; 255
     9ee:	5f 4f       	sbci	r21, 0xFF	; 255
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <__pack_f+0xf6>
     9f2:	21 5c       	subi	r18, 0xC1	; 193
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	4f 4f       	sbci	r20, 0xFF	; 255
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	e0 e0       	ldi	r30, 0x00	; 0
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	20 30       	cpi	r18, 0x00	; 0
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	3a 07       	cpc	r19, r26
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	4a 07       	cpc	r20, r26
     a08:	a0 e4       	ldi	r26, 0x40	; 64
     a0a:	5a 07       	cpc	r21, r26
     a0c:	10 f0       	brcs	.+4      	; 0xa12 <__pack_f+0x10e>
     a0e:	e1 e0       	ldi	r30, 0x01	; 1
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	79 01       	movw	r14, r18
     a14:	8a 01       	movw	r16, r20
     a16:	27 c0       	rjmp	.+78     	; 0xa66 <__pack_f+0x162>
     a18:	60 38       	cpi	r22, 0x80	; 128
     a1a:	71 05       	cpc	r23, r1
     a1c:	64 f5       	brge	.+88     	; 0xa76 <__pack_f+0x172>
     a1e:	fb 01       	movw	r30, r22
     a20:	e1 58       	subi	r30, 0x81	; 129
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	d8 01       	movw	r26, r16
     a26:	c7 01       	movw	r24, r14
     a28:	8f 77       	andi	r24, 0x7F	; 127
     a2a:	90 70       	andi	r25, 0x00	; 0
     a2c:	a0 70       	andi	r26, 0x00	; 0
     a2e:	b0 70       	andi	r27, 0x00	; 0
     a30:	80 34       	cpi	r24, 0x40	; 64
     a32:	91 05       	cpc	r25, r1
     a34:	a1 05       	cpc	r26, r1
     a36:	b1 05       	cpc	r27, r1
     a38:	39 f4       	brne	.+14     	; 0xa48 <__pack_f+0x144>
     a3a:	e7 fe       	sbrs	r14, 7
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__pack_f+0x154>
     a3e:	80 e4       	ldi	r24, 0x40	; 64
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__pack_f+0x14c>
     a48:	8f e3       	ldi	r24, 0x3F	; 63
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	e8 0e       	add	r14, r24
     a52:	f9 1e       	adc	r15, r25
     a54:	0a 1f       	adc	r16, r26
     a56:	1b 1f       	adc	r17, r27
     a58:	17 ff       	sbrs	r17, 7
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <__pack_f+0x162>
     a5c:	16 95       	lsr	r17
     a5e:	07 95       	ror	r16
     a60:	f7 94       	ror	r15
     a62:	e7 94       	ror	r14
     a64:	31 96       	adiw	r30, 0x01	; 1
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	16 95       	lsr	r17
     a6a:	07 95       	ror	r16
     a6c:	f7 94       	ror	r15
     a6e:	e7 94       	ror	r14
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__pack_f+0x164>
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__pack_f+0x17c>
     a76:	ee 24       	eor	r14, r14
     a78:	ff 24       	eor	r15, r15
     a7a:	87 01       	movw	r16, r14
     a7c:	ef ef       	ldi	r30, 0xFF	; 255
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	6e 2f       	mov	r22, r30
     a82:	67 95       	ror	r22
     a84:	66 27       	eor	r22, r22
     a86:	67 95       	ror	r22
     a88:	90 2f       	mov	r25, r16
     a8a:	9f 77       	andi	r25, 0x7F	; 127
     a8c:	d7 94       	ror	r13
     a8e:	dd 24       	eor	r13, r13
     a90:	d7 94       	ror	r13
     a92:	8e 2f       	mov	r24, r30
     a94:	86 95       	lsr	r24
     a96:	49 2f       	mov	r20, r25
     a98:	46 2b       	or	r20, r22
     a9a:	58 2f       	mov	r21, r24
     a9c:	5d 29       	or	r21, r13
     a9e:	b7 01       	movw	r22, r14
     aa0:	ca 01       	movw	r24, r20
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	08 95       	ret

00000aae <__unpack_f>:
     aae:	fc 01       	movw	r30, r24
     ab0:	db 01       	movw	r26, r22
     ab2:	40 81       	ld	r20, Z
     ab4:	51 81       	ldd	r21, Z+1	; 0x01
     ab6:	22 81       	ldd	r18, Z+2	; 0x02
     ab8:	62 2f       	mov	r22, r18
     aba:	6f 77       	andi	r22, 0x7F	; 127
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	22 1f       	adc	r18, r18
     ac0:	22 27       	eor	r18, r18
     ac2:	22 1f       	adc	r18, r18
     ac4:	93 81       	ldd	r25, Z+3	; 0x03
     ac6:	89 2f       	mov	r24, r25
     ac8:	88 0f       	add	r24, r24
     aca:	82 2b       	or	r24, r18
     acc:	28 2f       	mov	r18, r24
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	99 1f       	adc	r25, r25
     ad2:	99 27       	eor	r25, r25
     ad4:	99 1f       	adc	r25, r25
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	9c 93       	st	X, r25
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	21 15       	cp	r18, r1
     ade:	31 05       	cpc	r19, r1
     ae0:	a9 f5       	brne	.+106    	; 0xb4c <__unpack_f+0x9e>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	11 f4       	brne	.+4      	; 0xaf0 <__unpack_f+0x42>
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	37 c0       	rjmp	.+110    	; 0xb5e <__unpack_f+0xb0>
     af0:	82 e8       	ldi	r24, 0x82	; 130
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	13 96       	adiw	r26, 0x03	; 3
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	12 97       	sbiw	r26, 0x02	; 2
     afc:	9a 01       	movw	r18, r20
     afe:	ab 01       	movw	r20, r22
     b00:	67 e0       	ldi	r22, 0x07	; 7
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	44 1f       	adc	r20, r20
     b08:	55 1f       	adc	r21, r21
     b0a:	6a 95       	dec	r22
     b0c:	d1 f7       	brne	.-12     	; 0xb02 <__unpack_f+0x54>
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	8c 93       	st	X, r24
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <__unpack_f+0x80>
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 1f       	adc	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	8d 91       	ld	r24, X+
     b20:	9c 91       	ld	r25, X
     b22:	13 97       	sbiw	r26, 0x03	; 3
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	13 96       	adiw	r26, 0x03	; 3
     b28:	9c 93       	st	X, r25
     b2a:	8e 93       	st	-X, r24
     b2c:	12 97       	sbiw	r26, 0x02	; 2
     b2e:	20 30       	cpi	r18, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	38 07       	cpc	r19, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	48 07       	cpc	r20, r24
     b38:	80 e4       	ldi	r24, 0x40	; 64
     b3a:	58 07       	cpc	r21, r24
     b3c:	58 f3       	brcs	.-42     	; 0xb14 <__unpack_f+0x66>
     b3e:	14 96       	adiw	r26, 0x04	; 4
     b40:	2d 93       	st	X+, r18
     b42:	3d 93       	st	X+, r19
     b44:	4d 93       	st	X+, r20
     b46:	5c 93       	st	X, r21
     b48:	17 97       	sbiw	r26, 0x07	; 7
     b4a:	08 95       	ret
     b4c:	2f 3f       	cpi	r18, 0xFF	; 255
     b4e:	31 05       	cpc	r19, r1
     b50:	79 f4       	brne	.+30     	; 0xb70 <__unpack_f+0xc2>
     b52:	41 15       	cp	r20, r1
     b54:	51 05       	cpc	r21, r1
     b56:	61 05       	cpc	r22, r1
     b58:	71 05       	cpc	r23, r1
     b5a:	19 f4       	brne	.+6      	; 0xb62 <__unpack_f+0xb4>
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	8c 93       	st	X, r24
     b60:	08 95       	ret
     b62:	64 ff       	sbrs	r22, 4
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <__unpack_f+0xbe>
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
     b6a:	12 c0       	rjmp	.+36     	; 0xb90 <__unpack_f+0xe2>
     b6c:	1c 92       	st	X, r1
     b6e:	10 c0       	rjmp	.+32     	; 0xb90 <__unpack_f+0xe2>
     b70:	2f 57       	subi	r18, 0x7F	; 127
     b72:	30 40       	sbci	r19, 0x00	; 0
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	3c 93       	st	X, r19
     b78:	2e 93       	st	-X, r18
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	8c 93       	st	X, r24
     b80:	87 e0       	ldi	r24, 0x07	; 7
     b82:	44 0f       	add	r20, r20
     b84:	55 1f       	adc	r21, r21
     b86:	66 1f       	adc	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	8a 95       	dec	r24
     b8c:	d1 f7       	brne	.-12     	; 0xb82 <__unpack_f+0xd4>
     b8e:	70 64       	ori	r23, 0x40	; 64
     b90:	14 96       	adiw	r26, 0x04	; 4
     b92:	4d 93       	st	X+, r20
     b94:	5d 93       	st	X+, r21
     b96:	6d 93       	st	X+, r22
     b98:	7c 93       	st	X, r23
     b9a:	17 97       	sbiw	r26, 0x07	; 7
     b9c:	08 95       	ret

00000b9e <__fpcmp_parts_f>:
     b9e:	1f 93       	push	r17
     ba0:	dc 01       	movw	r26, r24
     ba2:	fb 01       	movw	r30, r22
     ba4:	9c 91       	ld	r25, X
     ba6:	92 30       	cpi	r25, 0x02	; 2
     ba8:	08 f4       	brcc	.+2      	; 0xbac <__fpcmp_parts_f+0xe>
     baa:	47 c0       	rjmp	.+142    	; 0xc3a <__fpcmp_parts_f+0x9c>
     bac:	80 81       	ld	r24, Z
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__fpcmp_parts_f+0x16>
     bb2:	43 c0       	rjmp	.+134    	; 0xc3a <__fpcmp_parts_f+0x9c>
     bb4:	94 30       	cpi	r25, 0x04	; 4
     bb6:	51 f4       	brne	.+20     	; 0xbcc <__fpcmp_parts_f+0x2e>
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	1c 91       	ld	r17, X
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	99 f5       	brne	.+102    	; 0xc26 <__fpcmp_parts_f+0x88>
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	68 2f       	mov	r22, r24
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	61 1b       	sub	r22, r17
     bc8:	71 09       	sbc	r23, r1
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <__fpcmp_parts_f+0xac>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	21 f0       	breq	.+8      	; 0xbd8 <__fpcmp_parts_f+0x3a>
     bd0:	92 30       	cpi	r25, 0x02	; 2
     bd2:	31 f4       	brne	.+12     	; 0xbe0 <__fpcmp_parts_f+0x42>
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	b9 f1       	breq	.+110    	; 0xc46 <__fpcmp_parts_f+0xa8>
     bd8:	81 81       	ldd	r24, Z+1	; 0x01
     bda:	88 23       	and	r24, r24
     bdc:	89 f1       	breq	.+98     	; 0xc40 <__fpcmp_parts_f+0xa2>
     bde:	2d c0       	rjmp	.+90     	; 0xc3a <__fpcmp_parts_f+0x9c>
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	1c 91       	ld	r17, X
     be4:	11 97       	sbiw	r26, 0x01	; 1
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	f1 f0       	breq	.+60     	; 0xc26 <__fpcmp_parts_f+0x88>
     bea:	81 81       	ldd	r24, Z+1	; 0x01
     bec:	18 17       	cp	r17, r24
     bee:	d9 f4       	brne	.+54     	; 0xc26 <__fpcmp_parts_f+0x88>
     bf0:	12 96       	adiw	r26, 0x02	; 2
     bf2:	2d 91       	ld	r18, X+
     bf4:	3c 91       	ld	r19, X
     bf6:	13 97       	sbiw	r26, 0x03	; 3
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	82 17       	cp	r24, r18
     bfe:	93 07       	cpc	r25, r19
     c00:	94 f0       	brlt	.+36     	; 0xc26 <__fpcmp_parts_f+0x88>
     c02:	28 17       	cp	r18, r24
     c04:	39 07       	cpc	r19, r25
     c06:	bc f0       	brlt	.+46     	; 0xc36 <__fpcmp_parts_f+0x98>
     c08:	14 96       	adiw	r26, 0x04	; 4
     c0a:	8d 91       	ld	r24, X+
     c0c:	9d 91       	ld	r25, X+
     c0e:	0d 90       	ld	r0, X+
     c10:	bc 91       	ld	r27, X
     c12:	a0 2d       	mov	r26, r0
     c14:	24 81       	ldd	r18, Z+4	; 0x04
     c16:	35 81       	ldd	r19, Z+5	; 0x05
     c18:	46 81       	ldd	r20, Z+6	; 0x06
     c1a:	57 81       	ldd	r21, Z+7	; 0x07
     c1c:	28 17       	cp	r18, r24
     c1e:	39 07       	cpc	r19, r25
     c20:	4a 07       	cpc	r20, r26
     c22:	5b 07       	cpc	r21, r27
     c24:	18 f4       	brcc	.+6      	; 0xc2c <__fpcmp_parts_f+0x8e>
     c26:	11 23       	and	r17, r17
     c28:	41 f0       	breq	.+16     	; 0xc3a <__fpcmp_parts_f+0x9c>
     c2a:	0a c0       	rjmp	.+20     	; 0xc40 <__fpcmp_parts_f+0xa2>
     c2c:	82 17       	cp	r24, r18
     c2e:	93 07       	cpc	r25, r19
     c30:	a4 07       	cpc	r26, r20
     c32:	b5 07       	cpc	r27, r21
     c34:	40 f4       	brcc	.+16     	; 0xc46 <__fpcmp_parts_f+0xa8>
     c36:	11 23       	and	r17, r17
     c38:	19 f0       	breq	.+6      	; 0xc40 <__fpcmp_parts_f+0xa2>
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__fpcmp_parts_f+0xac>
     c40:	6f ef       	ldi	r22, 0xFF	; 255
     c42:	7f ef       	ldi	r23, 0xFF	; 255
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <__fpcmp_parts_f+0xac>
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	cb 01       	movw	r24, r22
     c4c:	1f 91       	pop	r17
     c4e:	08 95       	ret

00000c50 <dtostre>:
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ee e2       	ldi	r30, 0x2E	; 46
     c56:	f6 e0       	ldi	r31, 0x06	; 6
     c58:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__prologue_saves__+0x16>
     c5c:	7a 01       	movw	r14, r20
     c5e:	d0 2e       	mov	r13, r16
     c60:	12 2f       	mov	r17, r18
     c62:	28 30       	cpi	r18, 0x08	; 8
     c64:	08 f0       	brcs	.+2      	; 0xc68 <dtostre+0x18>
     c66:	17 e0       	ldi	r17, 0x07	; 7
     c68:	a7 01       	movw	r20, r14
     c6a:	21 2f       	mov	r18, r17
     c6c:	00 e0       	ldi	r16, 0x00	; 0
     c6e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__ftoa_engine>
     c72:	68 2f       	mov	r22, r24
     c74:	f7 01       	movw	r30, r14
     c76:	51 91       	ld	r21, Z+
     c78:	25 2f       	mov	r18, r21
     c7a:	50 ff       	sbrs	r21, 0
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <dtostre+0x36>
     c7e:	53 fd       	sbrc	r21, 3
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <dtostre+0x36>
     c82:	8d e2       	ldi	r24, 0x2D	; 45
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <dtostre+0x48>
     c86:	d1 fe       	sbrs	r13, 1
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <dtostre+0x3e>
     c8a:	8b e2       	ldi	r24, 0x2B	; 43
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <dtostre+0x48>
     c8e:	d0 fc       	sbrc	r13, 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <dtostre+0x46>
     c92:	c7 01       	movw	r24, r14
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <dtostre+0x4e>
     c96:	80 e2       	ldi	r24, 0x20	; 32
     c98:	d7 01       	movw	r26, r14
     c9a:	8c 93       	st	X, r24
     c9c:	cf 01       	movw	r24, r30
     c9e:	48 2f       	mov	r20, r24
     ca0:	39 2f       	mov	r19, r25
     ca2:	23 ff       	sbrs	r18, 3
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <dtostre+0x5c>
     ca6:	6c e5       	ldi	r22, 0x5C	; 92
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <dtostre+0x64>
     cac:	22 ff       	sbrs	r18, 2
     cae:	0b c0       	rjmp	.+22     	; 0xcc6 <dtostre+0x76>
     cb0:	64 e5       	ldi	r22, 0x54	; 84
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	d2 fe       	sbrs	r13, 2
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <dtostre+0x6c>
     cb8:	6c 5f       	subi	r22, 0xFC	; 252
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	84 2f       	mov	r24, r20
     cbe:	93 2f       	mov	r25, r19
     cc0:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcpy_P>
     cc4:	45 c0       	rjmp	.+138    	; 0xd50 <dtostre+0x100>
     cc6:	f7 01       	movw	r30, r14
     cc8:	21 81       	ldd	r18, Z+1	; 0x01
     cca:	dc 01       	movw	r26, r24
     ccc:	2d 93       	st	X+, r18
     cce:	21 33       	cpi	r18, 0x31	; 49
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <dtostre+0x84>
     cd2:	5f 7e       	andi	r21, 0xEF	; 239
     cd4:	11 23       	and	r17, r17
     cd6:	a9 f0       	breq	.+42     	; 0xd02 <dtostre+0xb2>
     cd8:	e7 01       	movw	r28, r14
     cda:	84 2f       	mov	r24, r20
     cdc:	93 2f       	mov	r25, r19
     cde:	fc 01       	movw	r30, r24
     ce0:	91 2f       	mov	r25, r17
     ce2:	2e e2       	ldi	r18, 0x2E	; 46
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	21 83       	std	Z+1, r18	; 0x01
     ce8:	91 50       	subi	r25, 0x01	; 1
     cea:	21 96       	adiw	r28, 0x01	; 1
     cec:	31 96       	adiw	r30, 0x01	; 1
     cee:	28 2f       	mov	r18, r24
     cf0:	99 23       	and	r25, r25
     cf2:	c1 f7       	brne	.-16     	; 0xce4 <dtostre+0x94>
     cf4:	11 50       	subi	r17, 0x01	; 1
     cf6:	81 2f       	mov	r24, r17
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	a8 0f       	add	r26, r24
     cfe:	b9 1f       	adc	r27, r25
     d00:	2d 93       	st	X+, r18
     d02:	d2 fc       	sbrc	r13, 2
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <dtostre+0xba>
     d06:	85 e6       	ldi	r24, 0x65	; 101
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <dtostre+0xbc>
     d0a:	85 e4       	ldi	r24, 0x45	; 69
     d0c:	96 2f       	mov	r25, r22
     d0e:	fd 01       	movw	r30, r26
     d10:	81 93       	st	Z+, r24
     d12:	67 ff       	sbrs	r22, 7
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <dtostre+0xd4>
     d16:	8d e2       	ldi	r24, 0x2D	; 45
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	8c 93       	st	X, r24
     d1c:	df 01       	movw	r26, r30
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	91 95       	neg	r25
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <dtostre+0xe8>
     d24:	66 23       	and	r22, r22
     d26:	29 f4       	brne	.+10     	; 0xd32 <dtostre+0xe2>
     d28:	54 ff       	sbrs	r21, 4
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <dtostre+0xe2>
     d2c:	df 01       	movw	r26, r30
     d2e:	8d e2       	ldi	r24, 0x2D	; 45
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <dtostre+0xe6>
     d32:	df 01       	movw	r26, r30
     d34:	8b e2       	ldi	r24, 0x2B	; 43
     d36:	8d 93       	st	X+, r24
     d38:	80 e3       	ldi	r24, 0x30	; 48
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <dtostre+0xf0>
     d3c:	8f 5f       	subi	r24, 0xFF	; 255
     d3e:	9a 50       	subi	r25, 0x0A	; 10
     d40:	9a 30       	cpi	r25, 0x0A	; 10
     d42:	e4 f7       	brge	.-8      	; 0xd3c <dtostre+0xec>
     d44:	fd 01       	movw	r30, r26
     d46:	81 93       	st	Z+, r24
     d48:	90 5d       	subi	r25, 0xD0	; 208
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	9c 93       	st	X, r25
     d4e:	11 82       	std	Z+1, r1	; 0x01
     d50:	c7 01       	movw	r24, r14
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	e7 e0       	ldi	r30, 0x07	; 7
     d58:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__epilogue_restores__+0x16>

00000d5c <__ftoa_engine>:
     d5c:	28 30       	cpi	r18, 0x08	; 8
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <__ftoa_engine+0x6>
     d60:	27 e0       	ldi	r18, 0x07	; 7
     d62:	33 27       	eor	r19, r19
     d64:	da 01       	movw	r26, r20
     d66:	99 0f       	add	r25, r25
     d68:	31 1d       	adc	r19, r1
     d6a:	87 fd       	sbrc	r24, 7
     d6c:	91 60       	ori	r25, 0x01	; 1
     d6e:	00 96       	adiw	r24, 0x00	; 0
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	39 f4       	brne	.+14     	; 0xd84 <__ftoa_engine+0x28>
     d76:	32 60       	ori	r19, 0x02	; 2
     d78:	2e 5f       	subi	r18, 0xFE	; 254
     d7a:	3d 93       	st	X+, r19
     d7c:	30 e3       	ldi	r19, 0x30	; 48
     d7e:	2a 95       	dec	r18
     d80:	e1 f7       	brne	.-8      	; 0xd7a <__ftoa_engine+0x1e>
     d82:	08 95       	ret
     d84:	9f 3f       	cpi	r25, 0xFF	; 255
     d86:	30 f0       	brcs	.+12     	; 0xd94 <__ftoa_engine+0x38>
     d88:	80 38       	cpi	r24, 0x80	; 128
     d8a:	71 05       	cpc	r23, r1
     d8c:	61 05       	cpc	r22, r1
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__ftoa_engine+0x36>
     d90:	3c 5f       	subi	r19, 0xFC	; 252
     d92:	3c 5f       	subi	r19, 0xFC	; 252
     d94:	3d 93       	st	X+, r19
     d96:	91 30       	cpi	r25, 0x01	; 1
     d98:	08 f0       	brcs	.+2      	; 0xd9c <__ftoa_engine+0x40>
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	91 1d       	adc	r25, r1
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	1f 93       	push	r17
     da4:	0f 93       	push	r16
     da6:	ff 92       	push	r15
     da8:	ef 92       	push	r14
     daa:	19 2f       	mov	r17, r25
     dac:	98 7f       	andi	r25, 0xF8	; 248
     dae:	96 95       	lsr	r25
     db0:	e9 2f       	mov	r30, r25
     db2:	96 95       	lsr	r25
     db4:	96 95       	lsr	r25
     db6:	e9 0f       	add	r30, r25
     db8:	ff 27       	eor	r31, r31
     dba:	e2 54       	subi	r30, 0x42	; 66
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	99 27       	eor	r25, r25
     dc0:	33 27       	eor	r19, r19
     dc2:	ee 24       	eor	r14, r14
     dc4:	ff 24       	eor	r15, r15
     dc6:	a7 01       	movw	r20, r14
     dc8:	e7 01       	movw	r28, r14
     dca:	05 90       	lpm	r0, Z+
     dcc:	08 94       	sec
     dce:	07 94       	ror	r0
     dd0:	28 f4       	brcc	.+10     	; 0xddc <__ftoa_engine+0x80>
     dd2:	36 0f       	add	r19, r22
     dd4:	e7 1e       	adc	r14, r23
     dd6:	f8 1e       	adc	r15, r24
     dd8:	49 1f       	adc	r20, r25
     dda:	51 1d       	adc	r21, r1
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	88 1f       	adc	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	06 94       	lsr	r0
     de6:	a1 f7       	brne	.-24     	; 0xdd0 <__ftoa_engine+0x74>
     de8:	05 90       	lpm	r0, Z+
     dea:	07 94       	ror	r0
     dec:	28 f4       	brcc	.+10     	; 0xdf8 <__ftoa_engine+0x9c>
     dee:	e7 0e       	add	r14, r23
     df0:	f8 1e       	adc	r15, r24
     df2:	49 1f       	adc	r20, r25
     df4:	56 1f       	adc	r21, r22
     df6:	c1 1d       	adc	r28, r1
     df8:	77 0f       	add	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	66 1f       	adc	r22, r22
     e00:	06 94       	lsr	r0
     e02:	a1 f7       	brne	.-24     	; 0xdec <__ftoa_engine+0x90>
     e04:	05 90       	lpm	r0, Z+
     e06:	07 94       	ror	r0
     e08:	28 f4       	brcc	.+10     	; 0xe14 <__ftoa_engine+0xb8>
     e0a:	f8 0e       	add	r15, r24
     e0c:	49 1f       	adc	r20, r25
     e0e:	56 1f       	adc	r21, r22
     e10:	c7 1f       	adc	r28, r23
     e12:	d1 1d       	adc	r29, r1
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	66 1f       	adc	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	06 94       	lsr	r0
     e1e:	a1 f7       	brne	.-24     	; 0xe08 <__ftoa_engine+0xac>
     e20:	05 90       	lpm	r0, Z+
     e22:	07 94       	ror	r0
     e24:	20 f4       	brcc	.+8      	; 0xe2e <__ftoa_engine+0xd2>
     e26:	49 0f       	add	r20, r25
     e28:	56 1f       	adc	r21, r22
     e2a:	c7 1f       	adc	r28, r23
     e2c:	d8 1f       	adc	r29, r24
     e2e:	99 0f       	add	r25, r25
     e30:	66 1f       	adc	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	06 94       	lsr	r0
     e38:	a9 f7       	brne	.-22     	; 0xe24 <__ftoa_engine+0xc8>
     e3a:	84 91       	lpm	r24, Z+
     e3c:	10 95       	com	r17
     e3e:	17 70       	andi	r17, 0x07	; 7
     e40:	41 f0       	breq	.+16     	; 0xe52 <__ftoa_engine+0xf6>
     e42:	d6 95       	lsr	r29
     e44:	c7 95       	ror	r28
     e46:	57 95       	ror	r21
     e48:	47 95       	ror	r20
     e4a:	f7 94       	ror	r15
     e4c:	e7 94       	ror	r14
     e4e:	1a 95       	dec	r17
     e50:	c1 f7       	brne	.-16     	; 0xe42 <__ftoa_engine+0xe6>
     e52:	e4 e6       	ldi	r30, 0x64	; 100
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	68 94       	set
     e58:	15 90       	lpm	r1, Z+
     e5a:	15 91       	lpm	r17, Z+
     e5c:	35 91       	lpm	r19, Z+
     e5e:	65 91       	lpm	r22, Z+
     e60:	95 91       	lpm	r25, Z+
     e62:	05 90       	lpm	r0, Z+
     e64:	7f e2       	ldi	r23, 0x2F	; 47
     e66:	73 95       	inc	r23
     e68:	e1 18       	sub	r14, r1
     e6a:	f1 0a       	sbc	r15, r17
     e6c:	43 0b       	sbc	r20, r19
     e6e:	56 0b       	sbc	r21, r22
     e70:	c9 0b       	sbc	r28, r25
     e72:	d0 09       	sbc	r29, r0
     e74:	c0 f7       	brcc	.-16     	; 0xe66 <__ftoa_engine+0x10a>
     e76:	e1 0c       	add	r14, r1
     e78:	f1 1e       	adc	r15, r17
     e7a:	43 1f       	adc	r20, r19
     e7c:	56 1f       	adc	r21, r22
     e7e:	c9 1f       	adc	r28, r25
     e80:	d0 1d       	adc	r29, r0
     e82:	7e f4       	brtc	.+30     	; 0xea2 <__ftoa_engine+0x146>
     e84:	70 33       	cpi	r23, 0x30	; 48
     e86:	11 f4       	brne	.+4      	; 0xe8c <__ftoa_engine+0x130>
     e88:	8a 95       	dec	r24
     e8a:	e6 cf       	rjmp	.-52     	; 0xe58 <__ftoa_engine+0xfc>
     e8c:	e8 94       	clt
     e8e:	01 50       	subi	r16, 0x01	; 1
     e90:	30 f0       	brcs	.+12     	; 0xe9e <__ftoa_engine+0x142>
     e92:	08 0f       	add	r16, r24
     e94:	0a f4       	brpl	.+2      	; 0xe98 <__ftoa_engine+0x13c>
     e96:	00 27       	eor	r16, r16
     e98:	02 17       	cp	r16, r18
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <__ftoa_engine+0x142>
     e9c:	20 2f       	mov	r18, r16
     e9e:	23 95       	inc	r18
     ea0:	02 2f       	mov	r16, r18
     ea2:	7a 33       	cpi	r23, 0x3A	; 58
     ea4:	28 f0       	brcs	.+10     	; 0xeb0 <__ftoa_engine+0x154>
     ea6:	79 e3       	ldi	r23, 0x39	; 57
     ea8:	7d 93       	st	X+, r23
     eaa:	2a 95       	dec	r18
     eac:	e9 f7       	brne	.-6      	; 0xea8 <__ftoa_engine+0x14c>
     eae:	10 c0       	rjmp	.+32     	; 0xed0 <__ftoa_engine+0x174>
     eb0:	7d 93       	st	X+, r23
     eb2:	2a 95       	dec	r18
     eb4:	89 f6       	brne	.-94     	; 0xe58 <__ftoa_engine+0xfc>
     eb6:	06 94       	lsr	r0
     eb8:	97 95       	ror	r25
     eba:	67 95       	ror	r22
     ebc:	37 95       	ror	r19
     ebe:	17 95       	ror	r17
     ec0:	17 94       	ror	r1
     ec2:	e1 18       	sub	r14, r1
     ec4:	f1 0a       	sbc	r15, r17
     ec6:	43 0b       	sbc	r20, r19
     ec8:	56 0b       	sbc	r21, r22
     eca:	c9 0b       	sbc	r28, r25
     ecc:	d0 09       	sbc	r29, r0
     ece:	98 f0       	brcs	.+38     	; 0xef6 <__ftoa_engine+0x19a>
     ed0:	23 95       	inc	r18
     ed2:	7e 91       	ld	r23, -X
     ed4:	73 95       	inc	r23
     ed6:	7a 33       	cpi	r23, 0x3A	; 58
     ed8:	08 f0       	brcs	.+2      	; 0xedc <__ftoa_engine+0x180>
     eda:	70 e3       	ldi	r23, 0x30	; 48
     edc:	7c 93       	st	X, r23
     ede:	20 13       	cpse	r18, r16
     ee0:	b8 f7       	brcc	.-18     	; 0xed0 <__ftoa_engine+0x174>
     ee2:	7e 91       	ld	r23, -X
     ee4:	70 61       	ori	r23, 0x10	; 16
     ee6:	7d 93       	st	X+, r23
     ee8:	30 f0       	brcs	.+12     	; 0xef6 <__ftoa_engine+0x19a>
     eea:	83 95       	inc	r24
     eec:	71 e3       	ldi	r23, 0x31	; 49
     eee:	7d 93       	st	X+, r23
     ef0:	70 e3       	ldi	r23, 0x30	; 48
     ef2:	2a 95       	dec	r18
     ef4:	e1 f7       	brne	.-8      	; 0xeee <__ftoa_engine+0x192>
     ef6:	11 24       	eor	r1, r1
     ef8:	ef 90       	pop	r14
     efa:	ff 90       	pop	r15
     efc:	0f 91       	pop	r16
     efe:	1f 91       	pop	r17
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	99 27       	eor	r25, r25
     f06:	87 fd       	sbrc	r24, 7
     f08:	90 95       	com	r25
     f0a:	08 95       	ret

00000f0c <strcpy_P>:
     f0c:	fb 01       	movw	r30, r22
     f0e:	dc 01       	movw	r26, r24
     f10:	05 90       	lpm	r0, Z+
     f12:	0d 92       	st	X+, r0
     f14:	00 20       	and	r0, r0
     f16:	e1 f7       	brne	.-8      	; 0xf10 <strcpy_P+0x4>
     f18:	08 95       	ret

00000f1a <strcmp>:
     f1a:	fb 01       	movw	r30, r22
     f1c:	dc 01       	movw	r26, r24
     f1e:	8d 91       	ld	r24, X+
     f20:	01 90       	ld	r0, Z+
     f22:	80 19       	sub	r24, r0
     f24:	01 10       	cpse	r0, r1
     f26:	d9 f3       	breq	.-10     	; 0xf1e <strcmp+0x4>
     f28:	99 0b       	sbc	r25, r25
     f2a:	08 95       	ret

00000f2c <strcpy>:
     f2c:	fb 01       	movw	r30, r22
     f2e:	dc 01       	movw	r26, r24
     f30:	01 90       	ld	r0, Z+
     f32:	0d 92       	st	X+, r0
     f34:	00 20       	and	r0, r0
     f36:	e1 f7       	brne	.-8      	; 0xf30 <strcpy+0x4>
     f38:	08 95       	ret

00000f3a <strlen>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	01 90       	ld	r0, Z+
     f3e:	00 20       	and	r0, r0
     f40:	e9 f7       	brne	.-6      	; 0xf3c <strlen+0x2>
     f42:	80 95       	com	r24
     f44:	90 95       	com	r25
     f46:	8e 0f       	add	r24, r30
     f48:	9f 1f       	adc	r25, r31
     f4a:	08 95       	ret

00000f4c <itoa>:
     f4c:	fb 01       	movw	r30, r22
     f4e:	9f 01       	movw	r18, r30
     f50:	e8 94       	clt
     f52:	42 30       	cpi	r20, 0x02	; 2
     f54:	c4 f0       	brlt	.+48     	; 0xf86 <itoa+0x3a>
     f56:	45 32       	cpi	r20, 0x25	; 37
     f58:	b4 f4       	brge	.+44     	; 0xf86 <itoa+0x3a>
     f5a:	4a 30       	cpi	r20, 0x0A	; 10
     f5c:	29 f4       	brne	.+10     	; 0xf68 <itoa+0x1c>
     f5e:	97 fb       	bst	r25, 7
     f60:	1e f4       	brtc	.+6      	; 0xf68 <itoa+0x1c>
     f62:	90 95       	com	r25
     f64:	81 95       	neg	r24
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	64 2f       	mov	r22, r20
     f6a:	77 27       	eor	r23, r23
     f6c:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__udivmodhi4>
     f70:	80 5d       	subi	r24, 0xD0	; 208
     f72:	8a 33       	cpi	r24, 0x3A	; 58
     f74:	0c f0       	brlt	.+2      	; 0xf78 <itoa+0x2c>
     f76:	89 5d       	subi	r24, 0xD9	; 217
     f78:	81 93       	st	Z+, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	a1 f7       	brne	.-24     	; 0xf68 <itoa+0x1c>
     f80:	16 f4       	brtc	.+4      	; 0xf86 <itoa+0x3a>
     f82:	5d e2       	ldi	r21, 0x2D	; 45
     f84:	51 93       	st	Z+, r21
     f86:	10 82       	st	Z, r1
     f88:	c9 01       	movw	r24, r18
     f8a:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <strrev>

00000f8e <strrev>:
     f8e:	dc 01       	movw	r26, r24
     f90:	fc 01       	movw	r30, r24
     f92:	67 2f       	mov	r22, r23
     f94:	71 91       	ld	r23, Z+
     f96:	77 23       	and	r23, r23
     f98:	e1 f7       	brne	.-8      	; 0xf92 <strrev+0x4>
     f9a:	32 97       	sbiw	r30, 0x02	; 2
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <strrev+0x18>
     f9e:	7c 91       	ld	r23, X
     fa0:	6d 93       	st	X+, r22
     fa2:	70 83       	st	Z, r23
     fa4:	62 91       	ld	r22, -Z
     fa6:	ae 17       	cp	r26, r30
     fa8:	bf 07       	cpc	r27, r31
     faa:	c8 f3       	brcs	.-14     	; 0xf9e <strrev+0x10>
     fac:	08 95       	ret

00000fae <MUSART_voidInit>:
#include "../../BIT_MATH.h"
#include "MUSART_register.h"
#include "MUSART_interface.h"

void MUSART_voidInit(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Temp = 0;
     fb8:	19 82       	std	Y+1, r1	; 0x01

	/*Enable RX pins*/
	SET_BIT(UCSRB, UCSRB_RXEN);
     fba:	aa e2       	ldi	r26, 0x2A	; 42
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ea e2       	ldi	r30, 0x2A	; 42
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 61       	ori	r24, 0x10	; 16
     fc6:	8c 93       	st	X, r24

	/*Enable TX pins*/
	SET_BIT(UCSRB, UCSRB_TXEN);
     fc8:	aa e2       	ldi	r26, 0x2A	; 42
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea e2       	ldi	r30, 0x2A	; 42
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 60       	ori	r24, 0x08	; 8
     fd4:	8c 93       	st	X, r24

	/*Enable RX Complete Interrupt*/
	SET_BIT(UCSRB, UCSRB_RXCIE);
     fd6:	aa e2       	ldi	r26, 0x2A	; 42
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ea e2       	ldi	r30, 0x2A	; 42
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 68       	ori	r24, 0x80	; 128
     fe2:	8c 93       	st	X, r24

	/*Select 8 bit mode*/
	CLR_BIT(UCSRB, UCSRB_UCSZ2);
     fe4:	aa e2       	ldi	r26, 0x2A	; 42
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	ea e2       	ldi	r30, 0x2A	; 42
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
	SET_BIT(Local_u8Temp,UCSRC_UCSZ1);
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	84 60       	ori	r24, 0x04	; 4
     ff6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8Temp,UCSRC_UCSZ0);
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	89 83       	std	Y+1, r24	; 0x01

	/*Select UCSRC register*/
	SET_BIT(Local_u8Temp, UCSRC_URSEL);
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	89 83       	std	Y+1, r24	; 0x01

	/*Select Asynchronous mode*/
	CLR_BIT(Local_u8Temp, UCSRC_UMSEL);
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	8f 7b       	andi	r24, 0xBF	; 191
    1008:	89 83       	std	Y+1, r24	; 0x01

	/*Select stop bit as 1 bit*/
	CLR_BIT(Local_u8Temp, UCSRC_USBS);
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	87 7f       	andi	r24, 0xF7	; 247
    100e:	89 83       	std	Y+1, r24	; 0x01

	/*Assigning value to register*/
	UCSRC = Local_u8Temp;
    1010:	e0 e4       	ldi	r30, 0x40	; 64
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	80 83       	st	Z, r24

	/*Select Baud rate*/
	UBRR = 51;
    1018:	e9 e2       	ldi	r30, 0x29	; 41
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	83 e3       	ldi	r24, 0x33	; 51
    101e:	80 83       	st	Z, r24
}
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <MUSART_sendData>:

void MUSART_sendData(u8 Copy_u8Data)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    1034:	eb e2       	ldi	r30, 0x2B	; 43
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	82 95       	swap	r24
    103c:	86 95       	lsr	r24
    103e:	87 70       	andi	r24, 0x07	; 7
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	a1 f3       	breq	.-24     	; 0x1034 <MUSART_sendData+0xc>
	UDR = Copy_u8Data;
    104c:	ec e2       	ldi	r30, 0x2C	; 44
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 83       	st	Z, r24
}
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <MUSART_readData>:

u8 MUSART_readData()
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0);
    1064:	eb e2       	ldi	r30, 0x2B	; 43
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 23       	and	r24, r24
    106c:	dc f7       	brge	.-10     	; 0x1064 <MUSART_readData+0x8>
	return UDR;
    106e:	ec e2       	ldi	r30, 0x2C	; 44
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <M_Timer0Init>:
#include "M_Timer0_private.h"
#include "M_Timer0_config.h"
#include "M_Timer0_interface.h"

void M_Timer0Init(void)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	/*select preload value*/
	TCNT0 = PRELOAD_VALUE;

#elif TIMER0_MODE == TIMER0_CTC
	/*select wave generation mode as CTC Mode*/
	CLR_BIT(TCCR0, TCCR0_WGM00);
    1082:	a3 e5       	ldi	r26, 0x53	; 83
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e5       	ldi	r30, 0x53	; 83
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8f 7b       	andi	r24, 0xBF	; 191
    108e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	8c 93       	st	X, r24
	/*set output match value */
	OCR0 = COMPARE_MATCH_VALUE;
    109e:	ec e5       	ldi	r30, 0x5C	; 92
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8a ef       	ldi	r24, 0xFA	; 250
    10a4:	80 83       	st	Z, r24
	/*Enable TIMER0 SIE*/
	SET_BIT(TIMSK, TIMSK_OCIE0);
    10a6:	a9 e5       	ldi	r26, 0x59	; 89
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e9 e5       	ldi	r30, 0x59	; 89
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	82 60       	ori	r24, 0x02	; 2
    10b2:	8c 93       	st	X, r24

#endif
	/*select TIMER0 presscaler as division by 8*/
	CLR_BIT(TCCR0, TCCR0_CS00);
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8e 7f       	andi	r24, 0xFE	; 254
    10c0:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	82 60       	ori	r24, 0x02	; 2
    10ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    10d0:	a3 e5       	ldi	r26, 0x53	; 83
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e3 e5       	ldi	r30, 0x53	; 83
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8b 7f       	andi	r24, 0xFB	; 251
    10dc:	8c 93       	st	X, r24

	/*Enable TIMER0 SIE*/
	//SET_BIT(TIFR, TIFR_TOV0);

	//Compare Match interrupt is enabled
	SET_BIT(TIMSK, TIMSK_OCIE0);
    10de:	a9 e5       	ldi	r26, 0x59	; 89
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e9 e5       	ldi	r30, 0x59	; 89
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	82 60       	ori	r24, 0x02	; 2
    10ea:	8c 93       	st	X, r24
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <M_Timer0Disable>:

void M_Timer0Disable(void)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
	/*NO Clock Source*/
	CLR_BIT(TCCR0, TCCR0_CS00);
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8e 7f       	andi	r24, 0xFE	; 254
    1106:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    1108:	a3 e5       	ldi	r26, 0x53	; 83
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e3 e5       	ldi	r30, 0x53	; 83
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    1116:	a3 e5       	ldi	r26, 0x53	; 83
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e3 e5       	ldi	r30, 0x53	; 83
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8b 7f       	andi	r24, 0xFB	; 251
    1122:	8c 93       	st	X, r24
}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <MTIMER0_voidSetPreload>:

void MTIMER0_voidSetPreload(u8 copy_u16Preload)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
	/*select preload value*/
	TCNT0 = PRELOAD_VALUE;
    1136:	e2 e5       	ldi	r30, 0x52	; 82
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 ec       	ldi	r24, 0xC0	; 192
    113c:	80 83       	st	Z, r24
}
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <MTWI_voidInit>:
#include "MTWI_config.h"



void MTWI_voidInit(void)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
	/* Set Master | Slave Address */
	TWAR = MY_ADDRESS << 1;
    114e:	e2 e2       	ldi	r30, 0x22	; 34
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	80 83       	st	Z, r24
	/*Set PRESCALER Value */
#if TWI_PRESCALER == TWI_DIV_1
	TWSR = 0b00000000;
    1156:	e1 e2       	ldi	r30, 0x21	; 33
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	10 82       	st	Z, r1
#elif TWI_PRESCALER == TWI_DIV_64
	TWSR = 0b00000011;

#endif
	/*Set PRESCALER TWBR Value */
	TWBR = TWBR_VALUE;
    115c:	e0 e2       	ldi	r30, 0x20	; 32
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	80 83       	st	Z, r24


	/*Set TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    1164:	a6 e5       	ldi	r26, 0x56	; 86
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e6 e5       	ldi	r30, 0x56	; 86
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	84 60       	ori	r24, 0x04	; 4
    1170:	8c 93       	st	X, r24
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <MTWI_voidStart>:

void MTWI_voidStart(void)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	/* set TWSTA to start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    1180:	a6 e5       	ldi	r26, 0x56	; 86
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e6 e5       	ldi	r30, 0x56	; 86
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    118e:	a6 e5       	ldi	r26, 0x56	; 86
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e6 e5       	ldi	r30, 0x56	; 86
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 68       	ori	r24, 0x80	; 128
    119a:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    119c:	a6 e5       	ldi	r26, 0x56	; 86
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e6 e5       	ldi	r30, 0x56	; 86
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	8c 93       	st	X, r24

	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    11aa:	e6 e5       	ldi	r30, 0x56	; 86
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	88 23       	and	r24, r24
    11b2:	dc f7       	brge	.-10     	; 0x11aa <MTWI_voidStart+0x32>


}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <MTWI_voidWrite>:

void MTWI_voidWrite(u8 Copy_u8Data)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
	/* Set Data | Address to TWDR */
	TWDR = Copy_u8Data;
    11c6:	e3 e2       	ldi	r30, 0x23	; 35
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	80 83       	st	Z, r24

	/* CLR start condition */
	CLR_BIT(TWCR , TWCR_TWSTA);
    11ce:	a6 e5       	ldi	r26, 0x56	; 86
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e6 e5       	ldi	r30, 0x56	; 86
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7d       	andi	r24, 0xDF	; 223
    11da:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    11dc:	a6 e5       	ldi	r26, 0x56	; 86
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e6 e5       	ldi	r30, 0x56	; 86
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    11ea:	a6 e5       	ldi	r26, 0x56	; 86
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e6 e5       	ldi	r30, 0x56	; 86
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	84 60       	ori	r24, 0x04	; 4
    11f6:	8c 93       	st	X, r24

	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    11f8:	e6 e5       	ldi	r30, 0x56	; 86
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 23       	and	r24, r24
    1200:	dc f7       	brge	.-10     	; 0x11f8 <MTWI_voidWrite+0x3e>

}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <MTWI_u8ReadWithACK>:

u8 MTWI_u8ReadWithACK(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	/* CLR start condition */
	CLR_BIT(TWCR , TWCR_TWSTA);
    1212:	a6 e5       	ldi	r26, 0x56	; 86
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e6 e5       	ldi	r30, 0x56	; 86
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8f 7d       	andi	r24, 0xDF	; 223
    121e:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    1220:	a6 e5       	ldi	r26, 0x56	; 86
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e6 e5       	ldi	r30, 0x56	; 86
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 68       	ori	r24, 0x80	; 128
    122c:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    122e:	a6 e5       	ldi	r26, 0x56	; 86
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e6 e5       	ldi	r30, 0x56	; 86
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	84 60       	ori	r24, 0x04	; 4
    123a:	8c 93       	st	X, r24



	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    123c:	e6 e5       	ldi	r30, 0x56	; 86
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	88 23       	and	r24, r24
    1244:	dc f7       	brge	.-10     	; 0x123c <MTWI_u8ReadWithACK+0x32>

	return TWDR;
    1246:	e3 e2       	ldi	r30, 0x23	; 35
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <MTWI_voidStop>:

void MTWI_voidStop(void)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	/* Set TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    125a:	a6 e5       	ldi	r26, 0x56	; 86
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e6 e5       	ldi	r30, 0x56	; 86
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 61       	ori	r24, 0x10	; 16
    1266:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    1268:	a6 e5       	ldi	r26, 0x56	; 86
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e6 e5       	ldi	r30, 0x56	; 86
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 68       	ori	r24, 0x80	; 128
    1274:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    1276:	a6 e5       	ldi	r26, 0x56	; 86
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e6 e5       	ldi	r30, 0x56	; 86
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8c 93       	st	X, r24

}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <MTWI_u8GetStatus>:

u8 MTWI_u8GetStatus(void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8);
    1292:	e1 e2       	ldi	r30, 0x21	; 33
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	88 7f       	andi	r24, 0xF8	; 248
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <MSPI_voidInit>:
#include "MSPI_private.h"
#include "MSPI_config.h"
#include "MSPI_interface.h"

void MSPI_voidInit(void)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
	/*Select data order as LSB send first*/
	//SET_BIT(SPCR, SPCR_DORD);

	/*Select Mode MASTER/SLAVE */
#if MSTR_SLAVE == MASTER
	SET_BIT(SPCR, SPCR_MSTR);
    12a8:	ad e2       	ldi	r26, 0x2D	; 45
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ed e2       	ldi	r30, 0x2D	; 45
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	80 61       	ori	r24, 0x10	; 16
    12b4:	8c 93       	st	X, r24
	/*Select Master clock DIV by 16*/
	SET_BIT(SPCR, SPCR_SPR0);
    12b6:	ad e2       	ldi	r26, 0x2D	; 45
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ed e2       	ldi	r30, 0x2D	; 45
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    12c4:	ad e2       	ldi	r26, 0x2D	; 45
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	ed e2       	ldi	r30, 0x2D	; 45
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8d 7f       	andi	r24, 0xFD	; 253
    12d0:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    12d2:	ae e2       	ldi	r26, 0x2E	; 46
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ee e2       	ldi	r30, 0x2E	; 46
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8e 7f       	andi	r24, 0xFE	; 254
    12de:	8c 93       	st	X, r24

	/*Select clock polarity as Leading edge is Setup*/
	//SET_BIT(SPCR, SPCR_CPHA);

	/*Enable SPI peripheral*/
	SET_BIT(SPCR, SPCR_SPE);
    12e0:	ad e2       	ldi	r26, 0x2D	; 45
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ed e2       	ldi	r30, 0x2D	; 45
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 64       	ori	r24, 0x40	; 64
    12ec:	8c 93       	st	X, r24
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <SPI_voidInitMaster>:

void SPI_voidInitMaster(void)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	/*Master Initialization*/
	SET_BIT(SPCR, SPCR_MSTR);
    12fc:	ad e2       	ldi	r26, 0x2D	; 45
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	ed e2       	ldi	r30, 0x2D	; 45
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 61       	ori	r24, 0x10	; 16
    1308:	8c 93       	st	X, r24

	/*Select Master clock prescaler DIV by 16*/
	SET_BIT(SPCR, SPCR_SPR0);
    130a:	ad e2       	ldi	r26, 0x2D	; 45
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ed e2       	ldi	r30, 0x2D	; 45
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	81 60       	ori	r24, 0x01	; 1
    1316:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    1318:	ad e2       	ldi	r26, 0x2D	; 45
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ed e2       	ldi	r30, 0x2D	; 45
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8d 7f       	andi	r24, 0xFD	; 253
    1324:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    1326:	ae e2       	ldi	r26, 0x2E	; 46
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	ee e2       	ldi	r30, 0x2E	; 46
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8e 7f       	andi	r24, 0xFE	; 254
    1332:	8c 93       	st	X, r24

	/*Enable SPI peripheral*/
	SET_BIT(SPCR, SPCR_SPE);
    1334:	ad e2       	ldi	r26, 0x2D	; 45
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	ed e2       	ldi	r30, 0x2D	; 45
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	80 64       	ori	r24, 0x40	; 64
    1340:	8c 93       	st	X, r24
}
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <SPI_voidInitSlave>:

void SPI_voidInitSlave(void)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
	/*SLAVE Initialization*/
	CLR_BIT(SPCR, SPCR_MSTR);
    1350:	ad e2       	ldi	r26, 0x2D	; 45
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ed e2       	ldi	r30, 0x2D	; 45
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7e       	andi	r24, 0xEF	; 239
    135c:	8c 93       	st	X, r24

	/*Enable SPI peripheral*/
	SET_BIT(SPCR, SPCR_SPE);
    135e:	ad e2       	ldi	r26, 0x2D	; 45
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ed e2       	ldi	r30, 0x2D	; 45
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 64       	ori	r24, 0x40	; 64
    136a:	8c 93       	st	X, r24
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <SPI_u8Transceiver>:

u8 SPI_u8Transceiver(u8 Copy_u8Data)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	0f 92       	push	r0
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
	/*Send the data*/
	SPDR = Copy_u8Data;
    137e:	ef e2       	ldi	r30, 0x2F	; 47
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	80 83       	st	Z, r24

	/*Wait for the transmission is complete*/
	while((GET_BIT(SPSR, SPSR_SPIF)) == 0);
    1386:	ee e2       	ldi	r30, 0x2E	; 46
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 23       	and	r24, r24
    138e:	dc f7       	brge	.-10     	; 0x1386 <SPI_u8Transceiver+0x14>
	/*the while is broken when the flag is set*/

	return SPDR;
    1390:	ef e2       	ldi	r30, 0x2F	; 47
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
}
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <MGIE_voidEnable>:
#include "../../BIT_MATH.h"
#include "M_GLOABAL_INTERRUPT_register.h"
#include "M_GLOBAL_INTERRUPT_interface.h"

void MGIE_voidEnable()
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    13a6:	af e5       	ldi	r26, 0x5F	; 95
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ef e5       	ldi	r30, 0x5F	; 95
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 68       	ori	r24, 0x80	; 128
    13b2:	8c 93       	st	X, r24
}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <MGIE_voidDisable>:

void MGIE_voidDisable()
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    13c2:	af e5       	ldi	r26, 0x5F	; 95
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ef e5       	ldi	r30, 0x5F	; 95
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 77       	andi	r24, 0x7F	; 127
    13ce:	8c 93       	st	X, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <MDIO_SetPinValue>:
		}
	}
}*/

Error_State_t MDIO_SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	28 97       	sbiw	r28, 0x08	; 8
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	6b 83       	std	Y+3, r22	; 0x03
    13ee:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    13f0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	88 30       	cpi	r24, 0x08	; 8
    13f6:	18 f0       	brcs	.+6      	; 0x13fe <MDIO_SetPinValue+0x28>
	{
		Error_state = Return_NOk;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	f2 c0       	rjmp	.+484    	; 0x15e2 <MDIO_SetPinValue+0x20c>
	}
	else
	{
		if(Copy_u8Value == DIO_LOW)
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	88 23       	and	r24, r24
    1402:	09 f0       	breq	.+2      	; 0x1406 <MDIO_SetPinValue+0x30>
    1404:	78 c0       	rjmp	.+240    	; 0x14f6 <MDIO_SetPinValue+0x120>
		{
			switch(Copy_u8Port)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	38 87       	std	Y+8, r19	; 0x08
    140e:	2f 83       	std	Y+7, r18	; 0x07
    1410:	8f 81       	ldd	r24, Y+7	; 0x07
    1412:	98 85       	ldd	r25, Y+8	; 0x08
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	91 05       	cpc	r25, r1
    1418:	61 f1       	breq	.+88     	; 0x1472 <MDIO_SetPinValue+0x9c>
    141a:	2f 81       	ldd	r18, Y+7	; 0x07
    141c:	38 85       	ldd	r19, Y+8	; 0x08
    141e:	23 30       	cpi	r18, 0x03	; 3
    1420:	31 05       	cpc	r19, r1
    1422:	34 f4       	brge	.+12     	; 0x1430 <MDIO_SetPinValue+0x5a>
    1424:	8f 81       	ldd	r24, Y+7	; 0x07
    1426:	98 85       	ldd	r25, Y+8	; 0x08
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	69 f0       	breq	.+26     	; 0x1448 <MDIO_SetPinValue+0x72>
    142e:	60 c0       	rjmp	.+192    	; 0x14f0 <MDIO_SetPinValue+0x11a>
    1430:	2f 81       	ldd	r18, Y+7	; 0x07
    1432:	38 85       	ldd	r19, Y+8	; 0x08
    1434:	23 30       	cpi	r18, 0x03	; 3
    1436:	31 05       	cpc	r19, r1
    1438:	89 f1       	breq	.+98     	; 0x149c <MDIO_SetPinValue+0xc6>
    143a:	8f 81       	ldd	r24, Y+7	; 0x07
    143c:	98 85       	ldd	r25, Y+8	; 0x08
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <MDIO_SetPinValue+0x70>
    1444:	40 c0       	rjmp	.+128    	; 0x14c6 <MDIO_SetPinValue+0xf0>
    1446:	54 c0       	rjmp	.+168    	; 0x14f0 <MDIO_SetPinValue+0x11a>
			{
			case DIO_PORTA:	CLR_BIT(PORTA, Copy_u8Pin);	break;
    1448:	ab e3       	ldi	r26, 0x3B	; 59
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	eb e3       	ldi	r30, 0x3B	; 59
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <MDIO_SetPinValue+0x90>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <MDIO_SetPinValue+0x8c>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	b8 c0       	rjmp	.+368    	; 0x15e2 <MDIO_SetPinValue+0x20c>
			case DIO_PORTB:	CLR_BIT(PORTB, Copy_u8Pin);	break;
    1472:	a8 e3       	ldi	r26, 0x38	; 56
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e8 e3       	ldi	r30, 0x38	; 56
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <MDIO_SetPinValue+0xba>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <MDIO_SetPinValue+0xb6>
    1494:	80 95       	com	r24
    1496:	84 23       	and	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	a3 c0       	rjmp	.+326    	; 0x15e2 <MDIO_SetPinValue+0x20c>
			case DIO_PORTC:	CLR_BIT(PORTC, Copy_u8Pin);	break;
    149c:	a5 e3       	ldi	r26, 0x35	; 53
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e3       	ldi	r30, 0x35	; 53
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <MDIO_SetPinValue+0xe4>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <MDIO_SetPinValue+0xe0>
    14be:	80 95       	com	r24
    14c0:	84 23       	and	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	8e c0       	rjmp	.+284    	; 0x15e2 <MDIO_SetPinValue+0x20c>
			case DIO_PORTD:	CLR_BIT(PORTD, Copy_u8Pin);	break;
    14c6:	a2 e3       	ldi	r26, 0x32	; 50
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e2 e3       	ldi	r30, 0x32	; 50
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <MDIO_SetPinValue+0x10e>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <MDIO_SetPinValue+0x10a>
    14e8:	80 95       	com	r24
    14ea:	84 23       	and	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	79 c0       	rjmp	.+242    	; 0x15e2 <MDIO_SetPinValue+0x20c>
			default:	Error_state = Return_NOk;	break;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	76 c0       	rjmp	.+236    	; 0x15e2 <MDIO_SetPinValue+0x20c>
			}
		}
		else if(Copy_u8Value == DIO_HIGH)
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	09 f0       	breq	.+2      	; 0x14fe <MDIO_SetPinValue+0x128>
    14fc:	72 c0       	rjmp	.+228    	; 0x15e2 <MDIO_SetPinValue+0x20c>
		{
			switch(Copy_u8Port)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	2d 83       	std	Y+5, r18	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	82 30       	cpi	r24, 0x02	; 2
    150e:	91 05       	cpc	r25, r1
    1510:	51 f1       	breq	.+84     	; 0x1566 <MDIO_SetPinValue+0x190>
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	23 30       	cpi	r18, 0x03	; 3
    1518:	31 05       	cpc	r19, r1
    151a:	34 f4       	brge	.+12     	; 0x1528 <MDIO_SetPinValue+0x152>
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	61 f0       	breq	.+24     	; 0x153e <MDIO_SetPinValue+0x168>
    1526:	5b c0       	rjmp	.+182    	; 0x15de <MDIO_SetPinValue+0x208>
    1528:	2d 81       	ldd	r18, Y+5	; 0x05
    152a:	3e 81       	ldd	r19, Y+6	; 0x06
    152c:	23 30       	cpi	r18, 0x03	; 3
    152e:	31 05       	cpc	r19, r1
    1530:	71 f1       	breq	.+92     	; 0x158e <MDIO_SetPinValue+0x1b8>
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	91 05       	cpc	r25, r1
    153a:	e9 f1       	breq	.+122    	; 0x15b6 <MDIO_SetPinValue+0x1e0>
    153c:	50 c0       	rjmp	.+160    	; 0x15de <MDIO_SetPinValue+0x208>
			{
			case DIO_PORTA:	SET_BIT(PORTA, Copy_u8Pin);	break;
    153e:	ab e3       	ldi	r26, 0x3B	; 59
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	eb e3       	ldi	r30, 0x3B	; 59
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <MDIO_SetPinValue+0x186>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <MDIO_SetPinValue+0x182>
    1560:	84 2b       	or	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	3e c0       	rjmp	.+124    	; 0x15e2 <MDIO_SetPinValue+0x20c>
			case DIO_PORTB:	SET_BIT(PORTB, Copy_u8Pin);	break;
    1566:	a8 e3       	ldi	r26, 0x38	; 56
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e3       	ldi	r30, 0x38	; 56
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <MDIO_SetPinValue+0x1ae>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <MDIO_SetPinValue+0x1aa>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	2a c0       	rjmp	.+84     	; 0x15e2 <MDIO_SetPinValue+0x20c>
			case DIO_PORTC:	SET_BIT(PORTC, Copy_u8Pin);	break;
    158e:	a5 e3       	ldi	r26, 0x35	; 53
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e5 e3       	ldi	r30, 0x35	; 53
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <MDIO_SetPinValue+0x1d6>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <MDIO_SetPinValue+0x1d2>
    15b0:	84 2b       	or	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	16 c0       	rjmp	.+44     	; 0x15e2 <MDIO_SetPinValue+0x20c>
			case DIO_PORTD:	SET_BIT(PORTD, Copy_u8Pin);	break;
    15b6:	a2 e3       	ldi	r26, 0x32	; 50
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e2 e3       	ldi	r30, 0x32	; 50
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <MDIO_SetPinValue+0x1fe>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <MDIO_SetPinValue+0x1fa>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <MDIO_SetPinValue+0x20c>
			default:	Error_state = Return_NOk;	break;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	return Error_state;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e4:	28 96       	adiw	r28, 0x08	; 8
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <MDIO_GetPinValue>:

Error_State_t MDIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* P_u8Value)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	27 97       	sbiw	r28, 0x07	; 7
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	6b 83       	std	Y+3, r22	; 0x03
    160e:	5d 83       	std	Y+5, r21	; 0x05
    1610:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    1612:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 30       	cpi	r24, 0x08	; 8
    1618:	18 f0       	brcs	.+6      	; 0x1620 <MDIO_GetPinValue+0x2a>
	{
		Error_state = Return_NOk;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	73 c0       	rjmp	.+230    	; 0x1706 <MDIO_GetPinValue+0x110>
	}
	else
	{
		switch(Copy_u8Port)
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3f 83       	std	Y+7, r19	; 0x07
    1628:	2e 83       	std	Y+6, r18	; 0x06
    162a:	4e 81       	ldd	r20, Y+6	; 0x06
    162c:	5f 81       	ldd	r21, Y+7	; 0x07
    162e:	42 30       	cpi	r20, 0x02	; 2
    1630:	51 05       	cpc	r21, r1
    1632:	59 f1       	breq	.+86     	; 0x168a <MDIO_GetPinValue+0x94>
    1634:	8e 81       	ldd	r24, Y+6	; 0x06
    1636:	9f 81       	ldd	r25, Y+7	; 0x07
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	34 f4       	brge	.+12     	; 0x164a <MDIO_GetPinValue+0x54>
    163e:	2e 81       	ldd	r18, Y+6	; 0x06
    1640:	3f 81       	ldd	r19, Y+7	; 0x07
    1642:	21 30       	cpi	r18, 0x01	; 1
    1644:	31 05       	cpc	r19, r1
    1646:	69 f0       	breq	.+26     	; 0x1662 <MDIO_GetPinValue+0x6c>
    1648:	5c c0       	rjmp	.+184    	; 0x1702 <MDIO_GetPinValue+0x10c>
    164a:	4e 81       	ldd	r20, Y+6	; 0x06
    164c:	5f 81       	ldd	r21, Y+7	; 0x07
    164e:	43 30       	cpi	r20, 0x03	; 3
    1650:	51 05       	cpc	r21, r1
    1652:	79 f1       	breq	.+94     	; 0x16b2 <MDIO_GetPinValue+0xbc>
    1654:	8e 81       	ldd	r24, Y+6	; 0x06
    1656:	9f 81       	ldd	r25, Y+7	; 0x07
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	91 05       	cpc	r25, r1
    165c:	09 f4       	brne	.+2      	; 0x1660 <MDIO_GetPinValue+0x6a>
    165e:	3d c0       	rjmp	.+122    	; 0x16da <MDIO_GetPinValue+0xe4>
    1660:	50 c0       	rjmp	.+160    	; 0x1702 <MDIO_GetPinValue+0x10c>
		{
		case DIO_PORTA:	*P_u8Value = GET_BIT(PINA, Copy_u8Pin);	break;
    1662:	e9 e3       	ldi	r30, 0x39	; 57
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a9 01       	movw	r20, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <MDIO_GetPinValue+0x84>
    1676:	55 95       	asr	r21
    1678:	47 95       	ror	r20
    167a:	8a 95       	dec	r24
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <MDIO_GetPinValue+0x80>
    167e:	ca 01       	movw	r24, r20
    1680:	81 70       	andi	r24, 0x01	; 1
    1682:	ec 81       	ldd	r30, Y+4	; 0x04
    1684:	fd 81       	ldd	r31, Y+5	; 0x05
    1686:	80 83       	st	Z, r24
    1688:	3e c0       	rjmp	.+124    	; 0x1706 <MDIO_GetPinValue+0x110>
		case DIO_PORTB:	*P_u8Value = GET_BIT(PINB, Copy_u8Pin);	break;
    168a:	e6 e3       	ldi	r30, 0x36	; 54
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a9 01       	movw	r20, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <MDIO_GetPinValue+0xac>
    169e:	55 95       	asr	r21
    16a0:	47 95       	ror	r20
    16a2:	8a 95       	dec	r24
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <MDIO_GetPinValue+0xa8>
    16a6:	ca 01       	movw	r24, r20
    16a8:	81 70       	andi	r24, 0x01	; 1
    16aa:	ec 81       	ldd	r30, Y+4	; 0x04
    16ac:	fd 81       	ldd	r31, Y+5	; 0x05
    16ae:	80 83       	st	Z, r24
    16b0:	2a c0       	rjmp	.+84     	; 0x1706 <MDIO_GetPinValue+0x110>
		case DIO_PORTC:	*P_u8Value = GET_BIT(PINC, Copy_u8Pin);	break;
    16b2:	e3 e3       	ldi	r30, 0x33	; 51
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a9 01       	movw	r20, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <MDIO_GetPinValue+0xd4>
    16c6:	55 95       	asr	r21
    16c8:	47 95       	ror	r20
    16ca:	8a 95       	dec	r24
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <MDIO_GetPinValue+0xd0>
    16ce:	ca 01       	movw	r24, r20
    16d0:	81 70       	andi	r24, 0x01	; 1
    16d2:	ec 81       	ldd	r30, Y+4	; 0x04
    16d4:	fd 81       	ldd	r31, Y+5	; 0x05
    16d6:	80 83       	st	Z, r24
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <MDIO_GetPinValue+0x110>
		case DIO_PORTD:	*P_u8Value = GET_BIT(PIND, Copy_u8Pin);	break;
    16da:	e0 e3       	ldi	r30, 0x30	; 48
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a9 01       	movw	r20, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <MDIO_GetPinValue+0xfc>
    16ee:	55 95       	asr	r21
    16f0:	47 95       	ror	r20
    16f2:	8a 95       	dec	r24
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <MDIO_GetPinValue+0xf8>
    16f6:	ca 01       	movw	r24, r20
    16f8:	81 70       	andi	r24, 0x01	; 1
    16fa:	ec 81       	ldd	r30, Y+4	; 0x04
    16fc:	fd 81       	ldd	r31, Y+5	; 0x05
    16fe:	80 83       	st	Z, r24
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <MDIO_GetPinValue+0x110>
		default:	Error_state = Return_NOk;					break;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_state;
    1706:	89 81       	ldd	r24, Y+1	; 0x01
}
    1708:	27 96       	adiw	r28, 0x07	; 7
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <MDIO_SetPortValue>:

Error_State_t MDIO_SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <MDIO_SetPortValue+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <MDIO_SetPortValue+0x8>
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	8a 83       	std	Y+2, r24	; 0x02
    172a:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    172c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	91 05       	cpc	r25, r1
    1740:	d9 f0       	breq	.+54     	; 0x1778 <MDIO_SetPortValue+0x5e>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	31 05       	cpc	r19, r1
    174a:	34 f4       	brge	.+12     	; 0x1758 <MDIO_SetPortValue+0x3e>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	91 05       	cpc	r25, r1
    1754:	61 f0       	breq	.+24     	; 0x176e <MDIO_SetPortValue+0x54>
    1756:	1f c0       	rjmp	.+62     	; 0x1796 <MDIO_SetPortValue+0x7c>
    1758:	2c 81       	ldd	r18, Y+4	; 0x04
    175a:	3d 81       	ldd	r19, Y+5	; 0x05
    175c:	23 30       	cpi	r18, 0x03	; 3
    175e:	31 05       	cpc	r19, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <MDIO_SetPortValue+0x68>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	84 30       	cpi	r24, 0x04	; 4
    1768:	91 05       	cpc	r25, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <MDIO_SetPortValue+0x72>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <MDIO_SetPortValue+0x7c>
	{
	case DIO_PORTA:	PORTA = Copy_u8Value;	break;
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	80 83       	st	Z, r24
    1776:	11 c0       	rjmp	.+34     	; 0x179a <MDIO_SetPortValue+0x80>
	case DIO_PORTB:	PORTB = Copy_u8Value;	break;
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	80 83       	st	Z, r24
    1780:	0c c0       	rjmp	.+24     	; 0x179a <MDIO_SetPortValue+0x80>
	case DIO_PORTC:	PORTC = Copy_u8Value;	break;
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	80 83       	st	Z, r24
    178a:	07 c0       	rjmp	.+14     	; 0x179a <MDIO_SetPortValue+0x80>
	case DIO_PORTD:	PORTD = Copy_u8Value;	break;
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	80 83       	st	Z, r24
    1794:	02 c0       	rjmp	.+4      	; 0x179a <MDIO_SetPortValue+0x80>
	default:	Error_state = Return_NOk;	break;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    179a:	89 81       	ldd	r24, Y+1	; 0x01
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <MDIO_GetPortValue>:

Error_State_t MDIO_GetPortValue(u8 Copy_u8Port, u8* P_u8Value)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <MDIO_GetPortValue+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <MDIO_GetPortValue+0x8>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <MDIO_GetPortValue+0xa>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	7c 83       	std	Y+4, r23	; 0x04
    17be:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    17c0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3e 83       	std	Y+6, r19	; 0x06
    17ca:	2d 83       	std	Y+5, r18	; 0x05
    17cc:	4d 81       	ldd	r20, Y+5	; 0x05
    17ce:	5e 81       	ldd	r21, Y+6	; 0x06
    17d0:	42 30       	cpi	r20, 0x02	; 2
    17d2:	51 05       	cpc	r21, r1
    17d4:	59 f1       	breq	.+86     	; 0x182c <MDIO_GetPortValue+0x80>
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	34 f4       	brge	.+12     	; 0x17ec <MDIO_GetPortValue+0x40>
    17e0:	2d 81       	ldd	r18, Y+5	; 0x05
    17e2:	3e 81       	ldd	r19, Y+6	; 0x06
    17e4:	21 30       	cpi	r18, 0x01	; 1
    17e6:	31 05       	cpc	r19, r1
    17e8:	69 f0       	breq	.+26     	; 0x1804 <MDIO_GetPortValue+0x58>
    17ea:	5c c0       	rjmp	.+184    	; 0x18a4 <MDIO_GetPortValue+0xf8>
    17ec:	4d 81       	ldd	r20, Y+5	; 0x05
    17ee:	5e 81       	ldd	r21, Y+6	; 0x06
    17f0:	43 30       	cpi	r20, 0x03	; 3
    17f2:	51 05       	cpc	r21, r1
    17f4:	79 f1       	breq	.+94     	; 0x1854 <MDIO_GetPortValue+0xa8>
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	84 30       	cpi	r24, 0x04	; 4
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <MDIO_GetPortValue+0x56>
    1800:	3d c0       	rjmp	.+122    	; 0x187c <MDIO_GetPortValue+0xd0>
    1802:	50 c0       	rjmp	.+160    	; 0x18a4 <MDIO_GetPortValue+0xf8>
	{
	case DIO_PORTA:	*P_u8Value = GET_BIT(PORTA, Copy_u8Port);	break;
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a9 01       	movw	r20, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <MDIO_GetPortValue+0x70>
    1818:	55 95       	asr	r21
    181a:	47 95       	ror	r20
    181c:	8a 95       	dec	r24
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <MDIO_GetPortValue+0x6c>
    1820:	ca 01       	movw	r24, r20
    1822:	81 70       	andi	r24, 0x01	; 1
    1824:	eb 81       	ldd	r30, Y+3	; 0x03
    1826:	fc 81       	ldd	r31, Y+4	; 0x04
    1828:	80 83       	st	Z, r24
    182a:	3e c0       	rjmp	.+124    	; 0x18a8 <MDIO_GetPortValue+0xfc>
	case DIO_PORTB:	*P_u8Value = GET_BIT(PORTB, Copy_u8Port);	break;
    182c:	e8 e3       	ldi	r30, 0x38	; 56
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <MDIO_GetPortValue+0x98>
    1840:	55 95       	asr	r21
    1842:	47 95       	ror	r20
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <MDIO_GetPortValue+0x94>
    1848:	ca 01       	movw	r24, r20
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	eb 81       	ldd	r30, Y+3	; 0x03
    184e:	fc 81       	ldd	r31, Y+4	; 0x04
    1850:	80 83       	st	Z, r24
    1852:	2a c0       	rjmp	.+84     	; 0x18a8 <MDIO_GetPortValue+0xfc>
	case DIO_PORTC:	*P_u8Value = GET_BIT(PORTC, Copy_u8Port);	break;
    1854:	e5 e3       	ldi	r30, 0x35	; 53
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a9 01       	movw	r20, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <MDIO_GetPortValue+0xc0>
    1868:	55 95       	asr	r21
    186a:	47 95       	ror	r20
    186c:	8a 95       	dec	r24
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <MDIO_GetPortValue+0xbc>
    1870:	ca 01       	movw	r24, r20
    1872:	81 70       	andi	r24, 0x01	; 1
    1874:	eb 81       	ldd	r30, Y+3	; 0x03
    1876:	fc 81       	ldd	r31, Y+4	; 0x04
    1878:	80 83       	st	Z, r24
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <MDIO_GetPortValue+0xfc>
	case DIO_PORTD:	*P_u8Value = GET_BIT(PORTD, Copy_u8Port);	break;
    187c:	e2 e3       	ldi	r30, 0x32	; 50
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a9 01       	movw	r20, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <MDIO_GetPortValue+0xe8>
    1890:	55 95       	asr	r21
    1892:	47 95       	ror	r20
    1894:	8a 95       	dec	r24
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <MDIO_GetPortValue+0xe4>
    1898:	ca 01       	movw	r24, r20
    189a:	81 70       	andi	r24, 0x01	; 1
    189c:	eb 81       	ldd	r30, Y+3	; 0x03
    189e:	fc 81       	ldd	r31, Y+4	; 0x04
    18a0:	80 83       	st	Z, r24
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <MDIO_GetPortValue+0xfc>
	default:	Error_state = Return_NOk;						break;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18aa:	26 96       	adiw	r28, 0x06	; 6
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <MDIO_TogglePin>:

Error_State_t MDIO_TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <MDIO_TogglePin+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <MDIO_TogglePin+0x8>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    18ce:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	88 30       	cpi	r24, 0x08	; 8
    18d4:	18 f0       	brcs	.+6      	; 0x18dc <MDIO_TogglePin+0x20>
	{
		Error_state = Return_NOk;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	72 c0       	rjmp	.+228    	; 0x19c0 <MDIO_TogglePin+0x104>
	}
	else
	{
		switch(Copy_u8Port)
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3d 83       	std	Y+5, r19	; 0x05
    18e4:	2c 83       	std	Y+4, r18	; 0x04
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	91 05       	cpc	r25, r1
    18ee:	51 f1       	breq	.+84     	; 0x1944 <MDIO_TogglePin+0x88>
    18f0:	2c 81       	ldd	r18, Y+4	; 0x04
    18f2:	3d 81       	ldd	r19, Y+5	; 0x05
    18f4:	23 30       	cpi	r18, 0x03	; 3
    18f6:	31 05       	cpc	r19, r1
    18f8:	34 f4       	brge	.+12     	; 0x1906 <MDIO_TogglePin+0x4a>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	61 f0       	breq	.+24     	; 0x191c <MDIO_TogglePin+0x60>
    1904:	5b c0       	rjmp	.+182    	; 0x19bc <MDIO_TogglePin+0x100>
    1906:	2c 81       	ldd	r18, Y+4	; 0x04
    1908:	3d 81       	ldd	r19, Y+5	; 0x05
    190a:	23 30       	cpi	r18, 0x03	; 3
    190c:	31 05       	cpc	r19, r1
    190e:	71 f1       	breq	.+92     	; 0x196c <MDIO_TogglePin+0xb0>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	91 05       	cpc	r25, r1
    1918:	e9 f1       	breq	.+122    	; 0x1994 <MDIO_TogglePin+0xd8>
    191a:	50 c0       	rjmp	.+160    	; 0x19bc <MDIO_TogglePin+0x100>
		{
		case DIO_PORTA:	TOGGLE_BIT(PORTA, Copy_u8Pin);	break;
    191c:	ab e3       	ldi	r26, 0x3B	; 59
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	eb e3       	ldi	r30, 0x3B	; 59
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <MDIO_TogglePin+0x7e>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <MDIO_TogglePin+0x7a>
    193e:	84 27       	eor	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	3e c0       	rjmp	.+124    	; 0x19c0 <MDIO_TogglePin+0x104>
		case DIO_PORTB:	TOGGLE_BIT(PORTB, Copy_u8Pin);	break;
    1944:	a8 e3       	ldi	r26, 0x38	; 56
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e8 e3       	ldi	r30, 0x38	; 56
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <MDIO_TogglePin+0xa6>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <MDIO_TogglePin+0xa2>
    1966:	84 27       	eor	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	2a c0       	rjmp	.+84     	; 0x19c0 <MDIO_TogglePin+0x104>
		case DIO_PORTC:	TOGGLE_BIT(PORTC, Copy_u8Pin);	break;
    196c:	a5 e3       	ldi	r26, 0x35	; 53
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e3       	ldi	r30, 0x35	; 53
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <MDIO_TogglePin+0xce>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <MDIO_TogglePin+0xca>
    198e:	84 27       	eor	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	16 c0       	rjmp	.+44     	; 0x19c0 <MDIO_TogglePin+0x104>
		case DIO_PORTD:	TOGGLE_BIT(PORTD, Copy_u8Pin);	break;
    1994:	a2 e3       	ldi	r26, 0x32	; 50
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e2 e3       	ldi	r30, 0x32	; 50
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <MDIO_TogglePin+0xf6>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <MDIO_TogglePin+0xf2>
    19b6:	84 27       	eor	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <MDIO_TogglePin+0x104>
		default:	Error_state = Return_NOk;			break;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_state;
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <Port_VoidInit>:


void Port_VoidInit(void)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    19da:	ea e3       	ldi	r30, 0x3A	; 58
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8c ef       	ldi	r24, 0xFC	; 252
    19e0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    19e2:	e7 e3       	ldi	r30, 0x37	; 55
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	8f ea       	ldi	r24, 0xAF	; 175
    19e8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    19ea:	e4 e3       	ldi	r30, 0x34	; 52
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	8c ef       	ldi	r24, 0xFC	; 252
    19f0:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    19f2:	e1 e3       	ldi	r30, 0x31	; 49
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	82 ec       	ldi	r24, 0xC2	; 194
    19f8:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    19fa:	eb e3       	ldi	r30, 0x3B	; 59
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 ef       	ldi	r24, 0xF0	; 240
    1a00:	80 83       	st	Z, r24
	PORTB = PORTB_INIT_VAL;
    1a02:	e8 e3       	ldi	r30, 0x38	; 56
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	8a e1       	ldi	r24, 0x1A	; 26
    1a08:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    1a0a:	e5 e3       	ldi	r30, 0x35	; 53
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VAL;
    1a12:	e2 e3       	ldi	r30, 0x32	; 50
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8e ef       	ldi	r24, 0xFE	; 254
    1a18:	80 83       	st	Z, r24
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <MADC_voidInit>:
#include "M_ADC_interface.h"
#include "M_ADC_config.h"
#include "M_ADC_register.h"

void MADC_voidInit(void)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX, ADMUX_REFS0);
	CLR_BIT(ADMUX, ADMUX_REFS1);


#elif ADC_REFERENCE == AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    1a28:	a7 e2       	ldi	r26, 0x27	; 39
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e7 e2       	ldi	r30, 0x27	; 39
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 64       	ori	r24, 0x40	; 64
    1a34:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    1a36:	a7 e2       	ldi	r26, 0x27	; 39
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e7 e2       	ldi	r30, 0x27	; 39
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	8f 77       	andi	r24, 0x7F	; 127
    1a42:	8c 93       	st	X, r24
#warning "Invalid ADC Reference Selection "

#endif

	/*Select Right Adjust, the data size is 10 bits*/
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    1a44:	a7 e2       	ldi	r26, 0x27	; 39
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e7 e2       	ldi	r30, 0x27	; 39
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	8f 7d       	andi	r24, 0xDF	; 223
    1a50:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS0);
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
	SET_BIT(ADCSRA, ADCSRA_ADPS2);

#elif PRESCALER == DIV_32
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    1a52:	a6 e2       	ldi	r26, 0x26	; 38
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e6 e2       	ldi	r30, 0x26	; 38
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	81 60       	ori	r24, 0x01	; 1
    1a5e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
    1a60:	a6 e2       	ldi	r26, 0x26	; 38
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e2       	ldi	r30, 0x26	; 38
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8d 7f       	andi	r24, 0xFD	; 253
    1a6c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    1a6e:	a6 e2       	ldi	r26, 0x26	; 38
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e6 e2       	ldi	r30, 0x26	; 38
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	84 60       	ori	r24, 0x04	; 4
    1a7a:	8c 93       	st	X, r24
#warning "Invalid ADC Prescaler Selection "

#endif

	/*Enable ADC*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    1a7c:	a6 e2       	ldi	r26, 0x26	; 38
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e6 e2       	ldi	r30, 0x26	; 38
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 68       	ori	r24, 0x80	; 128
    1a88:	8c 93       	st	X, r24
}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <MADC_u16GetValue>:

u16 MADC_u16GetValue(u8 copy_u8Channel)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	89 83       	std	Y+1, r24	; 0x01
	/*clear the first 5 bits to choose the ADC channel*/
	ADMUX &= 0b11100000;
    1a9c:	a7 e2       	ldi	r26, 0x27	; 39
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e2       	ldi	r30, 0x27	; 39
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	80 7e       	andi	r24, 0xE0	; 224
    1aa8:	8c 93       	st	X, r24

	/*select the ADC channel*/
	ADMUX |= copy_u8Channel;
    1aaa:	a7 e2       	ldi	r26, 0x27	; 39
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e7 e2       	ldi	r30, 0x27	; 39
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	90 81       	ld	r25, Z
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	89 2b       	or	r24, r25
    1ab8:	8c 93       	st	X, r24

	/*ADC start conversion*/
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    1aba:	a6 e2       	ldi	r26, 0x26	; 38
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e6 e2       	ldi	r30, 0x26	; 38
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 64       	ori	r24, 0x40	; 64
    1ac6:	8c 93       	st	X, r24

	/*Busy wait until ADC complete conversion flag is set and counter reaching timeout*/
	while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    1ac8:	e6 e2       	ldi	r30, 0x26	; 38
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	82 95       	swap	r24
    1ad0:	8f 70       	andi	r24, 0x0F	; 15
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	81 70       	andi	r24, 0x01	; 1
    1ad8:	90 70       	andi	r25, 0x00	; 0
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	a9 f3       	breq	.-22     	; 0x1ac8 <MADC_u16GetValue+0x38>
	/*clear the flag*/
	SET_BIT(ADCSRA, ADCSRA_ADIF);
    1ade:	a6 e2       	ldi	r26, 0x26	; 38
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e6 e2       	ldi	r30, 0x26	; 38
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 61       	ori	r24, 0x10	; 16
    1aea:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    1aec:	e4 e2       	ldi	r30, 0x24	; 36
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	91 81       	ldd	r25, Z+1	; 0x01
}
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <HLCD_voidSendCommand>:

u8 Pin_array[4] = {D4, D5, D6, D7};

#if LCD_MODE == 4
void HLCD_voidSendCommand(u8 Copy_u8Command)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	e9 97       	sbiw	r28, 0x39	; 57
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	89 af       	std	Y+57, r24	; 0x39
	/*clear RS pin to send command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RS,DIO_LOW);
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	66 e0       	ldi	r22, 0x06	; 6
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	/*clear the RW pin to write*/
	//MDIO_SetPinValue(LCD_PORT_Control,LCD_RW,DIO_LOW);
	/*send data*/
	if(GET_BIT(Copy_u8Command, 4))
    1b1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b1e:	82 95       	swap	r24
    1b20:	8f 70       	andi	r24, 0x0F	; 15
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	88 23       	and	r24, r24
    1b2c:	41 f0       	breq	.+16     	; 0x1b3e <HLCD_voidSendCommand+0x42>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_HIGH);}
    1b2e:	90 91 54 01 	lds	r25, 0x0154
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	69 2f       	mov	r22, r25
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <HLCD_voidSendCommand+0x50>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_LOW);}
    1b3e:	90 91 54 01 	lds	r25, 0x0154
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	69 2f       	mov	r22, r25
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 5))
    1b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b4e:	82 95       	swap	r24
    1b50:	86 95       	lsr	r24
    1b52:	87 70       	andi	r24, 0x07	; 7
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	88 23       	and	r24, r24
    1b5e:	41 f0       	breq	.+16     	; 0x1b70 <HLCD_voidSendCommand+0x74>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_HIGH);}
    1b60:	90 91 55 01 	lds	r25, 0x0155
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	69 2f       	mov	r22, r25
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1b6e:	07 c0       	rjmp	.+14     	; 0x1b7e <HLCD_voidSendCommand+0x82>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_LOW);}
    1b70:	90 91 55 01 	lds	r25, 0x0155
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	69 2f       	mov	r22, r25
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 6))
    1b7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b80:	82 95       	swap	r24
    1b82:	86 95       	lsr	r24
    1b84:	86 95       	lsr	r24
    1b86:	83 70       	andi	r24, 0x03	; 3
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	81 70       	andi	r24, 0x01	; 1
    1b8e:	90 70       	andi	r25, 0x00	; 0
    1b90:	88 23       	and	r24, r24
    1b92:	41 f0       	breq	.+16     	; 0x1ba4 <HLCD_voidSendCommand+0xa8>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_HIGH);}
    1b94:	90 91 56 01 	lds	r25, 0x0156
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	69 2f       	mov	r22, r25
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1ba2:	07 c0       	rjmp	.+14     	; 0x1bb2 <HLCD_voidSendCommand+0xb6>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_LOW);}
    1ba4:	90 91 56 01 	lds	r25, 0x0156
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	69 2f       	mov	r22, r25
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 7))
    1bb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb4:	88 23       	and	r24, r24
    1bb6:	44 f4       	brge	.+16     	; 0x1bc8 <HLCD_voidSendCommand+0xcc>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_HIGH);}
    1bb8:	90 91 57 01 	lds	r25, 0x0157
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	69 2f       	mov	r22, r25
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1bc6:	07 c0       	rjmp	.+14     	; 0x1bd6 <HLCD_voidSendCommand+0xda>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_LOW);}
    1bc8:	90 91 57 01 	lds	r25, 0x0157
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	69 2f       	mov	r22, r25
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    1bd6:	84 e0       	ldi	r24, 0x04	; 4
    1bd8:	67 e0       	ldi	r22, 0x07	; 7
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e8       	ldi	r26, 0x80	; 128
    1be6:	bf e3       	ldi	r27, 0x3F	; 63
    1be8:	8d ab       	std	Y+53, r24	; 0x35
    1bea:	9e ab       	std	Y+54, r25	; 0x36
    1bec:	af ab       	std	Y+55, r26	; 0x37
    1bee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	89 ab       	std	Y+49, r24	; 0x31
    1c0a:	9a ab       	std	Y+50, r25	; 0x32
    1c0c:	ab ab       	std	Y+51, r26	; 0x33
    1c0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c10:	69 a9       	ldd	r22, Y+49	; 0x31
    1c12:	7a a9       	ldd	r23, Y+50	; 0x32
    1c14:	8b a9       	ldd	r24, Y+51	; 0x33
    1c16:	9c a9       	ldd	r25, Y+52	; 0x34
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <HLCD_voidSendCommand+0x136>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	98 ab       	std	Y+48, r25	; 0x30
    1c2e:	8f a7       	std	Y+47, r24	; 0x2f
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <HLCD_voidSendCommand+0x1b4>
	else if (__tmp > 65535)
    1c32:	69 a9       	ldd	r22, Y+49	; 0x31
    1c34:	7a a9       	ldd	r23, Y+50	; 0x32
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <HLCD_voidSendCommand+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c50:	98 ad       	ldd	r25, Y+56	; 0x38
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	98 ab       	std	Y+48, r25	; 0x30
    1c70:	8f a7       	std	Y+47, r24	; 0x2f
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <HLCD_voidSendCommand+0x196>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9e a7       	std	Y+46, r25	; 0x2e
    1c7a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <HLCD_voidSendCommand+0x184>
    1c84:	9e a7       	std	Y+46, r25	; 0x2e
    1c86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	98 ab       	std	Y+48, r25	; 0x30
    1c90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c94:	98 a9       	ldd	r25, Y+48	; 0x30
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <HLCD_voidSendCommand+0x178>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <HLCD_voidSendCommand+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca4:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
    1cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb4:	9c a7       	std	Y+44, r25	; 0x2c
    1cb6:	8b a7       	std	Y+43, r24	; 0x2b
    1cb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <HLCD_voidSendCommand+0x1c0>
    1cc0:	9c a7       	std	Y+44, r25	; 0x2c
    1cc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    1cc4:	84 e0       	ldi	r24, 0x04	; 4
    1cc6:	67 e0       	ldi	r22, 0x07	; 7
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e0       	ldi	r26, 0x00	; 0
    1cd4:	b0 e4       	ldi	r27, 0x40	; 64
    1cd6:	8f a3       	std	Y+39, r24	; 0x27
    1cd8:	98 a7       	std	Y+40, r25	; 0x28
    1cda:	a9 a7       	std	Y+41, r26	; 0x29
    1cdc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a ef       	ldi	r20, 0xFA	; 250
    1cec:	54 e4       	ldi	r21, 0x44	; 68
    1cee:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	8b a3       	std	Y+35, r24	; 0x23
    1cf8:	9c a3       	std	Y+36, r25	; 0x24
    1cfa:	ad a3       	std	Y+37, r26	; 0x25
    1cfc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1d00:	7c a1       	ldd	r23, Y+36	; 0x24
    1d02:	8d a1       	ldd	r24, Y+37	; 0x25
    1d04:	9e a1       	ldd	r25, Y+38	; 0x26
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f e3       	ldi	r21, 0x3F	; 63
    1d0e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <HLCD_voidSendCommand+0x224>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9a a3       	std	Y+34, r25	; 0x22
    1d1c:	89 a3       	std	Y+33, r24	; 0x21
    1d1e:	3f c0       	rjmp	.+126    	; 0x1d9e <HLCD_voidSendCommand+0x2a2>
	else if (__tmp > 65535)
    1d20:	6b a1       	ldd	r22, Y+35	; 0x23
    1d22:	7c a1       	ldd	r23, Y+36	; 0x24
    1d24:	8d a1       	ldd	r24, Y+37	; 0x25
    1d26:	9e a1       	ldd	r25, Y+38	; 0x26
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	4c f5       	brge	.+82     	; 0x1d8a <HLCD_voidSendCommand+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	6f a1       	ldd	r22, Y+39	; 0x27
    1d3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9a a3       	std	Y+34, r25	; 0x22
    1d5e:	89 a3       	std	Y+33, r24	; 0x21
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <HLCD_voidSendCommand+0x284>
    1d62:	88 ec       	ldi	r24, 0xC8	; 200
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	98 a3       	std	Y+32, r25	; 0x20
    1d68:	8f 8f       	std	Y+31, r24	; 0x1f
    1d6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <HLCD_voidSendCommand+0x272>
    1d72:	98 a3       	std	Y+32, r25	; 0x20
    1d74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	89 a1       	ldd	r24, Y+33	; 0x21
    1d78:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9a a3       	std	Y+34, r25	; 0x22
    1d7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	89 a1       	ldd	r24, Y+33	; 0x21
    1d82:	9a a1       	ldd	r25, Y+34	; 0x22
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <HLCD_voidSendCommand+0x266>
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <HLCD_voidSendCommand+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d90:	9e a1       	ldd	r25, Y+38	; 0x26
    1d92:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9a a3       	std	Y+34, r25	; 0x22
    1d9c:	89 a3       	std	Y+33, r24	; 0x21
    1d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1da0:	9a a1       	ldd	r25, Y+34	; 0x22
    1da2:	9e 8f       	std	Y+30, r25	; 0x1e
    1da4:	8d 8f       	std	Y+29, r24	; 0x1d
    1da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <HLCD_voidSendCommand+0x2ae>
    1dae:	9e 8f       	std	Y+30, r25	; 0x1e
    1db0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	if(GET_BIT(Copy_u8Command, 0))
    1db2:	89 ad       	ldd	r24, Y+57	; 0x39
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	81 70       	andi	r24, 0x01	; 1
    1dba:	90 70       	andi	r25, 0x00	; 0
    1dbc:	88 23       	and	r24, r24
    1dbe:	41 f0       	breq	.+16     	; 0x1dd0 <HLCD_voidSendCommand+0x2d4>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_HIGH);}
    1dc0:	90 91 54 01 	lds	r25, 0x0154
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	69 2f       	mov	r22, r25
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <HLCD_voidSendCommand+0x2e2>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_LOW);}
    1dd0:	90 91 54 01 	lds	r25, 0x0154
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	69 2f       	mov	r22, r25
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 1))
    1dde:	89 ad       	ldd	r24, Y+57	; 0x39
    1de0:	86 95       	lsr	r24
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	81 70       	andi	r24, 0x01	; 1
    1de8:	90 70       	andi	r25, 0x00	; 0
    1dea:	88 23       	and	r24, r24
    1dec:	41 f0       	breq	.+16     	; 0x1dfe <HLCD_voidSendCommand+0x302>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_HIGH);}
    1dee:	90 91 55 01 	lds	r25, 0x0155
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	69 2f       	mov	r22, r25
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <HLCD_voidSendCommand+0x310>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_LOW);}
    1dfe:	90 91 55 01 	lds	r25, 0x0155
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	69 2f       	mov	r22, r25
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 2))
    1e0c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e0e:	86 95       	lsr	r24
    1e10:	86 95       	lsr	r24
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	81 70       	andi	r24, 0x01	; 1
    1e18:	90 70       	andi	r25, 0x00	; 0
    1e1a:	88 23       	and	r24, r24
    1e1c:	41 f0       	breq	.+16     	; 0x1e2e <HLCD_voidSendCommand+0x332>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_HIGH);}
    1e1e:	90 91 56 01 	lds	r25, 0x0156
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	69 2f       	mov	r22, r25
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1e2c:	07 c0       	rjmp	.+14     	; 0x1e3c <HLCD_voidSendCommand+0x340>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_LOW);}
    1e2e:	90 91 56 01 	lds	r25, 0x0156
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	69 2f       	mov	r22, r25
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 3))
    1e3c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e3e:	86 95       	lsr	r24
    1e40:	86 95       	lsr	r24
    1e42:	86 95       	lsr	r24
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	90 70       	andi	r25, 0x00	; 0
    1e4c:	88 23       	and	r24, r24
    1e4e:	41 f0       	breq	.+16     	; 0x1e60 <HLCD_voidSendCommand+0x364>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_HIGH);}
    1e50:	90 91 57 01 	lds	r25, 0x0157
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	69 2f       	mov	r22, r25
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1e5e:	07 c0       	rjmp	.+14     	; 0x1e6e <HLCD_voidSendCommand+0x372>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_LOW);}
    1e60:	90 91 57 01 	lds	r25, 0x0157
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	69 2f       	mov	r22, r25
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    1e6e:	84 e0       	ldi	r24, 0x04	; 4
    1e70:	67 e0       	ldi	r22, 0x07	; 7
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e8       	ldi	r26, 0x80	; 128
    1e7e:	bf e3       	ldi	r27, 0x3F	; 63
    1e80:	89 8f       	std	Y+25, r24	; 0x19
    1e82:	9a 8f       	std	Y+26, r25	; 0x1a
    1e84:	ab 8f       	std	Y+27, r26	; 0x1b
    1e86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8d 8b       	std	Y+21, r24	; 0x15
    1ea2:	9e 8b       	std	Y+22, r25	; 0x16
    1ea4:	af 8b       	std	Y+23, r26	; 0x17
    1ea6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1eac:	8f 89       	ldd	r24, Y+23	; 0x17
    1eae:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <HLCD_voidSendCommand+0x3ce>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 8b       	std	Y+20, r25	; 0x14
    1ec6:	8b 8b       	std	Y+19, r24	; 0x13
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <HLCD_voidSendCommand+0x44c>
	else if (__tmp > 65535)
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <HLCD_voidSendCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9c 8b       	std	Y+20, r25	; 0x14
    1f08:	8b 8b       	std	Y+19, r24	; 0x13
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <HLCD_voidSendCommand+0x42e>
    1f0c:	88 ec       	ldi	r24, 0xC8	; 200
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9a 8b       	std	Y+18, r25	; 0x12
    1f12:	89 8b       	std	Y+17, r24	; 0x11
    1f14:	89 89       	ldd	r24, Y+17	; 0x11
    1f16:	9a 89       	ldd	r25, Y+18	; 0x12
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <HLCD_voidSendCommand+0x41c>
    1f1c:	9a 8b       	std	Y+18, r25	; 0x12
    1f1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <HLCD_voidSendCommand+0x410>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <HLCD_voidSendCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	6d 89       	ldd	r22, Y+21	; 0x15
    1f36:	7e 89       	ldd	r23, Y+22	; 0x16
    1f38:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3c:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	98 8b       	std	Y+16, r25	; 0x10
    1f4e:	8f 87       	std	Y+15, r24	; 0x0f
    1f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f52:	98 89       	ldd	r25, Y+16	; 0x10
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <HLCD_voidSendCommand+0x458>
    1f58:	98 8b       	std	Y+16, r25	; 0x10
    1f5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    1f5c:	84 e0       	ldi	r24, 0x04	; 4
    1f5e:	67 e0       	ldi	r22, 0x07	; 7
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	b0 e4       	ldi	r27, 0x40	; 64
    1f6e:	8b 87       	std	Y+11, r24	; 0x0b
    1f70:	9c 87       	std	Y+12, r25	; 0x0c
    1f72:	ad 87       	std	Y+13, r26	; 0x0d
    1f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a ef       	ldi	r20, 0xFA	; 250
    1f84:	54 e4       	ldi	r21, 0x44	; 68
    1f86:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8f 83       	std	Y+7, r24	; 0x07
    1f90:	98 87       	std	Y+8, r25	; 0x08
    1f92:	a9 87       	std	Y+9, r26	; 0x09
    1f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <HLCD_voidSendCommand+0x4bc>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <HLCD_voidSendCommand+0x53a>
	else if (__tmp > 65535)
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <HLCD_voidSendCommand+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <HLCD_voidSendCommand+0x51c>
    1ffa:	88 ec       	ldi	r24, 0xC8	; 200
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <HLCD_voidSendCommand+0x50a>
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <HLCD_voidSendCommand+0x4fe>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <HLCD_voidSendCommand+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <HLCD_voidSendCommand+0x546>
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    204a:	e9 96       	adiw	r28, 0x39	; 57
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <HLCD_voidsendData>:

void HLCD_voidsendData(u8 Copy_u8Data)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	e9 97       	sbiw	r28, 0x39	; 57
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	89 af       	std	Y+57, r24	; 0x39
	/*set RS pin to send command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RS,DIO_HIGH);
    2072:	84 e0       	ldi	r24, 0x04	; 4
    2074:	66 e0       	ldi	r22, 0x06	; 6
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	/*clear the RW pin to write*/
	//MDIO_SetPinValue(LCD_PORT_Control,LCD_RW,DIO_LOW);
	/*send data*/
	if(GET_BIT(Copy_u8Data, 4))
    207c:	89 ad       	ldd	r24, Y+57	; 0x39
    207e:	82 95       	swap	r24
    2080:	8f 70       	andi	r24, 0x0F	; 15
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	81 70       	andi	r24, 0x01	; 1
    2088:	90 70       	andi	r25, 0x00	; 0
    208a:	88 23       	and	r24, r24
    208c:	41 f0       	breq	.+16     	; 0x209e <HLCD_voidsendData+0x42>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_HIGH);}
    208e:	90 91 54 01 	lds	r25, 0x0154
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	69 2f       	mov	r22, r25
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <HLCD_voidsendData+0x50>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_LOW);}
    209e:	90 91 54 01 	lds	r25, 0x0154
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	69 2f       	mov	r22, r25
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 5))
    20ac:	89 ad       	ldd	r24, Y+57	; 0x39
    20ae:	82 95       	swap	r24
    20b0:	86 95       	lsr	r24
    20b2:	87 70       	andi	r24, 0x07	; 7
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	81 70       	andi	r24, 0x01	; 1
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	88 23       	and	r24, r24
    20be:	41 f0       	breq	.+16     	; 0x20d0 <HLCD_voidsendData+0x74>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_HIGH);}
    20c0:	90 91 55 01 	lds	r25, 0x0155
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	69 2f       	mov	r22, r25
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    20ce:	07 c0       	rjmp	.+14     	; 0x20de <HLCD_voidsendData+0x82>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_LOW);}
    20d0:	90 91 55 01 	lds	r25, 0x0155
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	69 2f       	mov	r22, r25
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 6))
    20de:	89 ad       	ldd	r24, Y+57	; 0x39
    20e0:	82 95       	swap	r24
    20e2:	86 95       	lsr	r24
    20e4:	86 95       	lsr	r24
    20e6:	83 70       	andi	r24, 0x03	; 3
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	81 70       	andi	r24, 0x01	; 1
    20ee:	90 70       	andi	r25, 0x00	; 0
    20f0:	88 23       	and	r24, r24
    20f2:	41 f0       	breq	.+16     	; 0x2104 <HLCD_voidsendData+0xa8>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_HIGH);}
    20f4:	90 91 56 01 	lds	r25, 0x0156
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	69 2f       	mov	r22, r25
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    2102:	07 c0       	rjmp	.+14     	; 0x2112 <HLCD_voidsendData+0xb6>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_LOW);}
    2104:	90 91 56 01 	lds	r25, 0x0156
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	69 2f       	mov	r22, r25
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 7))
    2112:	89 ad       	ldd	r24, Y+57	; 0x39
    2114:	88 23       	and	r24, r24
    2116:	44 f4       	brge	.+16     	; 0x2128 <HLCD_voidsendData+0xcc>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_HIGH);}
    2118:	90 91 57 01 	lds	r25, 0x0157
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	69 2f       	mov	r22, r25
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    2126:	07 c0       	rjmp	.+14     	; 0x2136 <HLCD_voidsendData+0xda>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_LOW);}
    2128:	90 91 57 01 	lds	r25, 0x0157
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	69 2f       	mov	r22, r25
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	67 e0       	ldi	r22, 0x07	; 7
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e8       	ldi	r26, 0x80	; 128
    2146:	bf e3       	ldi	r27, 0x3F	; 63
    2148:	8d ab       	std	Y+53, r24	; 0x35
    214a:	9e ab       	std	Y+54, r25	; 0x36
    214c:	af ab       	std	Y+55, r26	; 0x37
    214e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2150:	6d a9       	ldd	r22, Y+53	; 0x35
    2152:	7e a9       	ldd	r23, Y+54	; 0x36
    2154:	8f a9       	ldd	r24, Y+55	; 0x37
    2156:	98 ad       	ldd	r25, Y+56	; 0x38
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a ef       	ldi	r20, 0xFA	; 250
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	89 ab       	std	Y+49, r24	; 0x31
    216a:	9a ab       	std	Y+50, r25	; 0x32
    216c:	ab ab       	std	Y+51, r26	; 0x33
    216e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2170:	69 a9       	ldd	r22, Y+49	; 0x31
    2172:	7a a9       	ldd	r23, Y+50	; 0x32
    2174:	8b a9       	ldd	r24, Y+51	; 0x33
    2176:	9c a9       	ldd	r25, Y+52	; 0x34
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	2c f4       	brge	.+10     	; 0x2192 <HLCD_voidsendData+0x136>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	98 ab       	std	Y+48, r25	; 0x30
    218e:	8f a7       	std	Y+47, r24	; 0x2f
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <HLCD_voidsendData+0x1b4>
	else if (__tmp > 65535)
    2192:	69 a9       	ldd	r22, Y+49	; 0x31
    2194:	7a a9       	ldd	r23, Y+50	; 0x32
    2196:	8b a9       	ldd	r24, Y+51	; 0x33
    2198:	9c a9       	ldd	r25, Y+52	; 0x34
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	4c f5       	brge	.+82     	; 0x21fc <HLCD_voidsendData+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	6d a9       	ldd	r22, Y+53	; 0x35
    21ac:	7e a9       	ldd	r23, Y+54	; 0x36
    21ae:	8f a9       	ldd	r24, Y+55	; 0x37
    21b0:	98 ad       	ldd	r25, Y+56	; 0x38
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <HLCD_voidsendData+0x196>
    21d4:	88 ec       	ldi	r24, 0xC8	; 200
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e a7       	std	Y+46, r25	; 0x2e
    21da:	8d a7       	std	Y+45, r24	; 0x2d
    21dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21de:	9e a5       	ldd	r25, Y+46	; 0x2e
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <HLCD_voidsendData+0x184>
    21e4:	9e a7       	std	Y+46, r25	; 0x2e
    21e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f4:	98 a9       	ldd	r25, Y+48	; 0x30
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	69 f7       	brne	.-38     	; 0x21d4 <HLCD_voidsendData+0x178>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <HLCD_voidsendData+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	69 a9       	ldd	r22, Y+49	; 0x31
    21fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2200:	8b a9       	ldd	r24, Y+51	; 0x33
    2202:	9c a9       	ldd	r25, Y+52	; 0x34
    2204:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	98 ab       	std	Y+48, r25	; 0x30
    220e:	8f a7       	std	Y+47, r24	; 0x2f
    2210:	8f a5       	ldd	r24, Y+47	; 0x2f
    2212:	98 a9       	ldd	r25, Y+48	; 0x30
    2214:	9c a7       	std	Y+44, r25	; 0x2c
    2216:	8b a7       	std	Y+43, r24	; 0x2b
    2218:	8b a5       	ldd	r24, Y+43	; 0x2b
    221a:	9c a5       	ldd	r25, Y+44	; 0x2c
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <HLCD_voidsendData+0x1c0>
    2220:	9c a7       	std	Y+44, r25	; 0x2c
    2222:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    2224:	84 e0       	ldi	r24, 0x04	; 4
    2226:	67 e0       	ldi	r22, 0x07	; 7
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e0       	ldi	r26, 0x00	; 0
    2234:	b0 e4       	ldi	r27, 0x40	; 64
    2236:	8f a3       	std	Y+39, r24	; 0x27
    2238:	98 a7       	std	Y+40, r25	; 0x28
    223a:	a9 a7       	std	Y+41, r26	; 0x29
    223c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223e:	6f a1       	ldd	r22, Y+39	; 0x27
    2240:	78 a5       	ldd	r23, Y+40	; 0x28
    2242:	89 a5       	ldd	r24, Y+41	; 0x29
    2244:	9a a5       	ldd	r25, Y+42	; 0x2a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	4a ef       	ldi	r20, 0xFA	; 250
    224c:	54 e4       	ldi	r21, 0x44	; 68
    224e:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8b a3       	std	Y+35, r24	; 0x23
    2258:	9c a3       	std	Y+36, r25	; 0x24
    225a:	ad a3       	std	Y+37, r26	; 0x25
    225c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    225e:	6b a1       	ldd	r22, Y+35	; 0x23
    2260:	7c a1       	ldd	r23, Y+36	; 0x24
    2262:	8d a1       	ldd	r24, Y+37	; 0x25
    2264:	9e a1       	ldd	r25, Y+38	; 0x26
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <HLCD_voidsendData+0x224>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9a a3       	std	Y+34, r25	; 0x22
    227c:	89 a3       	std	Y+33, r24	; 0x21
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <HLCD_voidsendData+0x2a2>
	else if (__tmp > 65535)
    2280:	6b a1       	ldd	r22, Y+35	; 0x23
    2282:	7c a1       	ldd	r23, Y+36	; 0x24
    2284:	8d a1       	ldd	r24, Y+37	; 0x25
    2286:	9e a1       	ldd	r25, Y+38	; 0x26
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	57 e4       	ldi	r21, 0x47	; 71
    2290:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	4c f5       	brge	.+82     	; 0x22ea <HLCD_voidsendData+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2298:	6f a1       	ldd	r22, Y+39	; 0x27
    229a:	78 a5       	ldd	r23, Y+40	; 0x28
    229c:	89 a5       	ldd	r24, Y+41	; 0x29
    229e:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <HLCD_voidsendData+0x284>
    22c2:	88 ec       	ldi	r24, 0xC8	; 200
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	98 a3       	std	Y+32, r25	; 0x20
    22c8:	8f 8f       	std	Y+31, r24	; 0x1f
    22ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22cc:	98 a1       	ldd	r25, Y+32	; 0x20
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <HLCD_voidsendData+0x272>
    22d2:	98 a3       	std	Y+32, r25	; 0x20
    22d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	89 a1       	ldd	r24, Y+33	; 0x21
    22d8:	9a a1       	ldd	r25, Y+34	; 0x22
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	9a a3       	std	Y+34, r25	; 0x22
    22de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	89 a1       	ldd	r24, Y+33	; 0x21
    22e2:	9a a1       	ldd	r25, Y+34	; 0x22
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <HLCD_voidsendData+0x266>
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <HLCD_voidsendData+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	6b a1       	ldd	r22, Y+35	; 0x23
    22ec:	7c a1       	ldd	r23, Y+36	; 0x24
    22ee:	8d a1       	ldd	r24, Y+37	; 0x25
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9a a3       	std	Y+34, r25	; 0x22
    22fc:	89 a3       	std	Y+33, r24	; 0x21
    22fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2300:	9a a1       	ldd	r25, Y+34	; 0x22
    2302:	9e 8f       	std	Y+30, r25	; 0x1e
    2304:	8d 8f       	std	Y+29, r24	; 0x1d
    2306:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2308:	9e 8d       	ldd	r25, Y+30	; 0x1e
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <HLCD_voidsendData+0x2ae>
    230e:	9e 8f       	std	Y+30, r25	; 0x1e
    2310:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	if(GET_BIT(Copy_u8Data, 0))
    2312:	89 ad       	ldd	r24, Y+57	; 0x39
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	81 70       	andi	r24, 0x01	; 1
    231a:	90 70       	andi	r25, 0x00	; 0
    231c:	88 23       	and	r24, r24
    231e:	41 f0       	breq	.+16     	; 0x2330 <HLCD_voidsendData+0x2d4>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_HIGH);}
    2320:	90 91 54 01 	lds	r25, 0x0154
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	69 2f       	mov	r22, r25
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    232e:	07 c0       	rjmp	.+14     	; 0x233e <HLCD_voidsendData+0x2e2>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[0], DIO_LOW);}
    2330:	90 91 54 01 	lds	r25, 0x0154
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	69 2f       	mov	r22, r25
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 1))
    233e:	89 ad       	ldd	r24, Y+57	; 0x39
    2340:	86 95       	lsr	r24
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	81 70       	andi	r24, 0x01	; 1
    2348:	90 70       	andi	r25, 0x00	; 0
    234a:	88 23       	and	r24, r24
    234c:	41 f0       	breq	.+16     	; 0x235e <HLCD_voidsendData+0x302>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_HIGH);}
    234e:	90 91 55 01 	lds	r25, 0x0155
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	69 2f       	mov	r22, r25
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    235c:	07 c0       	rjmp	.+14     	; 0x236c <HLCD_voidsendData+0x310>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[1], DIO_LOW);}
    235e:	90 91 55 01 	lds	r25, 0x0155
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	69 2f       	mov	r22, r25
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 2))
    236c:	89 ad       	ldd	r24, Y+57	; 0x39
    236e:	86 95       	lsr	r24
    2370:	86 95       	lsr	r24
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	81 70       	andi	r24, 0x01	; 1
    2378:	90 70       	andi	r25, 0x00	; 0
    237a:	88 23       	and	r24, r24
    237c:	41 f0       	breq	.+16     	; 0x238e <HLCD_voidsendData+0x332>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_HIGH);}
    237e:	90 91 56 01 	lds	r25, 0x0156
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	69 2f       	mov	r22, r25
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    238c:	07 c0       	rjmp	.+14     	; 0x239c <HLCD_voidsendData+0x340>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[2], DIO_LOW);}
    238e:	90 91 56 01 	lds	r25, 0x0156
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	69 2f       	mov	r22, r25
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 3))
    239c:	89 ad       	ldd	r24, Y+57	; 0x39
    239e:	86 95       	lsr	r24
    23a0:	86 95       	lsr	r24
    23a2:	86 95       	lsr	r24
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	81 70       	andi	r24, 0x01	; 1
    23aa:	90 70       	andi	r25, 0x00	; 0
    23ac:	88 23       	and	r24, r24
    23ae:	41 f0       	breq	.+16     	; 0x23c0 <HLCD_voidsendData+0x364>
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_HIGH);}
    23b0:	90 91 57 01 	lds	r25, 0x0157
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	69 2f       	mov	r22, r25
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <HLCD_voidsendData+0x372>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, Pin_array[3], DIO_LOW);}
    23c0:	90 91 57 01 	lds	r25, 0x0157
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	69 2f       	mov	r22, r25
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    23ce:	84 e0       	ldi	r24, 0x04	; 4
    23d0:	67 e0       	ldi	r22, 0x07	; 7
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a0 e8       	ldi	r26, 0x80	; 128
    23de:	bf e3       	ldi	r27, 0x3F	; 63
    23e0:	89 8f       	std	Y+25, r24	; 0x19
    23e2:	9a 8f       	std	Y+26, r25	; 0x1a
    23e4:	ab 8f       	std	Y+27, r26	; 0x1b
    23e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a ef       	ldi	r20, 0xFA	; 250
    23f6:	54 e4       	ldi	r21, 0x44	; 68
    23f8:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	8d 8b       	std	Y+21, r24	; 0x15
    2402:	9e 8b       	std	Y+22, r25	; 0x16
    2404:	af 8b       	std	Y+23, r26	; 0x17
    2406:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2408:	6d 89       	ldd	r22, Y+21	; 0x15
    240a:	7e 89       	ldd	r23, Y+22	; 0x16
    240c:	8f 89       	ldd	r24, Y+23	; 0x17
    240e:	98 8d       	ldd	r25, Y+24	; 0x18
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e8       	ldi	r20, 0x80	; 128
    2416:	5f e3       	ldi	r21, 0x3F	; 63
    2418:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    241c:	88 23       	and	r24, r24
    241e:	2c f4       	brge	.+10     	; 0x242a <HLCD_voidsendData+0x3ce>
		__ticks = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9c 8b       	std	Y+20, r25	; 0x14
    2426:	8b 8b       	std	Y+19, r24	; 0x13
    2428:	3f c0       	rjmp	.+126    	; 0x24a8 <HLCD_voidsendData+0x44c>
	else if (__tmp > 65535)
    242a:	6d 89       	ldd	r22, Y+21	; 0x15
    242c:	7e 89       	ldd	r23, Y+22	; 0x16
    242e:	8f 89       	ldd	r24, Y+23	; 0x17
    2430:	98 8d       	ldd	r25, Y+24	; 0x18
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	57 e4       	ldi	r21, 0x47	; 71
    243a:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    243e:	18 16       	cp	r1, r24
    2440:	4c f5       	brge	.+82     	; 0x2494 <HLCD_voidsendData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2442:	69 8d       	ldd	r22, Y+25	; 0x19
    2444:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	51 e4       	ldi	r21, 0x41	; 65
    2452:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	0f c0       	rjmp	.+30     	; 0x248a <HLCD_voidsendData+0x42e>
    246c:	88 ec       	ldi	r24, 0xC8	; 200
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9a 8b       	std	Y+18, r25	; 0x12
    2472:	89 8b       	std	Y+17, r24	; 0x11
    2474:	89 89       	ldd	r24, Y+17	; 0x11
    2476:	9a 89       	ldd	r25, Y+18	; 0x12
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <HLCD_voidsendData+0x41c>
    247c:	9a 8b       	std	Y+18, r25	; 0x12
    247e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248a:	8b 89       	ldd	r24, Y+19	; 0x13
    248c:	9c 89       	ldd	r25, Y+20	; 0x14
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	69 f7       	brne	.-38     	; 0x246c <HLCD_voidsendData+0x410>
    2492:	14 c0       	rjmp	.+40     	; 0x24bc <HLCD_voidsendData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2494:	6d 89       	ldd	r22, Y+21	; 0x15
    2496:	7e 89       	ldd	r23, Y+22	; 0x16
    2498:	8f 89       	ldd	r24, Y+23	; 0x17
    249a:	98 8d       	ldd	r25, Y+24	; 0x18
    249c:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9c 8b       	std	Y+20, r25	; 0x14
    24a6:	8b 8b       	std	Y+19, r24	; 0x13
    24a8:	8b 89       	ldd	r24, Y+19	; 0x13
    24aa:	9c 89       	ldd	r25, Y+20	; 0x14
    24ac:	98 8b       	std	Y+16, r25	; 0x10
    24ae:	8f 87       	std	Y+15, r24	; 0x0f
    24b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b2:	98 89       	ldd	r25, Y+16	; 0x10
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <HLCD_voidsendData+0x458>
    24b8:	98 8b       	std	Y+16, r25	; 0x10
    24ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    24bc:	84 e0       	ldi	r24, 0x04	; 4
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	b0 e4       	ldi	r27, 0x40	; 64
    24ce:	8b 87       	std	Y+11, r24	; 0x0b
    24d0:	9c 87       	std	Y+12, r25	; 0x0c
    24d2:	ad 87       	std	Y+13, r26	; 0x0d
    24d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24da:	8d 85       	ldd	r24, Y+13	; 0x0d
    24dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a ef       	ldi	r20, 0xFA	; 250
    24e4:	54 e4       	ldi	r21, 0x44	; 68
    24e6:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8f 83       	std	Y+7, r24	; 0x07
    24f0:	98 87       	std	Y+8, r25	; 0x08
    24f2:	a9 87       	std	Y+9, r26	; 0x09
    24f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f6:	6f 81       	ldd	r22, Y+7	; 0x07
    24f8:	78 85       	ldd	r23, Y+8	; 0x08
    24fa:	89 85       	ldd	r24, Y+9	; 0x09
    24fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <HLCD_voidsendData+0x4bc>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <HLCD_voidsendData+0x53a>
	else if (__tmp > 65535)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <HLCD_voidsendData+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	6b 85       	ldd	r22, Y+11	; 0x0b
    2532:	7c 85       	ldd	r23, Y+12	; 0x0c
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <HLCD_voidsendData+0x51c>
    255a:	88 ec       	ldi	r24, 0xC8	; 200
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <HLCD_voidsendData+0x50a>
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <HLCD_voidsendData+0x4fe>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <HLCD_voidsendData+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <HLCD_voidsendData+0x546>
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    25aa:	e9 96       	adiw	r28, 0x39	; 57
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <HLCD_voidinit>:

void HLCD_voidinit()
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	2e 97       	sbiw	r28, 0x0e	; 14
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e2       	ldi	r26, 0x20	; 32
    25d6:	b2 e4       	ldi	r27, 0x42	; 66
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <HLCD_voidinit+0x66>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <HLCD_voidinit+0xe4>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <HLCD_voidinit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <HLCD_voidinit+0xc6>
    2664:	88 ec       	ldi	r24, 0xC8	; 200
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <HLCD_voidinit+0xb4>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <HLCD_voidinit+0xa8>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <HLCD_voidinit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <HLCD_voidinit+0xf0>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidSendCommand(0x33);
    26b4:	83 e3       	ldi	r24, 0x33	; 51
    26b6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);			//send for 4 bit initialization of LCD
    26ba:	82 e3       	ldi	r24, 0x32	; 50
    26bc:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);			//select 4 bit mode, 5*7 dots
    26c0:	88 e2       	ldi	r24, 0x28	; 40
    26c2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x0F);			//display on, cursor blinking
    26c6:	8f e0       	ldi	r24, 0x0F	; 15
    26c8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);			//entry mode increment cursor to right
    26cc:	86 e0       	ldi	r24, 0x06	; 6
    26ce:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);			//clear display
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
}
    26d8:	2e 96       	adiw	r28, 0x0e	; 14
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <HLCD_voidclear>:


#endif

void HLCD_voidclear(void)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0x01);			//clear command
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x80);			//8 is for first line & 0 is for 0th position
    26f8:	80 e8       	ldi	r24, 0x80	; 128
    26fa:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <HLCD_voidsendNumber>:

void HLCD_voidsendNumber(u8 Number)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	65 97       	sbiw	r28, 0x15	; 21
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	8d 8b       	std	Y+21, r24	; 0x15
	char n[20];
	itoa(Number, n, 10);
    271a:	8d 89       	ldd	r24, Y+21	; 0x15
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9e 01       	movw	r18, r28
    2722:	2f 5f       	subi	r18, 0xFF	; 255
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	b9 01       	movw	r22, r18
    2728:	4a e0       	ldi	r20, 0x0A	; 10
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <itoa>
	HLCD_voidsendString(n);
    2730:	ce 01       	movw	r24, r28
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
}
    2738:	65 96       	adiw	r28, 0x15	; 21
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <HLCD_voidsendFloat>:

void HLCD_voidsendFloat(float32 Number)
{
    274a:	0f 93       	push	r16
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	68 97       	sbiw	r28, 0x18	; 24
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	6d 8b       	std	Y+21, r22	; 0x15
    2762:	7e 8b       	std	Y+22, r23	; 0x16
    2764:	8f 8b       	std	Y+23, r24	; 0x17
    2766:	98 8f       	std	Y+24, r25	; 0x18
	char n[20];
	dtostre(Number,n, 2, 2);				//convert 2 characters width & 2 decimal places
    2768:	8d 89       	ldd	r24, Y+21	; 0x15
    276a:	9e 89       	ldd	r25, Y+22	; 0x16
    276c:	af 89       	ldd	r26, Y+23	; 0x17
    276e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	9e 01       	movw	r18, r28
    2776:	2f 5f       	subi	r18, 0xFF	; 255
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	a9 01       	movw	r20, r18
    277c:	22 e0       	ldi	r18, 0x02	; 2
    277e:	02 e0       	ldi	r16, 0x02	; 2
    2780:	0e 94 28 06 	call	0xc50	; 0xc50 <dtostre>
	HLCD_voidsendString(n);
    2784:	ce 01       	movw	r24, r28
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
}
    278c:	68 96       	adiw	r28, 0x18	; 24
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <HLCD_voidsendString>:

void HLCD_voidsendString(char *string)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <HLCD_voidsendString+0x6>
    27a6:	0f 92       	push	r0
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	9b 83       	std	Y+3, r25	; 0x03
    27ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0; string[i] != 0; i++)
    27b0:	19 82       	std	Y+1, r1	; 0x01
    27b2:	0e c0       	rjmp	.+28     	; 0x27d0 <HLCD_voidsendString+0x30>
	{
		HLCD_voidsendData(string[i]);
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	9b 81       	ldd	r25, Y+3	; 0x03
    27be:	fc 01       	movw	r30, r24
    27c0:	e2 0f       	add	r30, r18
    27c2:	f3 1f       	adc	r31, r19
    27c4:	80 81       	ld	r24, Z
    27c6:	0e 94 2e 10 	call	0x205c	; 0x205c <HLCD_voidsendData>
}

void HLCD_voidsendString(char *string)
{
	u8 i;
	for(i=0; string[i] != 0; i++)
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	fc 01       	movw	r30, r24
    27dc:	e2 0f       	add	r30, r18
    27de:	f3 1f       	adc	r31, r19
    27e0:	80 81       	ld	r24, Z
    27e2:	88 23       	and	r24, r24
    27e4:	39 f7       	brne	.-50     	; 0x27b4 <HLCD_voidsendString+0x14>
	{
		HLCD_voidsendData(string[i]);
	}
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <HLCD_voidgotoXY>:

void HLCD_voidgotoXY(u8 x_pos, u8 y_pos)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <HLCD_voidgotoXY+0x6>
    27f8:	0f 92       	push	r0
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	8a 83       	std	Y+2, r24	; 0x02
    2800:	6b 83       	std	Y+3, r22	; 0x03
	u8 add = 0;
    2802:	19 82       	std	Y+1, r1	; 0x01
	if(x_pos == 0)
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	88 23       	and	r24, r24
    2808:	19 f4       	brne	.+6      	; 0x2810 <HLCD_voidgotoXY+0x1e>
	{
		add = 0x80;
    280a:	80 e8       	ldi	r24, 0x80	; 128
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	05 c0       	rjmp	.+10     	; 0x281a <HLCD_voidgotoXY+0x28>
	}
	else if(x_pos == 1)
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	11 f4       	brne	.+4      	; 0x281a <HLCD_voidgotoXY+0x28>
	{
		add = 0xc0;
    2816:	80 ec       	ldi	r24, 0xC0	; 192
    2818:	89 83       	std	Y+1, r24	; 0x01
	}
	else{}
	if(y_pos <16)
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	80 31       	cpi	r24, 0x10	; 16
    281e:	20 f4       	brcc	.+8      	; 0x2828 <HLCD_voidgotoXY+0x36>
	{
		add += y_pos;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	89 0f       	add	r24, r25
    2826:	89 83       	std	Y+1, r24	; 0x01
	}
	HLCD_voidSendCommand(add);
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
}
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <HLCD_IncrementCursor>:

void HLCD_IncrementCursor(u8 times){
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <HLCD_IncrementCursor+0x6>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0; i<times;i++)
    2846:	19 82       	std	Y+1, r1	; 0x01
    2848:	06 c0       	rjmp	.+12     	; 0x2856 <HLCD_IncrementCursor+0x1c>
	{
		HLCD_voidSendCommand(0x14);
    284a:	84 e1       	ldi	r24, 0x14	; 20
    284c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
	}
	HLCD_voidSendCommand(add);
}

void HLCD_IncrementCursor(u8 times){
	for (u8 i=0; i<times;i++)
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	8f 5f       	subi	r24, 0xFF	; 255
    2854:	89 83       	std	Y+1, r24	; 0x01
    2856:	99 81       	ldd	r25, Y+1	; 0x01
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	98 17       	cp	r25, r24
    285c:	b0 f3       	brcs	.-20     	; 0x284a <HLCD_IncrementCursor+0x10>
	{
		HLCD_voidSendCommand(0x14);
	}
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <HLCD_DecrementCursor>:

void HLCD_DecrementCursor(u8 times){
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	00 d0       	rcall	.+0      	; 0x286e <HLCD_DecrementCursor+0x6>
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0; i<times;i++)
    2874:	19 82       	std	Y+1, r1	; 0x01
    2876:	06 c0       	rjmp	.+12     	; 0x2884 <HLCD_DecrementCursor+0x1c>
	{
		HLCD_voidSendCommand(0x10);
    2878:	80 e1       	ldi	r24, 0x10	; 16
    287a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <HLCD_voidSendCommand>
		HLCD_voidSendCommand(0x14);
	}
}

void HLCD_DecrementCursor(u8 times){
	for (u8 i=0; i<times;i++)
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	99 81       	ldd	r25, Y+1	; 0x01
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	98 17       	cp	r25, r24
    288a:	b0 f3       	brcs	.-20     	; 0x2878 <HLCD_DecrementCursor+0x10>
	{
		HLCD_voidSendCommand(0x10);
	}
}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <Move_Name_LR>:

void Move_Name_LR(u8 *copy_u8String)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	6f 97       	sbiw	r28, 0x1f	; 31
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	9f 8f       	std	Y+31, r25	; 0x1f
    28ac:	8e 8f       	std	Y+30, r24	; 0x1e
	HLCD_voidsendString(copy_u8String);
    28ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28b2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
	HLCD_DecrementCursor(1);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	0e 94 34 14 	call	0x2868	; 0x2868 <HLCD_DecrementCursor>
	for (u8 i=0; i<5;i++)
    28bc:	1d 8e       	std	Y+29, r1	; 0x1d
    28be:	ea c0       	rjmp	.+468    	; 0x2a94 <Move_Name_LR+0x1fe>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a8 ec       	ldi	r26, 0xC8	; 200
    28c6:	b2 e4       	ldi	r27, 0x42	; 66
    28c8:	89 8f       	std	Y+25, r24	; 0x19
    28ca:	9a 8f       	std	Y+26, r25	; 0x1a
    28cc:	ab 8f       	std	Y+27, r26	; 0x1b
    28ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	69 8d       	ldd	r22, Y+25	; 0x19
    28d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a ef       	ldi	r20, 0xFA	; 250
    28de:	54 e4       	ldi	r21, 0x44	; 68
    28e0:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8d 8b       	std	Y+21, r24	; 0x15
    28ea:	9e 8b       	std	Y+22, r25	; 0x16
    28ec:	af 8b       	std	Y+23, r26	; 0x17
    28ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28f0:	6d 89       	ldd	r22, Y+21	; 0x15
    28f2:	7e 89       	ldd	r23, Y+22	; 0x16
    28f4:	8f 89       	ldd	r24, Y+23	; 0x17
    28f6:	98 8d       	ldd	r25, Y+24	; 0x18
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	2c f4       	brge	.+10     	; 0x2912 <Move_Name_LR+0x7c>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
    2910:	3f c0       	rjmp	.+126    	; 0x2990 <Move_Name_LR+0xfa>
	else if (__tmp > 65535)
    2912:	6d 89       	ldd	r22, Y+21	; 0x15
    2914:	7e 89       	ldd	r23, Y+22	; 0x16
    2916:	8f 89       	ldd	r24, Y+23	; 0x17
    2918:	98 8d       	ldd	r25, Y+24	; 0x18
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	4c f5       	brge	.+82     	; 0x297c <Move_Name_LR+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	69 8d       	ldd	r22, Y+25	; 0x19
    292c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9c 8b       	std	Y+20, r25	; 0x14
    2950:	8b 8b       	std	Y+19, r24	; 0x13
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <Move_Name_LR+0xdc>
    2954:	88 ec       	ldi	r24, 0xC8	; 200
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9a 8b       	std	Y+18, r25	; 0x12
    295a:	89 8b       	std	Y+17, r24	; 0x11
    295c:	89 89       	ldd	r24, Y+17	; 0x11
    295e:	9a 89       	ldd	r25, Y+18	; 0x12
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <Move_Name_LR+0xca>
    2964:	9a 8b       	std	Y+18, r25	; 0x12
    2966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	8b 89       	ldd	r24, Y+19	; 0x13
    296a:	9c 89       	ldd	r25, Y+20	; 0x14
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <Move_Name_LR+0xbe>
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <Move_Name_LR+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	6d 89       	ldd	r22, Y+21	; 0x15
    297e:	7e 89       	ldd	r23, Y+22	; 0x16
    2980:	8f 89       	ldd	r24, Y+23	; 0x17
    2982:	98 8d       	ldd	r25, Y+24	; 0x18
    2984:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9c 8b       	std	Y+20, r25	; 0x14
    298e:	8b 8b       	std	Y+19, r24	; 0x13
    2990:	8b 89       	ldd	r24, Y+19	; 0x13
    2992:	9c 89       	ldd	r25, Y+20	; 0x14
    2994:	98 8b       	std	Y+16, r25	; 0x10
    2996:	8f 87       	std	Y+15, r24	; 0x0f
    2998:	8f 85       	ldd	r24, Y+15	; 0x0f
    299a:	98 89       	ldd	r25, Y+16	; 0x10
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <Move_Name_LR+0x106>
    29a0:	98 8b       	std	Y+16, r25	; 0x10
    29a2:	8f 87       	std	Y+15, r24	; 0x0f
	{

		_delay_ms(100);
		HLCD_IncrementCursor(1);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	0e 94 1d 14 	call	0x283a	; 0x283a <HLCD_IncrementCursor>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a8 ec       	ldi	r26, 0xC8	; 200
    29b0:	b2 e4       	ldi	r27, 0x42	; 66
    29b2:	8b 87       	std	Y+11, r24	; 0x0b
    29b4:	9c 87       	std	Y+12, r25	; 0x0c
    29b6:	ad 87       	std	Y+13, r26	; 0x0d
    29b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8f 83       	std	Y+7, r24	; 0x07
    29d4:	98 87       	std	Y+8, r25	; 0x08
    29d6:	a9 87       	std	Y+9, r26	; 0x09
    29d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <Move_Name_LR+0x166>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <Move_Name_LR+0x1e4>
	else if (__tmp > 65535)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <Move_Name_LR+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <Move_Name_LR+0x1c6>
    2a3e:	88 ec       	ldi	r24, 0xC8	; 200
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <Move_Name_LR+0x1b4>
    2a4e:	9c 83       	std	Y+4, r25	; 0x04
    2a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <Move_Name_LR+0x1a8>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <Move_Name_LR+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9e 83       	std	Y+6, r25	; 0x06
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <Move_Name_LR+0x1f0>
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01

void Move_Name_LR(u8 *copy_u8String)
{
	HLCD_voidsendString(copy_u8String);
	HLCD_DecrementCursor(1);
	for (u8 i=0; i<5;i++)
    2a8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a90:	8f 5f       	subi	r24, 0xFF	; 255
    2a92:	8d 8f       	std	Y+29, r24	; 0x1d
    2a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a96:	85 30       	cpi	r24, 0x05	; 5
    2a98:	08 f4       	brcc	.+2      	; 0x2a9c <Move_Name_LR+0x206>
    2a9a:	12 cf       	rjmp	.-476    	; 0x28c0 <Move_Name_LR+0x2a>
		_delay_ms(100);
		HLCD_IncrementCursor(1);
		_delay_ms(100);

	}
}
    2a9c:	6f 96       	adiw	r28, 0x1f	; 31
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <Hkeypad_u8GetKey>:
#include "Hkeypad_private.h"
#include "Hkeypad_config.h"
#include "../LCD/HLCD_interface.h"

u8 Hkeypad_u8GetKey(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	a2 97       	sbiw	r28, 0x22	; 34
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_KEY;																				//variable for pressed button
    2ac2:	1c 82       	std	Y+4, r1	; 0x04
	u8 flag = 0;
    2ac4:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8ColIterator = 0;
    2ac6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIterator = 0;
    2ac8:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8KeyIsPressed = NOT_PRESSED;																		//check the button is pressed or not
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	8d 83       	std	Y+5, r24	; 0x05
	u8 Col_array[COL_SIZE] = {KEYPAD_C1, KEYPAD_C2, KEYPAD_C3, KEYPAD_C4};
    2ace:	84 e0       	ldi	r24, 0x04	; 4
    2ad0:	8e 83       	std	Y+6, r24	; 0x06
    2ad2:	85 e0       	ldi	r24, 0x05	; 5
    2ad4:	8f 83       	std	Y+7, r24	; 0x07
    2ad6:	86 e0       	ldi	r24, 0x06	; 6
    2ad8:	88 87       	std	Y+8, r24	; 0x08
    2ada:	87 e0       	ldi	r24, 0x07	; 7
    2adc:	89 87       	std	Y+9, r24	; 0x09
	u8 Row_array[ROW_SIZE] = {KEYPAD_R1, KEYPAD_R2, KEYPAD_R3, KEYPAD_R4};
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	8a 87       	std	Y+10, r24	; 0x0a
    2ae2:	83 e0       	ldi	r24, 0x03	; 3
    2ae4:	8b 87       	std	Y+11, r24	; 0x0b
    2ae6:	84 e0       	ldi	r24, 0x04	; 4
    2ae8:	8c 87       	std	Y+12, r24	; 0x0c
    2aea:	85 e0       	ldi	r24, 0x05	; 5
    2aec:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KeyPad_Type;
    2aee:	ce 01       	movw	r24, r28
    2af0:	0e 96       	adiw	r24, 0x0e	; 14
    2af2:	9f 8f       	std	Y+31, r25	; 0x1f
    2af4:	8e 8f       	std	Y+30, r24	; 0x1e
    2af6:	e0 e7       	ldi	r30, 0x70	; 112
    2af8:	f1 e0       	ldi	r31, 0x01	; 1
    2afa:	f9 a3       	std	Y+33, r31	; 0x21
    2afc:	e8 a3       	std	Y+32, r30	; 0x20
    2afe:	f0 e1       	ldi	r31, 0x10	; 16
    2b00:	fa a3       	std	Y+34, r31	; 0x22
    2b02:	e8 a1       	ldd	r30, Y+32	; 0x20
    2b04:	f9 a1       	ldd	r31, Y+33	; 0x21
    2b06:	00 80       	ld	r0, Z
    2b08:	88 a1       	ldd	r24, Y+32	; 0x20
    2b0a:	99 a1       	ldd	r25, Y+33	; 0x21
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	99 a3       	std	Y+33, r25	; 0x21
    2b10:	88 a3       	std	Y+32, r24	; 0x20
    2b12:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b14:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b16:	00 82       	st	Z, r0
    2b18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	9f 8f       	std	Y+31, r25	; 0x1f
    2b20:	8e 8f       	std	Y+30, r24	; 0x1e
    2b22:	9a a1       	ldd	r25, Y+34	; 0x22
    2b24:	91 50       	subi	r25, 0x01	; 1
    2b26:	9a a3       	std	Y+34, r25	; 0x22
    2b28:	ea a1       	ldd	r30, Y+34	; 0x22
    2b2a:	ee 23       	and	r30, r30
    2b2c:	51 f7       	brne	.-44     	; 0x2b02 <Hkeypad_u8GetKey+0x54>

	for(Local_u8ColIterator = 0; Local_u8ColIterator< COL_SIZE; Local_u8ColIterator++)							//loop for columns of keypad
    2b2e:	1a 82       	std	Y+2, r1	; 0x02
    2b30:	6b c0       	rjmp	.+214    	; 0x2c08 <Hkeypad_u8GetKey+0x15a>
	{
		MDIO_SetPinValue(KEYPAD_C_PORT, Col_array[Local_u8ColIterator], DIO_LOW);									//set the keypad columns to be low
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	28 2f       	mov	r18, r24
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	ce 01       	movw	r24, r28
    2b3a:	06 96       	adiw	r24, 0x06	; 6
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	e2 0f       	add	r30, r18
    2b40:	f3 1f       	adc	r31, r19
    2b42:	90 81       	ld	r25, Z
    2b44:	83 e0       	ldi	r24, 0x03	; 3
    2b46:	69 2f       	mov	r22, r25
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
		for(Local_u8RowIterator = 0; Local_u8RowIterator < ROW_SIZE; Local_u8RowIterator++)
    2b4e:	19 82       	std	Y+1, r1	; 0x01
    2b50:	43 c0       	rjmp	.+134    	; 0x2bd8 <Hkeypad_u8GetKey+0x12a>
		{
			MDIO_GetPinValue(KEYPAD_R_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	28 2f       	mov	r18, r24
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	ce 01       	movw	r24, r28
    2b5a:	0a 96       	adiw	r24, 0x0a	; 10
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	e2 0f       	add	r30, r18
    2b60:	f3 1f       	adc	r31, r19
    2b62:	90 81       	ld	r25, Z
    2b64:	9e 01       	movw	r18, r28
    2b66:	2b 5f       	subi	r18, 0xFB	; 251
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	84 e0       	ldi	r24, 0x04	; 4
    2b6c:	69 2f       	mov	r22, r25
    2b6e:	a9 01       	movw	r20, r18
    2b70:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <MDIO_GetPinValue>
			if(Local_u8KeyIsPressed == PRESSED)
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	88 23       	and	r24, r24
    2b78:	61 f5       	brne	.+88     	; 0x2bd2 <Hkeypad_u8GetKey+0x124>
    2b7a:	11 c0       	rjmp	.+34     	; 0x2b9e <Hkeypad_u8GetKey+0xf0>
			{
				while(Local_u8KeyIsPressed == PRESSED)
				{
					MDIO_GetPinValue(KEYPAD_R_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	28 2f       	mov	r18, r24
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	ce 01       	movw	r24, r28
    2b84:	0a 96       	adiw	r24, 0x0a	; 10
    2b86:	fc 01       	movw	r30, r24
    2b88:	e2 0f       	add	r30, r18
    2b8a:	f3 1f       	adc	r31, r19
    2b8c:	90 81       	ld	r25, Z
    2b8e:	9e 01       	movw	r18, r28
    2b90:	2b 5f       	subi	r18, 0xFB	; 251
    2b92:	3f 4f       	sbci	r19, 0xFF	; 255
    2b94:	84 e0       	ldi	r24, 0x04	; 4
    2b96:	69 2f       	mov	r22, r25
    2b98:	a9 01       	movw	r20, r18
    2b9a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <MDIO_GetPinValue>
		for(Local_u8RowIterator = 0; Local_u8RowIterator < ROW_SIZE; Local_u8RowIterator++)
		{
			MDIO_GetPinValue(KEYPAD_R_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
			if(Local_u8KeyIsPressed == PRESSED)
			{
				while(Local_u8KeyIsPressed == PRESSED)
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	88 23       	and	r24, r24
    2ba2:	61 f3       	breq	.-40     	; 0x2b7c <Hkeypad_u8GetKey+0xce>
				{
					MDIO_GetPinValue(KEYPAD_R_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
				}
				Local_u8PressedKey = Keypad_arr[Local_u8RowIterator][Local_u8ColIterator];						//store the pressed button value
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	48 2f       	mov	r20, r24
    2bae:	50 e0       	ldi	r21, 0x00	; 0
    2bb0:	22 0f       	add	r18, r18
    2bb2:	33 1f       	adc	r19, r19
    2bb4:	22 0f       	add	r18, r18
    2bb6:	33 1f       	adc	r19, r19
    2bb8:	ce 01       	movw	r24, r28
    2bba:	01 96       	adiw	r24, 0x01	; 1
    2bbc:	82 0f       	add	r24, r18
    2bbe:	93 1f       	adc	r25, r19
    2bc0:	84 0f       	add	r24, r20
    2bc2:	95 1f       	adc	r25, r21
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	3d 96       	adiw	r30, 0x0d	; 13
    2bc8:	80 81       	ld	r24, Z
    2bca:	8c 83       	std	Y+4, r24	; 0x04
				flag = 1;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	8b 83       	std	Y+3, r24	; 0x03
    2bd0:	07 c0       	rjmp	.+14     	; 0x2be0 <Hkeypad_u8GetKey+0x132>
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KeyPad_Type;

	for(Local_u8ColIterator = 0; Local_u8ColIterator< COL_SIZE; Local_u8ColIterator++)							//loop for columns of keypad
	{
		MDIO_SetPinValue(KEYPAD_C_PORT, Col_array[Local_u8ColIterator], DIO_LOW);									//set the keypad columns to be low
		for(Local_u8RowIterator = 0; Local_u8RowIterator < ROW_SIZE; Local_u8RowIterator++)
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	84 30       	cpi	r24, 0x04	; 4
    2bdc:	08 f4       	brcc	.+2      	; 0x2be0 <Hkeypad_u8GetKey+0x132>
    2bde:	b9 cf       	rjmp	.-142    	; 0x2b52 <Hkeypad_u8GetKey+0xa4>
				break;
			}
			else
			{}
		}
		MDIO_SetPinValue(KEYPAD_C_PORT, Col_array[Local_u8ColIterator], DIO_HIGH);									//set the keypad columns to be low
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	ce 01       	movw	r24, r28
    2be8:	06 96       	adiw	r24, 0x06	; 6
    2bea:	fc 01       	movw	r30, r24
    2bec:	e2 0f       	add	r30, r18
    2bee:	f3 1f       	adc	r31, r19
    2bf0:	90 81       	ld	r25, Z
    2bf2:	83 e0       	ldi	r24, 0x03	; 3
    2bf4:	69 2f       	mov	r22, r25
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MDIO_SetPinValue>
		if(flag)
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	88 23       	and	r24, r24
    2c00:	39 f4       	brne	.+14     	; 0x2c10 <Hkeypad_u8GetKey+0x162>
	u8 Local_u8KeyIsPressed = NOT_PRESSED;																		//check the button is pressed or not
	u8 Col_array[COL_SIZE] = {KEYPAD_C1, KEYPAD_C2, KEYPAD_C3, KEYPAD_C4};
	u8 Row_array[ROW_SIZE] = {KEYPAD_R1, KEYPAD_R2, KEYPAD_R3, KEYPAD_R4};
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KeyPad_Type;

	for(Local_u8ColIterator = 0; Local_u8ColIterator< COL_SIZE; Local_u8ColIterator++)							//loop for columns of keypad
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	8a 83       	std	Y+2, r24	; 0x02
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	84 30       	cpi	r24, 0x04	; 4
    2c0c:	08 f4       	brcc	.+2      	; 0x2c10 <Hkeypad_u8GetKey+0x162>
    2c0e:	91 cf       	rjmp	.-222    	; 0x2b32 <Hkeypad_u8GetKey+0x84>
			break;
		}
		else{}

	}
	return Local_u8PressedKey;
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2c12:	a2 96       	adiw	r28, 0x22	; 34
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <Hkeypad_charGet_String>:

char* Hkeypad_charGet_String(void)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	00 d0       	rcall	.+0      	; 0x2c2a <Hkeypad_charGet_String+0x6>
    2c2a:	0f 92       	push	r0
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	static char str[20] = "";
	int i=0;
    2c30:	1b 82       	std	Y+3, r1	; 0x03
    2c32:	1a 82       	std	Y+2, r1	; 0x02
    2c34:	15 c0       	rjmp	.+42     	; 0x2c60 <Hkeypad_charGet_String+0x3c>
	char chr;
	while(chr!='=')
	{
		chr = Hkeypad_u8GetKey();
    2c36:	0e 94 57 15 	call	0x2aae	; 0x2aae <Hkeypad_u8GetKey>
    2c3a:	89 83       	std	Y+1, r24	; 0x01
		if(chr != NO_KEY)
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	88 23       	and	r24, r24
    2c40:	79 f0       	breq	.+30     	; 0x2c60 <Hkeypad_charGet_String+0x3c>
		{
			HLCD_voidsendData(chr);
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	0e 94 2e 10 	call	0x205c	; 0x205c <HLCD_voidsendData>
			str[i]=chr;
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	e8 5a       	subi	r30, 0xA8	; 168
    2c50:	fe 4f       	sbci	r31, 0xFE	; 254
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	80 83       	st	Z, r24
			i++;
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	9b 83       	std	Y+3, r25	; 0x03
    2c5e:	8a 83       	std	Y+2, r24	; 0x02
char* Hkeypad_charGet_String(void)
{
	static char str[20] = "";
	int i=0;
	char chr;
	while(chr!='=')
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	8d 33       	cpi	r24, 0x3D	; 61
    2c64:	41 f7       	brne	.-48     	; 0x2c36 <Hkeypad_charGet_String+0x12>
			HLCD_voidsendData(chr);
			str[i]=chr;
			i++;
		}
	}
	str[i-1]='\0';
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e8 5a       	subi	r30, 0xA8	; 168
    2c70:	fe 4f       	sbci	r31, 0xFE	; 254
    2c72:	10 82       	st	Z, r1
	return str;
    2c74:	88 e5       	ldi	r24, 0x58	; 88
    2c76:	91 e0       	ldi	r25, 0x01	; 1
}
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <EEPROM_voidWrite>:
#include "../../MCAL/TWI/MTWI_interface.h"
#include "EEPROM_interface.h"
#include <util/delay.h>

void EEPROM_voidWrite(u8 Copy_u8Data , u8 Copy_u8Address)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	60 97       	sbiw	r28, 0x10	; 16
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	8f 87       	std	Y+15, r24	; 0x0f
    2c9a:	68 8b       	std	Y+16, r22	; 0x10
	MTWI_voidStart();
    2c9c:	0e 94 bc 08 	call	0x1178	; 0x1178 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
    2ca0:	80 ea       	ldi	r24, 0xA0	; 160
    2ca2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
    2ca6:	88 89       	ldd	r24, Y+16	; 0x10
    2ca8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MTWI_voidWrite>

	/* Send Data */
	MTWI_voidWrite(Copy_u8Data);
    2cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cae:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MTWI_voidWrite>

	MTWI_voidStop();
    2cb2:	0e 94 29 09 	call	0x1252	; 0x1252 <MTWI_voidStop>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	a0 e7       	ldi	r26, 0x70	; 112
    2cbc:	b1 e4       	ldi	r27, 0x41	; 65
    2cbe:	8b 87       	std	Y+11, r24	; 0x0b
    2cc0:	9c 87       	std	Y+12, r25	; 0x0c
    2cc2:	ad 87       	std	Y+13, r26	; 0x0d
    2cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a ef       	ldi	r20, 0xFA	; 250
    2cd4:	54 e4       	ldi	r21, 0x44	; 68
    2cd6:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8f 83       	std	Y+7, r24	; 0x07
    2ce0:	98 87       	std	Y+8, r25	; 0x08
    2ce2:	a9 87       	std	Y+9, r26	; 0x09
    2ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2cfa:	88 23       	and	r24, r24
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <EEPROM_voidWrite+0x84>
		__ticks = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	3f c0       	rjmp	.+126    	; 0x2d86 <EEPROM_voidWrite+0x102>
	else if (__tmp > 65535)
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	3f ef       	ldi	r19, 0xFF	; 255
    2d14:	4f e7       	ldi	r20, 0x7F	; 127
    2d16:	57 e4       	ldi	r21, 0x47	; 71
    2d18:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2d1c:	18 16       	cp	r1, r24
    2d1e:	4c f5       	brge	.+82     	; 0x2d72 <EEPROM_voidWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e2       	ldi	r20, 0x20	; 32
    2d2e:	51 e4       	ldi	r21, 0x41	; 65
    2d30:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	0f c0       	rjmp	.+30     	; 0x2d68 <EEPROM_voidWrite+0xe4>
    2d4a:	88 ec       	ldi	r24, 0xC8	; 200
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <EEPROM_voidWrite+0xd2>
    2d5a:	9c 83       	std	Y+4, r25	; 0x04
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <EEPROM_voidWrite+0xc6>
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <EEPROM_voidWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	6f 81       	ldd	r22, Y+7	; 0x07
    2d74:	78 85       	ldd	r23, Y+8	; 0x08
    2d76:	89 85       	ldd	r24, Y+9	; 0x09
    2d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7a:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <EEPROM_voidWrite+0x10e>
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

}
    2d9a:	60 96       	adiw	r28, 0x10	; 16
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <EEPROM_voidRead>:

void EEPROM_voidRead(u8 Copy_u8Address , u8 *Copy_pu8Data)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	61 97       	sbiw	r28, 0x11	; 17
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	8f 87       	std	Y+15, r24	; 0x0f
    2dc2:	79 8b       	std	Y+17, r23	; 0x11
    2dc4:	68 8b       	std	Y+16, r22	; 0x10
	MTWI_voidStart();
    2dc6:	0e 94 bc 08 	call	0x1178	; 0x1178 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
    2dca:	80 ea       	ldi	r24, 0xA0	; 160
    2dcc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
    2dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MTWI_voidWrite>

	/* Send repeated start */
	MTWI_voidStart();
    2dd6:	0e 94 bc 08 	call	0x1178	; 0x1178 <MTWI_voidStart>
	/* send SLAVE ADDRESS with READ*/
	MTWI_voidWrite(0xA1);
    2dda:	81 ea       	ldi	r24, 0xA1	; 161
    2ddc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MTWI_voidWrite>

	/* master read data byte */
	*Copy_pu8Data = MTWI_u8ReadWithACK();
    2de0:	0e 94 05 09 	call	0x120a	; 0x120a <MTWI_u8ReadWithACK>
    2de4:	e8 89       	ldd	r30, Y+16	; 0x10
    2de6:	f9 89       	ldd	r31, Y+17	; 0x11
    2de8:	80 83       	st	Z, r24

	MTWI_voidStop();
    2dea:	0e 94 29 09 	call	0x1252	; 0x1252 <MTWI_voidStop>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e7       	ldi	r26, 0x70	; 112
    2df4:	b1 e4       	ldi	r27, 0x41	; 65
    2df6:	8b 87       	std	Y+11, r24	; 0x0b
    2df8:	9c 87       	std	Y+12, r25	; 0x0c
    2dfa:	ad 87       	std	Y+13, r26	; 0x0d
    2dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a ef       	ldi	r20, 0xFA	; 250
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8f 83       	std	Y+7, r24	; 0x07
    2e18:	98 87       	std	Y+8, r25	; 0x08
    2e1a:	a9 87       	std	Y+9, r26	; 0x09
    2e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <EEPROM_voidRead+0x94>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <EEPROM_voidRead+0x112>
	else if (__tmp > 65535)
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <EEPROM_voidRead+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <EEPROM_voidRead+0xf4>
    2e82:	88 ec       	ldi	r24, 0xC8	; 200
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <EEPROM_voidRead+0xe2>
    2e92:	9c 83       	std	Y+4, r25	; 0x04
    2e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <EEPROM_voidRead+0xd6>
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <EEPROM_voidRead+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <EEPROM_voidRead+0x11e>
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

}
    2ed2:	61 96       	adiw	r28, 0x11	; 17
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <Menu_state>:
u16 MAP_u16Mapping(u16 x_Max, u16 x_Min, u16 y_Max, u16 y_Min, u16 y);			/*Mapping Function declaration*/

u8 G_u8RecivedData = 0;															/*Global variable for the received data from bluetooth*/

void Menu_state(EN_FirstEntryFlag_t *Menu_Flag, EN_SystemStates_t *Current_state)	/*Entering Menu state function*/
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	64 97       	sbiw	r28, 0x14	; 20
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	98 8b       	std	Y+16, r25	; 0x10
    2efa:	8f 87       	std	Y+15, r24	; 0x0f
    2efc:	7a 8b       	std	Y+18, r23	; 0x12
    2efe:	69 8b       	std	Y+17, r22	; 0x11
	/* First Entry Action */
	if(*Menu_Flag == FIRST_ENTRY_TRUE)											/*Check the entry flag*/
    2f00:	ef 85       	ldd	r30, Y+15	; 0x0f
    2f02:	f8 89       	ldd	r31, Y+16	; 0x10
    2f04:	80 81       	ld	r24, Z
    2f06:	81 30       	cpi	r24, 0x01	; 1
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <Menu_state+0x28>
    2f0a:	97 c0       	rjmp	.+302    	; 0x303a <Menu_state+0x156>
	{																			/*Entering the if statement*/
		HLCD_voidgotoXY(0, 0);													/*Set the cursor to location 0,0*/
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("1)Open System");									/*Print string on LCD*/
    2f14:	80 e6       	ldi	r24, 0x60	; 96
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
		HLCD_voidgotoXY(1, 0);													/*Set the cursor to location 1,0*/
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("2)Change Pass.");									/*Print string on LCD*/
    2f24:	8e e6       	ldi	r24, 0x6E	; 110
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	aa e7       	ldi	r26, 0x7A	; 122
    2f32:	b4 e4       	ldi	r27, 0x44	; 68
    2f34:	8b 87       	std	Y+11, r24	; 0x0b
    2f36:	9c 87       	std	Y+12, r25	; 0x0c
    2f38:	ad 87       	std	Y+13, r26	; 0x0d
    2f3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4a ef       	ldi	r20, 0xFA	; 250
    2f4a:	54 e4       	ldi	r21, 0x44	; 68
    2f4c:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	8f 83       	std	Y+7, r24	; 0x07
    2f56:	98 87       	std	Y+8, r25	; 0x08
    2f58:	a9 87       	std	Y+9, r26	; 0x09
    2f5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e8       	ldi	r20, 0x80	; 128
    2f6a:	5f e3       	ldi	r21, 0x3F	; 63
    2f6c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2f70:	88 23       	and	r24, r24
    2f72:	2c f4       	brge	.+10     	; 0x2f7e <Menu_state+0x9a>
		__ticks = 1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	9e 83       	std	Y+6, r25	; 0x06
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
    2f7c:	3f c0       	rjmp	.+126    	; 0x2ffc <Menu_state+0x118>
	else if (__tmp > 65535)
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	3f ef       	ldi	r19, 0xFF	; 255
    2f8a:	4f e7       	ldi	r20, 0x7F	; 127
    2f8c:	57 e4       	ldi	r21, 0x47	; 71
    2f8e:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	4c f5       	brge	.+82     	; 0x2fe8 <Menu_state+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	8d 83       	std	Y+5, r24	; 0x05
    2fbe:	0f c0       	rjmp	.+30     	; 0x2fde <Menu_state+0xfa>
    2fc0:	88 ec       	ldi	r24, 0xC8	; 200
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	9c 83       	std	Y+4, r25	; 0x04
    2fc6:	8b 83       	std	Y+3, r24	; 0x03
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <Menu_state+0xe8>
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	69 f7       	brne	.-38     	; 0x2fc0 <Menu_state+0xdc>
    2fe6:	14 c0       	rjmp	.+40     	; 0x3010 <Menu_state+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fea:	78 85       	ldd	r23, Y+8	; 0x08
    2fec:	89 85       	ldd	r24, Y+9	; 0x09
    2fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff0:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	8d 83       	std	Y+5, r24	; 0x05
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	9a 81       	ldd	r25, Y+2	; 0x02
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <Menu_state+0x124>
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);														/*wait for 1s*/
		HLCD_voidclear();														/*Clear the LCD*/
    3010:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
		HLCD_voidgotoXY(0, 0);													/*Set the cursor to location 0,0*/
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("2)Change Pass.");									/*Print string on LCD*/
    301c:	8e e6       	ldi	r24, 0x6E	; 110
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
		HLCD_voidgotoXY(1, 0);													/*Set the cursor to location 1,0*/
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("3)Add User");										/*Print string on LCD*/
    302c:	8d e7       	ldi	r24, 0x7D	; 125
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
		*Menu_Flag = FIRST_ENTRY_FALSE;											/*Update the Menu flag*/
    3034:	ef 85       	ldd	r30, Y+15	; 0x0f
    3036:	f8 89       	ldd	r31, Y+16	; 0x10
    3038:	10 82       	st	Z, r1
	}																			/*Exit the if statement*/

	/* Within State Action */
	Key_value = Hkeypad_u8GetKey();												/*Read the Key pressed in Keypad*/
    303a:	0e 94 57 15 	call	0x2aae	; 0x2aae <Hkeypad_u8GetKey>
    303e:	80 93 da 01 	sts	0x01DA, r24
	/* Exit Action */
	while(Key_value != NO_KEY)													/*Check if there is any key is pressed*/
    3042:	80 91 da 01 	lds	r24, 0x01DA
    3046:	88 23       	and	r24, r24
    3048:	a9 f1       	breq	.+106    	; 0x30b4 <Menu_state+0x1d0>
	{
		switch(Key_value)														/*Switch on the key value*/
    304a:	80 91 da 01 	lds	r24, 0x01DA
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	3c 8b       	std	Y+20, r19	; 0x14
    3054:	2b 8b       	std	Y+19, r18	; 0x13
    3056:	8b 89       	ldd	r24, Y+19	; 0x13
    3058:	9c 89       	ldd	r25, Y+20	; 0x14
    305a:	82 33       	cpi	r24, 0x32	; 50
    305c:	91 05       	cpc	r25, r1
    305e:	a9 f0       	breq	.+42     	; 0x308a <Menu_state+0x1a6>
    3060:	2b 89       	ldd	r18, Y+19	; 0x13
    3062:	3c 89       	ldd	r19, Y+20	; 0x14
    3064:	23 33       	cpi	r18, 0x33	; 51
    3066:	31 05       	cpc	r19, r1
    3068:	d9 f0       	breq	.+54     	; 0x30a0 <Menu_state+0x1bc>
    306a:	8b 89       	ldd	r24, Y+19	; 0x13
    306c:	9c 89       	ldd	r25, Y+20	; 0x14
    306e:	81 33       	cpi	r24, 0x31	; 49
    3070:	91 05       	cpc	r25, r1
    3072:	01 f5       	brne	.+64     	; 0x30b4 <Menu_state+0x1d0>
		{
		case '1':																/*Entering case 1*/
			HLCD_voidclear();													/*Clear the LCD*/
    3074:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
			/* Update the first entry flag to be true for the next entry time */
			*Menu_Flag = FIRST_ENTRY_TRUE;
    3078:	ef 85       	ldd	r30, Y+15	; 0x0f
    307a:	f8 89       	ldd	r31, Y+16	; 0x10
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	80 83       	st	Z, r24
			/* Update state object for the transition */
			*Current_state = OPEN_SYSTEM;
    3080:	e9 89       	ldd	r30, Y+17	; 0x11
    3082:	fa 89       	ldd	r31, Y+18	; 0x12
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	80 83       	st	Z, r24
    3088:	15 c0       	rjmp	.+42     	; 0x30b4 <Menu_state+0x1d0>
			break;																/*Exit the case*/

		case '2':																/*Entering case 2*/
			HLCD_voidclear();													/*Clear the LCD*/
    308a:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
			/* Update the first entry flag to be true for the next entry time */
			*Menu_Flag = FIRST_ENTRY_TRUE;
    308e:	ef 85       	ldd	r30, Y+15	; 0x0f
    3090:	f8 89       	ldd	r31, Y+16	; 0x10
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	80 83       	st	Z, r24
			/* Update state object for the transition */
			*Current_state = CHANGE_PASSWORD;
    3096:	e9 89       	ldd	r30, Y+17	; 0x11
    3098:	fa 89       	ldd	r31, Y+18	; 0x12
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	80 83       	st	Z, r24
    309e:	0a c0       	rjmp	.+20     	; 0x30b4 <Menu_state+0x1d0>
			break;																/*Exit the case*/

		case '3':																/*Entering case 3*/
			HLCD_voidclear();													/*Clear the LCD*/
    30a0:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
			/* Update the first entry flag to be true for the next entry time */
			*Menu_Flag = FIRST_ENTRY_TRUE;
    30a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    30a6:	f8 89       	ldd	r31, Y+16	; 0x10
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	80 83       	st	Z, r24
			/* Update state object for the transition */
			*Current_state = ADD_USER;
    30ac:	e9 89       	ldd	r30, Y+17	; 0x11
    30ae:	fa 89       	ldd	r31, Y+18	; 0x12
    30b0:	83 e0       	ldi	r24, 0x03	; 3
    30b2:	80 83       	st	Z, r24
		default:																/*Default case*/
			break;																/*Exit the default case*/
		}																		/*Exit the switch*/
		break;																	/*Break the loop*/
	}																			/*Exit the loop*/
}																				/*Exit the function*/
    30b4:	64 96       	adiw	r28, 0x14	; 20
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <Open_System_state>:

void Open_System_state(EN_FirstEntryFlag_t *Open_System_Flag, EN_SystemStates_t *Current_state) 	/*Entering Open system state function*/
{
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	62 97       	sbiw	r28, 0x12	; 18
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	98 8b       	std	Y+16, r25	; 0x10
    30dc:	8f 87       	std	Y+15, r24	; 0x0f
    30de:	7a 8b       	std	Y+18, r23	; 0x12
    30e0:	69 8b       	std	Y+17, r22	; 0x11
	/* First Entry Action */
	if(*Open_System_Flag == FIRST_ENTRY_TRUE)									/*Check the entry flag*/
    30e2:	ef 85       	ldd	r30, Y+15	; 0x0f
    30e4:	f8 89       	ldd	r31, Y+16	; 0x10
    30e6:	80 81       	ld	r24, Z
    30e8:	81 30       	cpi	r24, 0x01	; 1
    30ea:	09 f0       	breq	.+2      	; 0x30ee <Open_System_state+0x28>
    30ec:	85 c0       	rjmp	.+266    	; 0x31f8 <Open_System_state+0x132>
	{																			/*Entering the if statement*/
		HLCD_voidgotoXY(0, 0);													/*Set the cursor to location 0,0*/
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("Open System Mode");								/*Print string on LCD*/
    30f6:	88 e8       	ldi	r24, 0x88	; 136
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
		HLCD_voidgotoXY(1, 0);													/*Set the cursor to location 1,0*/
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("Press C to Back");									/*Print string on LCD*/
    3106:	89 e9       	ldi	r24, 0x99	; 153
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	aa ef       	ldi	r26, 0xFA	; 250
    3114:	b3 e4       	ldi	r27, 0x43	; 67
    3116:	8b 87       	std	Y+11, r24	; 0x0b
    3118:	9c 87       	std	Y+12, r25	; 0x0c
    311a:	ad 87       	std	Y+13, r26	; 0x0d
    311c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	4a ef       	ldi	r20, 0xFA	; 250
    312c:	54 e4       	ldi	r21, 0x44	; 68
    312e:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	8f 83       	std	Y+7, r24	; 0x07
    3138:	98 87       	std	Y+8, r25	; 0x08
    313a:	a9 87       	std	Y+9, r26	; 0x09
    313c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313e:	6f 81       	ldd	r22, Y+7	; 0x07
    3140:	78 85       	ldd	r23, Y+8	; 0x08
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	2c f4       	brge	.+10     	; 0x3160 <Open_System_state+0x9a>
		__ticks = 1;
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	3f c0       	rjmp	.+126    	; 0x31de <Open_System_state+0x118>
	else if (__tmp > 65535)
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	3f ef       	ldi	r19, 0xFF	; 255
    316c:	4f e7       	ldi	r20, 0x7F	; 127
    316e:	57 e4       	ldi	r21, 0x47	; 71
    3170:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    3174:	18 16       	cp	r1, r24
    3176:	4c f5       	brge	.+82     	; 0x31ca <Open_System_state+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3178:	6b 85       	ldd	r22, Y+11	; 0x0b
    317a:	7c 85       	ldd	r23, Y+12	; 0x0c
    317c:	8d 85       	ldd	r24, Y+13	; 0x0d
    317e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e2       	ldi	r20, 0x20	; 32
    3186:	51 e4       	ldi	r21, 0x41	; 65
    3188:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	0f c0       	rjmp	.+30     	; 0x31c0 <Open_System_state+0xfa>
    31a2:	88 ec       	ldi	r24, 0xC8	; 200
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	8b 83       	std	Y+3, r24	; 0x03
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <Open_System_state+0xe8>
    31b2:	9c 83       	std	Y+4, r25	; 0x04
    31b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
    31c2:	9e 81       	ldd	r25, Y+6	; 0x06
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	69 f7       	brne	.-38     	; 0x31a2 <Open_System_state+0xdc>
    31c8:	14 c0       	rjmp	.+40     	; 0x31f2 <Open_System_state+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ca:	6f 81       	ldd	r22, Y+7	; 0x07
    31cc:	78 85       	ldd	r23, Y+8	; 0x08
    31ce:	89 85       	ldd	r24, Y+9	; 0x09
    31d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d2:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <Open_System_state+0x124>
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		*Open_System_Flag = FIRST_ENTRY_FALSE;									/*Update the Open system flag*/
    31f2:	ef 85       	ldd	r30, Y+15	; 0x0f
    31f4:	f8 89       	ldd	r31, Y+16	; 0x10
    31f6:	10 82       	st	Z, r1
	}																			/*Exit the if statement*/

	/* Within State Action */
	Open_Smart_System();														/*Call the open system function*/
    31f8:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <Open_Smart_System>

	/* Exit Action */
	Key_value = Hkeypad_u8GetKey();												/*Read the Key pressed in Keypad*/
    31fc:	0e 94 57 15 	call	0x2aae	; 0x2aae <Hkeypad_u8GetKey>
    3200:	80 93 da 01 	sts	0x01DA, r24
	while(Key_value != NO_KEY)													/*Check if there is any key is pressed*/
    3204:	80 91 da 01 	lds	r24, 0x01DA
    3208:	88 23       	and	r24, r24
    320a:	69 f0       	breq	.+26     	; 0x3226 <Open_System_state+0x160>
	{																			/*Entering the while loop*/
		if(Key_value == 'C')													/*Check if the pressed key is C*/
    320c:	80 91 da 01 	lds	r24, 0x01DA
    3210:	83 34       	cpi	r24, 0x43	; 67
    3212:	49 f4       	brne	.+18     	; 0x3226 <Open_System_state+0x160>
		{																		/*Entering the if statement*/
			HLCD_voidclear();													/*Clear the LCD*/
    3214:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
			/* Update the first entry flag to be true for the next entry time */
			*Open_System_Flag = FIRST_ENTRY_TRUE;
    3218:	ef 85       	ldd	r30, Y+15	; 0x0f
    321a:	f8 89       	ldd	r31, Y+16	; 0x10
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	80 83       	st	Z, r24
			/* Update state object for the transition */
			*Current_state = MENU;
    3220:	e9 89       	ldd	r30, Y+17	; 0x11
    3222:	fa 89       	ldd	r31, Y+18	; 0x12
    3224:	10 82       	st	Z, r1
		}																		/*Exit the if statement*/
		break;																	/*Break the loop*/
	}																			/*Exit the loop*/
}																				/*Exit the function*/
    3226:	62 96       	adiw	r28, 0x12	; 18
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <Change_Password_state>:

void Change_Password_state(EN_FirstEntryFlag_t *Change_Password_Flag, EN_SystemStates_t *Current_state)	/*Entering Change password state function*/
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	62 97       	sbiw	r28, 0x12	; 18
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	98 8b       	std	Y+16, r25	; 0x10
    324e:	8f 87       	std	Y+15, r24	; 0x0f
    3250:	7a 8b       	std	Y+18, r23	; 0x12
    3252:	69 8b       	std	Y+17, r22	; 0x11
	/* First Entry Action */
	if(*Change_Password_Flag == FIRST_ENTRY_TRUE)								/*Check the entry flag*/
    3254:	ef 85       	ldd	r30, Y+15	; 0x0f
    3256:	f8 89       	ldd	r31, Y+16	; 0x10
    3258:	80 81       	ld	r24, Z
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	09 f0       	breq	.+2      	; 0x3260 <Change_Password_state+0x28>
    325e:	85 c0       	rjmp	.+266    	; 0x336a <Change_Password_state+0x132>
	{																			/*Entering the if statement*/
		HLCD_voidgotoXY(0, 0);													/*Set the cursor to location 0,0*/
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("Change Pass.Mode");								/*Print string on LCD*/
    3268:	89 ea       	ldi	r24, 0xA9	; 169
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
		HLCD_voidgotoXY(1, 0);													/*Set the cursor to location 1,0*/
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("Press C to Back");									/*Print string on LCD*/
    3278:	89 e9       	ldi	r24, 0x99	; 153
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	aa ef       	ldi	r26, 0xFA	; 250
    3286:	b3 e4       	ldi	r27, 0x43	; 67
    3288:	8b 87       	std	Y+11, r24	; 0x0b
    328a:	9c 87       	std	Y+12, r25	; 0x0c
    328c:	ad 87       	std	Y+13, r26	; 0x0d
    328e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3290:	6b 85       	ldd	r22, Y+11	; 0x0b
    3292:	7c 85       	ldd	r23, Y+12	; 0x0c
    3294:	8d 85       	ldd	r24, Y+13	; 0x0d
    3296:	9e 85       	ldd	r25, Y+14	; 0x0e
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	4a ef       	ldi	r20, 0xFA	; 250
    329e:	54 e4       	ldi	r21, 0x44	; 68
    32a0:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8f 83       	std	Y+7, r24	; 0x07
    32aa:	98 87       	std	Y+8, r25	; 0x08
    32ac:	a9 87       	std	Y+9, r26	; 0x09
    32ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e8       	ldi	r20, 0x80	; 128
    32be:	5f e3       	ldi	r21, 0x3F	; 63
    32c0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    32c4:	88 23       	and	r24, r24
    32c6:	2c f4       	brge	.+10     	; 0x32d2 <Change_Password_state+0x9a>
		__ticks = 1;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	9e 83       	std	Y+6, r25	; 0x06
    32ce:	8d 83       	std	Y+5, r24	; 0x05
    32d0:	3f c0       	rjmp	.+126    	; 0x3350 <Change_Password_state+0x118>
	else if (__tmp > 65535)
    32d2:	6f 81       	ldd	r22, Y+7	; 0x07
    32d4:	78 85       	ldd	r23, Y+8	; 0x08
    32d6:	89 85       	ldd	r24, Y+9	; 0x09
    32d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	3f ef       	ldi	r19, 0xFF	; 255
    32de:	4f e7       	ldi	r20, 0x7F	; 127
    32e0:	57 e4       	ldi	r21, 0x47	; 71
    32e2:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    32e6:	18 16       	cp	r1, r24
    32e8:	4c f5       	brge	.+82     	; 0x333c <Change_Password_state+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	40 e2       	ldi	r20, 0x20	; 32
    32f8:	51 e4       	ldi	r21, 0x41	; 65
    32fa:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
    3312:	0f c0       	rjmp	.+30     	; 0x3332 <Change_Password_state+0xfa>
    3314:	88 ec       	ldi	r24, 0xC8	; 200
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9c 83       	std	Y+4, r25	; 0x04
    331a:	8b 83       	std	Y+3, r24	; 0x03
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <Change_Password_state+0xe8>
    3324:	9c 83       	std	Y+4, r25	; 0x04
    3326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	9e 83       	std	Y+6, r25	; 0x06
    3330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	69 f7       	brne	.-38     	; 0x3314 <Change_Password_state+0xdc>
    333a:	14 c0       	rjmp	.+40     	; 0x3364 <Change_Password_state+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333c:	6f 81       	ldd	r22, Y+7	; 0x07
    333e:	78 85       	ldd	r23, Y+8	; 0x08
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	9a 85       	ldd	r25, Y+10	; 0x0a
    3344:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	9e 83       	std	Y+6, r25	; 0x06
    334e:	8d 83       	std	Y+5, r24	; 0x05
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	9a 81       	ldd	r25, Y+2	; 0x02
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <Change_Password_state+0x124>
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		*Change_Password_Flag = FIRST_ENTRY_FALSE;								/*Update the Change password flag*/
    3364:	ef 85       	ldd	r30, Y+15	; 0x0f
    3366:	f8 89       	ldd	r31, Y+16	; 0x10
    3368:	10 82       	st	Z, r1
	}																			/*Exit the if statement*/

	/* Within State Action */
	Change_Password();															/*Call the change password function*/
    336a:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <Change_Password>

	/* Exit Action */
	Key_value = Hkeypad_u8GetKey();												/*Read the Key pressed in Keypad*/
    336e:	0e 94 57 15 	call	0x2aae	; 0x2aae <Hkeypad_u8GetKey>
    3372:	80 93 da 01 	sts	0x01DA, r24
	while(Key_value != NO_KEY)													/*Check if there is any key is pressed*/
    3376:	80 91 da 01 	lds	r24, 0x01DA
    337a:	88 23       	and	r24, r24
    337c:	69 f0       	breq	.+26     	; 0x3398 <Change_Password_state+0x160>
	{																			/*Entering the while loop*/
		if(Key_value == 'C')													/*Check if the pressed key is C*/
    337e:	80 91 da 01 	lds	r24, 0x01DA
    3382:	83 34       	cpi	r24, 0x43	; 67
    3384:	49 f4       	brne	.+18     	; 0x3398 <Change_Password_state+0x160>
		{																		/*Entering the if statement*/
			HLCD_voidclear();													/*Clear the LCD*/
    3386:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
			/* Update the first entry flag to be true for the next entry time */
			*Change_Password_Flag = FIRST_ENTRY_TRUE;
    338a:	ef 85       	ldd	r30, Y+15	; 0x0f
    338c:	f8 89       	ldd	r31, Y+16	; 0x10
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	80 83       	st	Z, r24
			/* Update state object for the transition */
			*Current_state = MENU;
    3392:	e9 89       	ldd	r30, Y+17	; 0x11
    3394:	fa 89       	ldd	r31, Y+18	; 0x12
    3396:	10 82       	st	Z, r1
		}																		/*Exit the if statement*/
		break;																	/*Break the loop*/
	}																			/*Exit the loop*/
}																				/*Exit the function*/
    3398:	62 96       	adiw	r28, 0x12	; 18
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <Add_User_state>:

void Add_User_state(EN_FirstEntryFlag_t *Add_User_Flag, EN_SystemStates_t *Current_state)	/*Entering Add user state function*/
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	62 97       	sbiw	r28, 0x12	; 18
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	98 8b       	std	Y+16, r25	; 0x10
    33c0:	8f 87       	std	Y+15, r24	; 0x0f
    33c2:	7a 8b       	std	Y+18, r23	; 0x12
    33c4:	69 8b       	std	Y+17, r22	; 0x11
	/* First Entry Action */
	if(*Add_User_Flag == FIRST_ENTRY_TRUE)										/*Check the entry flag*/
    33c6:	ef 85       	ldd	r30, Y+15	; 0x0f
    33c8:	f8 89       	ldd	r31, Y+16	; 0x10
    33ca:	80 81       	ld	r24, Z
    33cc:	81 30       	cpi	r24, 0x01	; 1
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <Add_User_state+0x28>
    33d0:	85 c0       	rjmp	.+266    	; 0x34dc <Add_User_state+0x132>
	{																			/*Entering the if statement*/
		HLCD_voidgotoXY(0, 0);													/*Set the cursor to location 0,0*/
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("Add User Mode");									/*Print string on LCD*/
    33da:	8a eb       	ldi	r24, 0xBA	; 186
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
		HLCD_voidgotoXY(1, 0);													/*Set the cursor to location 1,0*/
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
		HLCD_voidsendString("Press C to Back");									/*Print string on LCD*/
    33ea:	89 e9       	ldi	r24, 0x99	; 153
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	aa ef       	ldi	r26, 0xFA	; 250
    33f8:	b3 e4       	ldi	r27, 0x43	; 67
    33fa:	8b 87       	std	Y+11, r24	; 0x0b
    33fc:	9c 87       	std	Y+12, r25	; 0x0c
    33fe:	ad 87       	std	Y+13, r26	; 0x0d
    3400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3402:	6b 85       	ldd	r22, Y+11	; 0x0b
    3404:	7c 85       	ldd	r23, Y+12	; 0x0c
    3406:	8d 85       	ldd	r24, Y+13	; 0x0d
    3408:	9e 85       	ldd	r25, Y+14	; 0x0e
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	4a ef       	ldi	r20, 0xFA	; 250
    3410:	54 e4       	ldi	r21, 0x44	; 68
    3412:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	8f 83       	std	Y+7, r24	; 0x07
    341c:	98 87       	std	Y+8, r25	; 0x08
    341e:	a9 87       	std	Y+9, r26	; 0x09
    3420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	5f e3       	ldi	r21, 0x3F	; 63
    3432:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    3436:	88 23       	and	r24, r24
    3438:	2c f4       	brge	.+10     	; 0x3444 <Add_User_state+0x9a>
		__ticks = 1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	3f c0       	rjmp	.+126    	; 0x34c2 <Add_User_state+0x118>
	else if (__tmp > 65535)
    3444:	6f 81       	ldd	r22, Y+7	; 0x07
    3446:	78 85       	ldd	r23, Y+8	; 0x08
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	3f ef       	ldi	r19, 0xFF	; 255
    3450:	4f e7       	ldi	r20, 0x7F	; 127
    3452:	57 e4       	ldi	r21, 0x47	; 71
    3454:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    3458:	18 16       	cp	r1, r24
    345a:	4c f5       	brge	.+82     	; 0x34ae <Add_User_state+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e2       	ldi	r20, 0x20	; 32
    346a:	51 e4       	ldi	r21, 0x41	; 65
    346c:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	9e 83       	std	Y+6, r25	; 0x06
    3482:	8d 83       	std	Y+5, r24	; 0x05
    3484:	0f c0       	rjmp	.+30     	; 0x34a4 <Add_User_state+0xfa>
    3486:	88 ec       	ldi	r24, 0xC8	; 200
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	9c 83       	std	Y+4, r25	; 0x04
    348c:	8b 83       	std	Y+3, r24	; 0x03
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <Add_User_state+0xe8>
    3496:	9c 83       	std	Y+4, r25	; 0x04
    3498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	69 f7       	brne	.-38     	; 0x3486 <Add_User_state+0xdc>
    34ac:	14 c0       	rjmp	.+40     	; 0x34d6 <Add_User_state+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ae:	6f 81       	ldd	r22, Y+7	; 0x07
    34b0:	78 85       	ldd	r23, Y+8	; 0x08
    34b2:	89 85       	ldd	r24, Y+9	; 0x09
    34b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b6:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	9a 83       	std	Y+2, r25	; 0x02
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <Add_User_state+0x124>
    34d2:	9a 83       	std	Y+2, r25	; 0x02
    34d4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		*Add_User_Flag = FIRST_ENTRY_FALSE;										/*Update the Add user flag*/
    34d6:	ef 85       	ldd	r30, Y+15	; 0x0f
    34d8:	f8 89       	ldd	r31, Y+16	; 0x10
    34da:	10 82       	st	Z, r1
	}																			/*Exit the if statement*/

	/* Within State Action */
	//Add_User();																	/*Call the add user function*/
	if(Add_User())
    34dc:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Add_User>
    34e0:	88 23       	and	r24, r24
    34e2:	49 f0       	breq	.+18     	; 0x34f6 <Add_User_state+0x14c>
	{
		HLCD_voidclear();													/*Clear the LCD*/
    34e4:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
		/* Update the first entry flag to be true for the next entry time */
		*Add_User_Flag = FIRST_ENTRY_TRUE;
    34e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    34ea:	f8 89       	ldd	r31, Y+16	; 0x10
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	80 83       	st	Z, r24
		/* Update state object for the transition */
		*Current_state = MENU;
    34f0:	e9 89       	ldd	r30, Y+17	; 0x11
    34f2:	fa 89       	ldd	r31, Y+18	; 0x12
    34f4:	10 82       	st	Z, r1
	}
	/* Exit Action */
	Key_value = Hkeypad_u8GetKey();												/*Read the Key pressed in Keypad*/
    34f6:	0e 94 57 15 	call	0x2aae	; 0x2aae <Hkeypad_u8GetKey>
    34fa:	80 93 da 01 	sts	0x01DA, r24
	while(Key_value != NO_KEY)													/*Check if there is any key is pressed*/
    34fe:	80 91 da 01 	lds	r24, 0x01DA
    3502:	88 23       	and	r24, r24
    3504:	69 f0       	breq	.+26     	; 0x3520 <Add_User_state+0x176>
	{																			/*Entering the while loop*/
		if(Key_value == 'C')													/*Check if the pressed key is C*/
    3506:	80 91 da 01 	lds	r24, 0x01DA
    350a:	83 34       	cpi	r24, 0x43	; 67
    350c:	49 f4       	brne	.+18     	; 0x3520 <Add_User_state+0x176>
		{																		/*Entering the if statement*/
			HLCD_voidclear();													/*Clear the LCD*/
    350e:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
			/* Update the first entry flag to be true for the next entry time */
			*Add_User_Flag = FIRST_ENTRY_TRUE;
    3512:	ef 85       	ldd	r30, Y+15	; 0x0f
    3514:	f8 89       	ldd	r31, Y+16	; 0x10
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	80 83       	st	Z, r24
			/* Update state object for the transition */
			*Current_state = MENU;
    351a:	e9 89       	ldd	r30, Y+17	; 0x11
    351c:	fa 89       	ldd	r31, Y+18	; 0x12
    351e:	10 82       	st	Z, r1
		}																		/*Exit the if statement*/
		break;																	/*Break the loop*/
	}																			/*Exit the loop*/
}																				/*Exit the function*/
    3520:	62 96       	adiw	r28, 0x12	; 18
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <MAP_u16Mapping>:

u16 MAP_u16Mapping(u16 x_Max, u16 x_Min, u16 y_Max, u16 y_Min, u16 y)			/*Entering Mapping function*/
{																				/*Entering the function*/
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	df 93       	push	r29
    353c:	cf 93       	push	r28
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	2c 97       	sbiw	r28, 0x0c	; 12
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	9c 83       	std	Y+4, r25	; 0x04
    3550:	8b 83       	std	Y+3, r24	; 0x03
    3552:	7e 83       	std	Y+6, r23	; 0x06
    3554:	6d 83       	std	Y+5, r22	; 0x05
    3556:	58 87       	std	Y+8, r21	; 0x08
    3558:	4f 83       	std	Y+7, r20	; 0x07
    355a:	3a 87       	std	Y+10, r19	; 0x0a
    355c:	29 87       	std	Y+9, r18	; 0x09
    355e:	1c 87       	std	Y+12, r17	; 0x0c
    3560:	0b 87       	std	Y+11, r16	; 0x0b
	u16 x;																		/*local variable*/
	x = (((u32)(x_Max - x_Min) * (y - y_Min)) / (y_Max - y_Min)) + x_Min;		/*Calculate the mapped value*/
    3562:	2b 81       	ldd	r18, Y+3	; 0x03
    3564:	3c 81       	ldd	r19, Y+4	; 0x04
    3566:	8d 81       	ldd	r24, Y+5	; 0x05
    3568:	9e 81       	ldd	r25, Y+6	; 0x06
    356a:	a9 01       	movw	r20, r18
    356c:	48 1b       	sub	r20, r24
    356e:	59 0b       	sbc	r21, r25
    3570:	ca 01       	movw	r24, r20
    3572:	7c 01       	movw	r14, r24
    3574:	00 e0       	ldi	r16, 0x00	; 0
    3576:	10 e0       	ldi	r17, 0x00	; 0
    3578:	2b 85       	ldd	r18, Y+11	; 0x0b
    357a:	3c 85       	ldd	r19, Y+12	; 0x0c
    357c:	89 85       	ldd	r24, Y+9	; 0x09
    357e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3580:	a9 01       	movw	r20, r18
    3582:	48 1b       	sub	r20, r24
    3584:	59 0b       	sbc	r21, r25
    3586:	ca 01       	movw	r24, r20
    3588:	9c 01       	movw	r18, r24
    358a:	40 e0       	ldi	r20, 0x00	; 0
    358c:	50 e0       	ldi	r21, 0x00	; 0
    358e:	c8 01       	movw	r24, r16
    3590:	b7 01       	movw	r22, r14
    3592:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <__mulsi3>
    3596:	7b 01       	movw	r14, r22
    3598:	8c 01       	movw	r16, r24
    359a:	2f 81       	ldd	r18, Y+7	; 0x07
    359c:	38 85       	ldd	r19, Y+8	; 0x08
    359e:	89 85       	ldd	r24, Y+9	; 0x09
    35a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a2:	a9 01       	movw	r20, r18
    35a4:	48 1b       	sub	r20, r24
    35a6:	59 0b       	sbc	r21, r25
    35a8:	ca 01       	movw	r24, r20
    35aa:	9c 01       	movw	r18, r24
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	c8 01       	movw	r24, r16
    35b2:	b7 01       	movw	r22, r14
    35b4:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <__udivmodsi4>
    35b8:	da 01       	movw	r26, r20
    35ba:	c9 01       	movw	r24, r18
    35bc:	9c 01       	movw	r18, r24
    35be:	8d 81       	ldd	r24, Y+5	; 0x05
    35c0:	9e 81       	ldd	r25, Y+6	; 0x06
    35c2:	82 0f       	add	r24, r18
    35c4:	93 1f       	adc	r25, r19
    35c6:	9a 83       	std	Y+2, r25	; 0x02
    35c8:	89 83       	std	Y+1, r24	; 0x01
	return x;																	/*Return the value*/
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	9a 81       	ldd	r25, Y+2	; 0x02
}																				/*Exit the function*/
    35ce:	2c 96       	adiw	r28, 0x0c	; 12
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	ff 90       	pop	r15
    35e4:	ef 90       	pop	r14
    35e6:	08 95       	ret

000035e8 <__vector_10>:

void __vector_10(void)		__attribute__((signal));
void __vector_10(void)
{
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	0f 93       	push	r16
    35f4:	1f 93       	push	r17
    35f6:	2f 93       	push	r18
    35f8:	3f 93       	push	r19
    35fa:	4f 93       	push	r20
    35fc:	5f 93       	push	r21
    35fe:	6f 93       	push	r22
    3600:	7f 93       	push	r23
    3602:	8f 93       	push	r24
    3604:	9f 93       	push	r25
    3606:	af 93       	push	r26
    3608:	bf 93       	push	r27
    360a:	ef 93       	push	r30
    360c:	ff 93       	push	r31
    360e:	df 93       	push	r29
    3610:	cf 93       	push	r28
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	6c 97       	sbiw	r28, 0x1c	; 28
    3618:	de bf       	out	0x3e, r29	; 62
    361a:	cd bf       	out	0x3d, r28	; 61
	static u16 counter;
	counter++;
    361c:	80 91 84 01 	lds	r24, 0x0184
    3620:	90 91 85 01 	lds	r25, 0x0185
    3624:	01 96       	adiw	r24, 0x01	; 1
    3626:	90 93 85 01 	sts	0x0185, r25
    362a:	80 93 84 01 	sts	0x0184, r24
	if(counter == 4000)
    362e:	80 91 84 01 	lds	r24, 0x0184
    3632:	90 91 85 01 	lds	r25, 0x0185
    3636:	2f e0       	ldi	r18, 0x0F	; 15
    3638:	80 3a       	cpi	r24, 0xA0	; 160
    363a:	92 07       	cpc	r25, r18
    363c:	09 f0       	breq	.+2      	; 0x3640 <__vector_10+0x58>
    363e:	aa c0       	rjmp	.+340    	; 0x3794 <__vector_10+0x1ac>
	{
		SPI_u8Transceiver(1);
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	0e 94 b9 09 	call	0x1372	; 0x1372 <SPI_u8Transceiver>
		//reading from LM35
		MADC_LM35_u16Reading = MADC_u16GetValue(ADC_CHANNEL0);
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <MADC_u16GetValue>
    364c:	90 93 d8 01 	sts	0x01D8, r25
    3650:	80 93 d7 01 	sts	0x01D7, r24
		MilliVolt = ((u32)MADC_LM35_u16Reading * 5000UL)/1024;
    3654:	80 91 d7 01 	lds	r24, 0x01D7
    3658:	90 91 d8 01 	lds	r25, 0x01D8
    365c:	cc 01       	movw	r24, r24
    365e:	a0 e0       	ldi	r26, 0x00	; 0
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	28 e8       	ldi	r18, 0x88	; 136
    3664:	33 e1       	ldi	r19, 0x13	; 19
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	bc 01       	movw	r22, r24
    366c:	cd 01       	movw	r24, r26
    366e:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <__mulsi3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	07 2e       	mov	r0, r23
    3678:	7a e0       	ldi	r23, 0x0A	; 10
    367a:	b6 95       	lsr	r27
    367c:	a7 95       	ror	r26
    367e:	97 95       	ror	r25
    3680:	87 95       	ror	r24
    3682:	7a 95       	dec	r23
    3684:	d1 f7       	brne	.-12     	; 0x367a <__vector_10+0x92>
    3686:	70 2d       	mov	r23, r0
    3688:	90 93 81 01 	sts	0x0181, r25
    368c:	80 93 80 01 	sts	0x0180, r24
		Temperature = MilliVolt/10;
    3690:	80 91 80 01 	lds	r24, 0x0180
    3694:	90 91 81 01 	lds	r25, 0x0181
    3698:	2a e0       	ldi	r18, 0x0A	; 10
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	b9 01       	movw	r22, r18
    369e:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__udivmodhi4>
    36a2:	cb 01       	movw	r24, r22
    36a4:	80 93 82 01 	sts	0x0182, r24
		SPI_u8Transceiver(Temperature);
    36a8:	80 91 82 01 	lds	r24, 0x0182
    36ac:	0e 94 b9 09 	call	0x1372	; 0x1372 <SPI_u8Transceiver>
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	a8 e4       	ldi	r26, 0x48	; 72
    36b6:	b2 e4       	ldi	r27, 0x42	; 66
    36b8:	89 8f       	std	Y+25, r24	; 0x19
    36ba:	9a 8f       	std	Y+26, r25	; 0x1a
    36bc:	ab 8f       	std	Y+27, r26	; 0x1b
    36be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c0:	69 8d       	ldd	r22, Y+25	; 0x19
    36c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a ef       	ldi	r20, 0xFA	; 250
    36ce:	54 e4       	ldi	r21, 0x44	; 68
    36d0:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8d 8b       	std	Y+21, r24	; 0x15
    36da:	9e 8b       	std	Y+22, r25	; 0x16
    36dc:	af 8b       	std	Y+23, r26	; 0x17
    36de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36e0:	6d 89       	ldd	r22, Y+21	; 0x15
    36e2:	7e 89       	ldd	r23, Y+22	; 0x16
    36e4:	8f 89       	ldd	r24, Y+23	; 0x17
    36e6:	98 8d       	ldd	r25, Y+24	; 0x18
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e8       	ldi	r20, 0x80	; 128
    36ee:	5f e3       	ldi	r21, 0x3F	; 63
    36f0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    36f4:	88 23       	and	r24, r24
    36f6:	2c f4       	brge	.+10     	; 0x3702 <__vector_10+0x11a>
		__ticks = 1;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9c 8b       	std	Y+20, r25	; 0x14
    36fe:	8b 8b       	std	Y+19, r24	; 0x13
    3700:	3f c0       	rjmp	.+126    	; 0x3780 <__vector_10+0x198>
	else if (__tmp > 65535)
    3702:	6d 89       	ldd	r22, Y+21	; 0x15
    3704:	7e 89       	ldd	r23, Y+22	; 0x16
    3706:	8f 89       	ldd	r24, Y+23	; 0x17
    3708:	98 8d       	ldd	r25, Y+24	; 0x18
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	3f ef       	ldi	r19, 0xFF	; 255
    370e:	4f e7       	ldi	r20, 0x7F	; 127
    3710:	57 e4       	ldi	r21, 0x47	; 71
    3712:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    3716:	18 16       	cp	r1, r24
    3718:	4c f5       	brge	.+82     	; 0x376c <__vector_10+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371a:	69 8d       	ldd	r22, Y+25	; 0x19
    371c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    371e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e2       	ldi	r20, 0x20	; 32
    3728:	51 e4       	ldi	r21, 0x41	; 65
    372a:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9c 8b       	std	Y+20, r25	; 0x14
    3740:	8b 8b       	std	Y+19, r24	; 0x13
    3742:	0f c0       	rjmp	.+30     	; 0x3762 <__vector_10+0x17a>
    3744:	88 ec       	ldi	r24, 0xC8	; 200
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	9a 8b       	std	Y+18, r25	; 0x12
    374a:	89 8b       	std	Y+17, r24	; 0x11
    374c:	89 89       	ldd	r24, Y+17	; 0x11
    374e:	9a 89       	ldd	r25, Y+18	; 0x12
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <__vector_10+0x168>
    3754:	9a 8b       	std	Y+18, r25	; 0x12
    3756:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3758:	8b 89       	ldd	r24, Y+19	; 0x13
    375a:	9c 89       	ldd	r25, Y+20	; 0x14
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	9c 8b       	std	Y+20, r25	; 0x14
    3760:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	8b 89       	ldd	r24, Y+19	; 0x13
    3764:	9c 89       	ldd	r25, Y+20	; 0x14
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	69 f7       	brne	.-38     	; 0x3744 <__vector_10+0x15c>
    376a:	14 c0       	rjmp	.+40     	; 0x3794 <__vector_10+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    376c:	6d 89       	ldd	r22, Y+21	; 0x15
    376e:	7e 89       	ldd	r23, Y+22	; 0x16
    3770:	8f 89       	ldd	r24, Y+23	; 0x17
    3772:	98 8d       	ldd	r25, Y+24	; 0x18
    3774:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9c 8b       	std	Y+20, r25	; 0x14
    377e:	8b 8b       	std	Y+19, r24	; 0x13
    3780:	8b 89       	ldd	r24, Y+19	; 0x13
    3782:	9c 89       	ldd	r25, Y+20	; 0x14
    3784:	98 8b       	std	Y+16, r25	; 0x10
    3786:	8f 87       	std	Y+15, r24	; 0x0f
    3788:	8f 85       	ldd	r24, Y+15	; 0x0f
    378a:	98 89       	ldd	r25, Y+16	; 0x10
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <__vector_10+0x1a4>
    3790:	98 8b       	std	Y+16, r25	; 0x10
    3792:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
	}
	if(counter == 8000)
    3794:	80 91 84 01 	lds	r24, 0x0184
    3798:	90 91 85 01 	lds	r25, 0x0185
    379c:	2f e1       	ldi	r18, 0x1F	; 31
    379e:	80 34       	cpi	r24, 0x40	; 64
    37a0:	92 07       	cpc	r25, r18
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <__vector_10+0x1be>
    37a4:	95 c0       	rjmp	.+298    	; 0x38d0 <__vector_10+0x2e8>
	{
		SPI_u8Transceiver(2);
    37a6:	82 e0       	ldi	r24, 0x02	; 2
    37a8:	0e 94 b9 09 	call	0x1372	; 0x1372 <SPI_u8Transceiver>
		//reading from LDR to control leds
		MADC_LDR_u16Reading = MADC_u16GetValue(ADC_CHANNEL1);
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <MADC_u16GetValue>
    37b2:	90 93 dc 01 	sts	0x01DC, r25
    37b6:	80 93 db 01 	sts	0x01DB, r24
		ADC_u8Mapped = MAP_u16Mapping(255, 0,1023, 0, MADC_LDR_u16Reading);
    37ba:	e0 91 db 01 	lds	r30, 0x01DB
    37be:	f0 91 dc 01 	lds	r31, 0x01DC
    37c2:	8f ef       	ldi	r24, 0xFF	; 255
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	4f ef       	ldi	r20, 0xFF	; 255
    37cc:	53 e0       	ldi	r21, 0x03	; 3
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	8f 01       	movw	r16, r30
    37d4:	0e 94 99 1a 	call	0x3532	; 0x3532 <MAP_u16Mapping>
    37d8:	80 93 d9 01 	sts	0x01D9, r24
		SPI_u8Transceiver(ADC_u8Mapped);
    37dc:	80 91 d9 01 	lds	r24, 0x01D9
    37e0:	0e 94 b9 09 	call	0x1372	; 0x1372 <SPI_u8Transceiver>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a8 e4       	ldi	r26, 0x48	; 72
    37ea:	b2 e4       	ldi	r27, 0x42	; 66
    37ec:	8b 87       	std	Y+11, r24	; 0x0b
    37ee:	9c 87       	std	Y+12, r25	; 0x0c
    37f0:	ad 87       	std	Y+13, r26	; 0x0d
    37f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	4a ef       	ldi	r20, 0xFA	; 250
    3802:	54 e4       	ldi	r21, 0x44	; 68
    3804:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	8f 83       	std	Y+7, r24	; 0x07
    380e:	98 87       	std	Y+8, r25	; 0x08
    3810:	a9 87       	std	Y+9, r26	; 0x09
    3812:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3814:	6f 81       	ldd	r22, Y+7	; 0x07
    3816:	78 85       	ldd	r23, Y+8	; 0x08
    3818:	89 85       	ldd	r24, Y+9	; 0x09
    381a:	9a 85       	ldd	r25, Y+10	; 0x0a
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	2c f4       	brge	.+10     	; 0x3836 <__vector_10+0x24e>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	9e 83       	std	Y+6, r25	; 0x06
    3832:	8d 83       	std	Y+5, r24	; 0x05
    3834:	3f c0       	rjmp	.+126    	; 0x38b4 <__vector_10+0x2cc>
	else if (__tmp > 65535)
    3836:	6f 81       	ldd	r22, Y+7	; 0x07
    3838:	78 85       	ldd	r23, Y+8	; 0x08
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	9a 85       	ldd	r25, Y+10	; 0x0a
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	4f e7       	ldi	r20, 0x7F	; 127
    3844:	57 e4       	ldi	r21, 0x47	; 71
    3846:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    384a:	18 16       	cp	r1, r24
    384c:	4c f5       	brge	.+82     	; 0x38a0 <__vector_10+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3850:	7c 85       	ldd	r23, Y+12	; 0x0c
    3852:	8d 85       	ldd	r24, Y+13	; 0x0d
    3854:	9e 85       	ldd	r25, Y+14	; 0x0e
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e2       	ldi	r20, 0x20	; 32
    385c:	51 e4       	ldi	r21, 0x41	; 65
    385e:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9e 83       	std	Y+6, r25	; 0x06
    3874:	8d 83       	std	Y+5, r24	; 0x05
    3876:	0f c0       	rjmp	.+30     	; 0x3896 <__vector_10+0x2ae>
    3878:	88 ec       	ldi	r24, 0xC8	; 200
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	9c 83       	std	Y+4, r25	; 0x04
    387e:	8b 83       	std	Y+3, r24	; 0x03
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	9c 81       	ldd	r25, Y+4	; 0x04
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	f1 f7       	brne	.-4      	; 0x3884 <__vector_10+0x29c>
    3888:	9c 83       	std	Y+4, r25	; 0x04
    388a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388c:	8d 81       	ldd	r24, Y+5	; 0x05
    388e:	9e 81       	ldd	r25, Y+6	; 0x06
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	69 f7       	brne	.-38     	; 0x3878 <__vector_10+0x290>
    389e:	14 c0       	rjmp	.+40     	; 0x38c8 <__vector_10+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a0:	6f 81       	ldd	r22, Y+7	; 0x07
    38a2:	78 85       	ldd	r23, Y+8	; 0x08
    38a4:	89 85       	ldd	r24, Y+9	; 0x09
    38a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a8:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	9e 83       	std	Y+6, r25	; 0x06
    38b2:	8d 83       	std	Y+5, r24	; 0x05
    38b4:	8d 81       	ldd	r24, Y+5	; 0x05
    38b6:	9e 81       	ldd	r25, Y+6	; 0x06
    38b8:	9a 83       	std	Y+2, r25	; 0x02
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <__vector_10+0x2d8>
    38c4:	9a 83       	std	Y+2, r25	; 0x02
    38c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		counter = 0;
    38c8:	10 92 85 01 	sts	0x0185, r1
    38cc:	10 92 84 01 	sts	0x0184, r1
	}
}
    38d0:	6c 96       	adiw	r28, 0x1c	; 28
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	ff 91       	pop	r31
    38dc:	ef 91       	pop	r30
    38de:	bf 91       	pop	r27
    38e0:	af 91       	pop	r26
    38e2:	9f 91       	pop	r25
    38e4:	8f 91       	pop	r24
    38e6:	7f 91       	pop	r23
    38e8:	6f 91       	pop	r22
    38ea:	5f 91       	pop	r21
    38ec:	4f 91       	pop	r20
    38ee:	3f 91       	pop	r19
    38f0:	2f 91       	pop	r18
    38f2:	1f 91       	pop	r17
    38f4:	0f 91       	pop	r16
    38f6:	0f 90       	pop	r0
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	0f 90       	pop	r0
    38fc:	1f 90       	pop	r1
    38fe:	18 95       	reti

00003900 <__vector_13>:

void __vector_13(void)	__attribute__((signal));	//Neglect the linker optimization
void __vector_13(void)
{
    3900:	1f 92       	push	r1
    3902:	0f 92       	push	r0
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	0f 92       	push	r0
    3908:	11 24       	eor	r1, r1
    390a:	2f 93       	push	r18
    390c:	3f 93       	push	r19
    390e:	4f 93       	push	r20
    3910:	5f 93       	push	r21
    3912:	6f 93       	push	r22
    3914:	7f 93       	push	r23
    3916:	8f 93       	push	r24
    3918:	9f 93       	push	r25
    391a:	af 93       	push	r26
    391c:	bf 93       	push	r27
    391e:	ef 93       	push	r30
    3920:	ff 93       	push	r31
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	6c 97       	sbiw	r28, 0x1c	; 28
    392c:	de bf       	out	0x3e, r29	; 62
    392e:	cd bf       	out	0x3d, r28	; 61
	G_u8RecivedData = UDR;
    3930:	ec e2       	ldi	r30, 0x2C	; 44
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	80 93 83 01 	sts	0x0183, r24
	SPI_u8Transceiver(3);
    393a:	83 e0       	ldi	r24, 0x03	; 3
    393c:	0e 94 b9 09 	call	0x1372	; 0x1372 <SPI_u8Transceiver>
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	a0 e2       	ldi	r26, 0x20	; 32
    3946:	b1 e4       	ldi	r27, 0x41	; 65
    3948:	89 8f       	std	Y+25, r24	; 0x19
    394a:	9a 8f       	std	Y+26, r25	; 0x1a
    394c:	ab 8f       	std	Y+27, r26	; 0x1b
    394e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3950:	69 8d       	ldd	r22, Y+25	; 0x19
    3952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	4a ef       	ldi	r20, 0xFA	; 250
    395e:	54 e4       	ldi	r21, 0x44	; 68
    3960:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	8d 8b       	std	Y+21, r24	; 0x15
    396a:	9e 8b       	std	Y+22, r25	; 0x16
    396c:	af 8b       	std	Y+23, r26	; 0x17
    396e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3970:	6d 89       	ldd	r22, Y+21	; 0x15
    3972:	7e 89       	ldd	r23, Y+22	; 0x16
    3974:	8f 89       	ldd	r24, Y+23	; 0x17
    3976:	98 8d       	ldd	r25, Y+24	; 0x18
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	40 e8       	ldi	r20, 0x80	; 128
    397e:	5f e3       	ldi	r21, 0x3F	; 63
    3980:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    3984:	88 23       	and	r24, r24
    3986:	2c f4       	brge	.+10     	; 0x3992 <__vector_13+0x92>
		__ticks = 1;
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	9c 8b       	std	Y+20, r25	; 0x14
    398e:	8b 8b       	std	Y+19, r24	; 0x13
    3990:	3f c0       	rjmp	.+126    	; 0x3a10 <__vector_13+0x110>
	else if (__tmp > 65535)
    3992:	6d 89       	ldd	r22, Y+21	; 0x15
    3994:	7e 89       	ldd	r23, Y+22	; 0x16
    3996:	8f 89       	ldd	r24, Y+23	; 0x17
    3998:	98 8d       	ldd	r25, Y+24	; 0x18
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	3f ef       	ldi	r19, 0xFF	; 255
    399e:	4f e7       	ldi	r20, 0x7F	; 127
    39a0:	57 e4       	ldi	r21, 0x47	; 71
    39a2:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    39a6:	18 16       	cp	r1, r24
    39a8:	4c f5       	brge	.+82     	; 0x39fc <__vector_13+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39aa:	69 8d       	ldd	r22, Y+25	; 0x19
    39ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e2       	ldi	r20, 0x20	; 32
    39b8:	51 e4       	ldi	r21, 0x41	; 65
    39ba:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	bc 01       	movw	r22, r24
    39c4:	cd 01       	movw	r24, r26
    39c6:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	9c 8b       	std	Y+20, r25	; 0x14
    39d0:	8b 8b       	std	Y+19, r24	; 0x13
    39d2:	0f c0       	rjmp	.+30     	; 0x39f2 <__vector_13+0xf2>
    39d4:	88 ec       	ldi	r24, 0xC8	; 200
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	9a 8b       	std	Y+18, r25	; 0x12
    39da:	89 8b       	std	Y+17, r24	; 0x11
    39dc:	89 89       	ldd	r24, Y+17	; 0x11
    39de:	9a 89       	ldd	r25, Y+18	; 0x12
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	f1 f7       	brne	.-4      	; 0x39e0 <__vector_13+0xe0>
    39e4:	9a 8b       	std	Y+18, r25	; 0x12
    39e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e8:	8b 89       	ldd	r24, Y+19	; 0x13
    39ea:	9c 89       	ldd	r25, Y+20	; 0x14
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	9c 8b       	std	Y+20, r25	; 0x14
    39f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f2:	8b 89       	ldd	r24, Y+19	; 0x13
    39f4:	9c 89       	ldd	r25, Y+20	; 0x14
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	69 f7       	brne	.-38     	; 0x39d4 <__vector_13+0xd4>
    39fa:	14 c0       	rjmp	.+40     	; 0x3a24 <__vector_13+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fc:	6d 89       	ldd	r22, Y+21	; 0x15
    39fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3a00:	8f 89       	ldd	r24, Y+23	; 0x17
    3a02:	98 8d       	ldd	r25, Y+24	; 0x18
    3a04:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	9c 8b       	std	Y+20, r25	; 0x14
    3a0e:	8b 8b       	std	Y+19, r24	; 0x13
    3a10:	8b 89       	ldd	r24, Y+19	; 0x13
    3a12:	9c 89       	ldd	r25, Y+20	; 0x14
    3a14:	98 8b       	std	Y+16, r25	; 0x10
    3a16:	8f 87       	std	Y+15, r24	; 0x0f
    3a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a1a:	98 89       	ldd	r25, Y+16	; 0x10
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <__vector_13+0x11c>
    3a20:	98 8b       	std	Y+16, r25	; 0x10
    3a22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	SPI_u8Transceiver(G_u8RecivedData);
    3a24:	80 91 83 01 	lds	r24, 0x0183
    3a28:	0e 94 b9 09 	call	0x1372	; 0x1372 <SPI_u8Transceiver>
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	a8 e4       	ldi	r26, 0x48	; 72
    3a32:	b2 e4       	ldi	r27, 0x42	; 66
    3a34:	8b 87       	std	Y+11, r24	; 0x0b
    3a36:	9c 87       	std	Y+12, r25	; 0x0c
    3a38:	ad 87       	std	Y+13, r26	; 0x0d
    3a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	4a ef       	ldi	r20, 0xFA	; 250
    3a4a:	54 e4       	ldi	r21, 0x44	; 68
    3a4c:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	8f 83       	std	Y+7, r24	; 0x07
    3a56:	98 87       	std	Y+8, r25	; 0x08
    3a58:	a9 87       	std	Y+9, r26	; 0x09
    3a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5e:	78 85       	ldd	r23, Y+8	; 0x08
    3a60:	89 85       	ldd	r24, Y+9	; 0x09
    3a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e8       	ldi	r20, 0x80	; 128
    3a6a:	5f e3       	ldi	r21, 0x3F	; 63
    3a6c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    3a70:	88 23       	and	r24, r24
    3a72:	2c f4       	brge	.+10     	; 0x3a7e <__vector_13+0x17e>
		__ticks = 1;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9e 83       	std	Y+6, r25	; 0x06
    3a7a:	8d 83       	std	Y+5, r24	; 0x05
    3a7c:	3f c0       	rjmp	.+126    	; 0x3afc <__vector_13+0x1fc>
	else if (__tmp > 65535)
    3a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a80:	78 85       	ldd	r23, Y+8	; 0x08
    3a82:	89 85       	ldd	r24, Y+9	; 0x09
    3a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	3f ef       	ldi	r19, 0xFF	; 255
    3a8a:	4f e7       	ldi	r20, 0x7F	; 127
    3a8c:	57 e4       	ldi	r21, 0x47	; 71
    3a8e:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    3a92:	18 16       	cp	r1, r24
    3a94:	4c f5       	brge	.+82     	; 0x3ae8 <__vector_13+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	40 e2       	ldi	r20, 0x20	; 32
    3aa4:	51 e4       	ldi	r21, 0x41	; 65
    3aa6:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	bc 01       	movw	r22, r24
    3ab0:	cd 01       	movw	r24, r26
    3ab2:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	9e 83       	std	Y+6, r25	; 0x06
    3abc:	8d 83       	std	Y+5, r24	; 0x05
    3abe:	0f c0       	rjmp	.+30     	; 0x3ade <__vector_13+0x1de>
    3ac0:	88 ec       	ldi	r24, 0xC8	; 200
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	9c 83       	std	Y+4, r25	; 0x04
    3ac6:	8b 83       	std	Y+3, r24	; 0x03
    3ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aca:	9c 81       	ldd	r25, Y+4	; 0x04
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	f1 f7       	brne	.-4      	; 0x3acc <__vector_13+0x1cc>
    3ad0:	9c 83       	std	Y+4, r25	; 0x04
    3ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	9e 83       	std	Y+6, r25	; 0x06
    3adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ade:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae2:	00 97       	sbiw	r24, 0x00	; 0
    3ae4:	69 f7       	brne	.-38     	; 0x3ac0 <__vector_13+0x1c0>
    3ae6:	14 c0       	rjmp	.+40     	; 0x3b10 <__vector_13+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aea:	78 85       	ldd	r23, Y+8	; 0x08
    3aec:	89 85       	ldd	r24, Y+9	; 0x09
    3aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af0:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	9e 83       	std	Y+6, r25	; 0x06
    3afa:	8d 83       	std	Y+5, r24	; 0x05
    3afc:	8d 81       	ldd	r24, Y+5	; 0x05
    3afe:	9e 81       	ldd	r25, Y+6	; 0x06
    3b00:	9a 83       	std	Y+2, r25	; 0x02
    3b02:	89 83       	std	Y+1, r24	; 0x01
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	9a 81       	ldd	r25, Y+2	; 0x02
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <__vector_13+0x208>
    3b0c:	9a 83       	std	Y+2, r25	; 0x02
    3b0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    3b10:	6c 96       	adiw	r28, 0x1c	; 28
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	ff 91       	pop	r31
    3b1c:	ef 91       	pop	r30
    3b1e:	bf 91       	pop	r27
    3b20:	af 91       	pop	r26
    3b22:	9f 91       	pop	r25
    3b24:	8f 91       	pop	r24
    3b26:	7f 91       	pop	r23
    3b28:	6f 91       	pop	r22
    3b2a:	5f 91       	pop	r21
    3b2c:	4f 91       	pop	r20
    3b2e:	3f 91       	pop	r19
    3b30:	2f 91       	pop	r18
    3b32:	0f 90       	pop	r0
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	0f 90       	pop	r0
    3b38:	1f 90       	pop	r1
    3b3a:	18 95       	reti

00003b3c <Init_Default_ID>:
 * Location 9 has '\0'
 * Location 10 has the available bit
 * */

void Init_Default_ID(void)														/*Create a default id used for adding new user*/
{
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
	users[DEFAULT_USER_INDEX].address = DEFAULT_USER_ADDRESS;					/*Define it's address in the first index of array*/
    3b44:	10 92 df 01 	sts	0x01DF, r1
    3b48:	10 92 de 01 	sts	0x01DE, r1
	users[DEFAULT_USER_INDEX].availability = not_available;						/*Make it not available for adding user in this location*/
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	80 93 e0 01 	sts	0x01E0, r24
	Store_ID(DEFAULT_USER_INDEX, "1234");										/*Store the default id 1234 in EEPROM*/
    3b52:	28 ec       	ldi	r18, 0xC8	; 200
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	b9 01       	movw	r22, r18
    3b5a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <Store_ID>
	Store_Password(DEFAULT_USER_INDEX, "1234");									/*Store the default password 1234 in EEPROM*/
    3b5e:	28 ec       	ldi	r18, 0xC8	; 200
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	b9 01       	movw	r22, r18
    3b66:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <Store_Password>
	EEPROM_voidWrite(not_available, DEFAULT_USER_ADDRESS + 10);					/*Adding available bit in the address + 9*/
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	6a e0       	ldi	r22, 0x0A	; 10
    3b6e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
}
    3b72:	cf 91       	pop	r28
    3b74:	df 91       	pop	r29
    3b76:	08 95       	ret

00003b78 <Init_Users>:

void Init_Users(void)															/*Store each user address in EEPROM*/
{
    3b78:	df 93       	push	r29
    3b7a:	cf 93       	push	r28
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
	for(iterator = 1; iterator<MAX_N_OF_USERS; iterator++)						/*Loop on each user*/
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	80 93 dd 01 	sts	0x01DD, r24
    3b86:	36 c0       	rjmp	.+108    	; 0x3bf4 <Init_Users+0x7c>
	{
		users[iterator].address = iterator * 10;								/*Give each user a 10 memory locations*/
    3b88:	80 91 dd 01 	lds	r24, 0x01DD
    3b8c:	48 2f       	mov	r20, r24
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	80 91 dd 01 	lds	r24, 0x01DD
    3b94:	88 2f       	mov	r24, r24
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	9c 01       	movw	r18, r24
    3b9a:	22 0f       	add	r18, r18
    3b9c:	33 1f       	adc	r19, r19
    3b9e:	c9 01       	movw	r24, r18
    3ba0:	88 0f       	add	r24, r24
    3ba2:	99 1f       	adc	r25, r25
    3ba4:	88 0f       	add	r24, r24
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	82 0f       	add	r24, r18
    3baa:	93 1f       	adc	r25, r19
    3bac:	9c 01       	movw	r18, r24
    3bae:	ca 01       	movw	r24, r20
    3bb0:	88 0f       	add	r24, r24
    3bb2:	99 1f       	adc	r25, r25
    3bb4:	84 0f       	add	r24, r20
    3bb6:	95 1f       	adc	r25, r21
    3bb8:	fc 01       	movw	r30, r24
    3bba:	e2 52       	subi	r30, 0x22	; 34
    3bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3bbe:	31 83       	std	Z+1, r19	; 0x01
    3bc0:	20 83       	st	Z, r18
		EEPROM_voidWrite(available, users[iterator].address + 10);				/*Adding available bit in the address + 10*/
    3bc2:	80 91 dd 01 	lds	r24, 0x01DD
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	c9 01       	movw	r24, r18
    3bcc:	88 0f       	add	r24, r24
    3bce:	99 1f       	adc	r25, r25
    3bd0:	82 0f       	add	r24, r18
    3bd2:	93 1f       	adc	r25, r19
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	e2 52       	subi	r30, 0x22	; 34
    3bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bda:	80 81       	ld	r24, Z
    3bdc:	91 81       	ldd	r25, Z+1	; 0x01
    3bde:	98 2f       	mov	r25, r24
    3be0:	96 5f       	subi	r25, 0xF6	; 246
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	69 2f       	mov	r22, r25
    3be6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
	EEPROM_voidWrite(not_available, DEFAULT_USER_ADDRESS + 10);					/*Adding available bit in the address + 9*/
}

void Init_Users(void)															/*Store each user address in EEPROM*/
{
	for(iterator = 1; iterator<MAX_N_OF_USERS; iterator++)						/*Loop on each user*/
    3bea:	80 91 dd 01 	lds	r24, 0x01DD
    3bee:	8f 5f       	subi	r24, 0xFF	; 255
    3bf0:	80 93 dd 01 	sts	0x01DD, r24
    3bf4:	80 91 dd 01 	lds	r24, 0x01DD
    3bf8:	8a 30       	cpi	r24, 0x0A	; 10
    3bfa:	30 f2       	brcs	.-116    	; 0x3b88 <Init_Users+0x10>
	{
		users[iterator].address = iterator * 10;								/*Give each user a 10 memory locations*/
		EEPROM_voidWrite(available, users[iterator].address + 10);				/*Adding available bit in the address + 10*/
	}
}
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	08 95       	ret

00003c02 <Store_ID>:

void Store_ID(u8 user_index, char *user_ID)										/*Store the ID in EEPROM*/
{
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	df 93       	push	r29
    3c08:	cf 93       	push	r28
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <Store_ID+0xa>
    3c0c:	0f 92       	push	r0
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	89 83       	std	Y+1, r24	; 0x01
    3c14:	7b 83       	std	Y+3, r23	; 0x03
    3c16:	6a 83       	std	Y+2, r22	; 0x02
	for(iterator = 0; iterator<strlen(user_ID); iterator++)						/*Loop on the size of ID*/
    3c18:	10 92 dd 01 	sts	0x01DD, r1
    3c1c:	24 c0       	rjmp	.+72     	; 0x3c66 <Store_ID+0x64>
	{
		EEPROM_voidWrite(user_ID[iterator], users[user_index].address + iterator);	/*Write each number of ID in the desired location in EEPROM*/
    3c1e:	80 91 dd 01 	lds	r24, 0x01DD
    3c22:	28 2f       	mov	r18, r24
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	8a 81       	ldd	r24, Y+2	; 0x02
    3c28:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	e2 0f       	add	r30, r18
    3c2e:	f3 1f       	adc	r31, r19
    3c30:	40 81       	ld	r20, Z
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	28 2f       	mov	r18, r24
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	c9 01       	movw	r24, r18
    3c3a:	88 0f       	add	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	82 0f       	add	r24, r18
    3c40:	93 1f       	adc	r25, r19
    3c42:	fc 01       	movw	r30, r24
    3c44:	e2 52       	subi	r30, 0x22	; 34
    3c46:	fe 4f       	sbci	r31, 0xFE	; 254
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	98 2f       	mov	r25, r24
    3c4e:	80 91 dd 01 	lds	r24, 0x01DD
    3c52:	98 0f       	add	r25, r24
    3c54:	84 2f       	mov	r24, r20
    3c56:	69 2f       	mov	r22, r25
    3c58:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
	}
}

void Store_ID(u8 user_index, char *user_ID)										/*Store the ID in EEPROM*/
{
	for(iterator = 0; iterator<strlen(user_ID); iterator++)						/*Loop on the size of ID*/
    3c5c:	80 91 dd 01 	lds	r24, 0x01DD
    3c60:	8f 5f       	subi	r24, 0xFF	; 255
    3c62:	80 93 dd 01 	sts	0x01DD, r24
    3c66:	80 91 dd 01 	lds	r24, 0x01DD
    3c6a:	08 2f       	mov	r16, r24
    3c6c:	10 e0       	ldi	r17, 0x00	; 0
    3c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c70:	9b 81       	ldd	r25, Y+3	; 0x03
    3c72:	0e 94 9d 07 	call	0xf3a	; 0xf3a <strlen>
    3c76:	08 17       	cp	r16, r24
    3c78:	19 07       	cpc	r17, r25
    3c7a:	88 f2       	brcs	.-94     	; 0x3c1e <Store_ID+0x1c>
	{
		EEPROM_voidWrite(user_ID[iterator], users[user_index].address + iterator);	/*Write each number of ID in the desired location in EEPROM*/
	}
	EEPROM_voidWrite('\0', users[user_index].address + iterator);				/*Add NULL after the ID*/
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	28 2f       	mov	r18, r24
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	c9 01       	movw	r24, r18
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	82 0f       	add	r24, r18
    3c8a:	93 1f       	adc	r25, r19
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	e2 52       	subi	r30, 0x22	; 34
    3c90:	fe 4f       	sbci	r31, 0xFE	; 254
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	98 2f       	mov	r25, r24
    3c98:	80 91 dd 01 	lds	r24, 0x01DD
    3c9c:	98 0f       	add	r25, r24
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	69 2f       	mov	r22, r25
    3ca2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
}
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	cf 91       	pop	r28
    3cae:	df 91       	pop	r29
    3cb0:	1f 91       	pop	r17
    3cb2:	0f 91       	pop	r16
    3cb4:	08 95       	ret

00003cb6 <Store_Password>:

void Store_Password(u8 user_index, char *password)								/*Store the Password in EEPROM*/
{
    3cb6:	0f 93       	push	r16
    3cb8:	1f 93       	push	r17
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <Store_Password+0xa>
    3cc0:	0f 92       	push	r0
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    3cc8:	7b 83       	std	Y+3, r23	; 0x03
    3cca:	6a 83       	std	Y+2, r22	; 0x02
	for(iterator = 0; iterator<strlen(password); iterator++)					/*Loop on the size of password*/
    3ccc:	10 92 dd 01 	sts	0x01DD, r1
    3cd0:	26 c0       	rjmp	.+76     	; 0x3d1e <Store_Password+0x68>
	{
		EEPROM_voidWrite(password[iterator], users[user_index].address + 5 + iterator);	/*Write the password in the desired location in EEPROM*/
    3cd2:	80 91 dd 01 	lds	r24, 0x01DD
    3cd6:	28 2f       	mov	r18, r24
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	8a 81       	ldd	r24, Y+2	; 0x02
    3cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cde:	fc 01       	movw	r30, r24
    3ce0:	e2 0f       	add	r30, r18
    3ce2:	f3 1f       	adc	r31, r19
    3ce4:	40 81       	ld	r20, Z
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	28 2f       	mov	r18, r24
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	c9 01       	movw	r24, r18
    3cee:	88 0f       	add	r24, r24
    3cf0:	99 1f       	adc	r25, r25
    3cf2:	82 0f       	add	r24, r18
    3cf4:	93 1f       	adc	r25, r19
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	e2 52       	subi	r30, 0x22	; 34
    3cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    3cfc:	80 81       	ld	r24, Z
    3cfe:	91 81       	ldd	r25, Z+1	; 0x01
    3d00:	98 2f       	mov	r25, r24
    3d02:	80 91 dd 01 	lds	r24, 0x01DD
    3d06:	89 0f       	add	r24, r25
    3d08:	98 2f       	mov	r25, r24
    3d0a:	9b 5f       	subi	r25, 0xFB	; 251
    3d0c:	84 2f       	mov	r24, r20
    3d0e:	69 2f       	mov	r22, r25
    3d10:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
	EEPROM_voidWrite('\0', users[user_index].address + iterator);				/*Add NULL after the ID*/
}

void Store_Password(u8 user_index, char *password)								/*Store the Password in EEPROM*/
{
	for(iterator = 0; iterator<strlen(password); iterator++)					/*Loop on the size of password*/
    3d14:	80 91 dd 01 	lds	r24, 0x01DD
    3d18:	8f 5f       	subi	r24, 0xFF	; 255
    3d1a:	80 93 dd 01 	sts	0x01DD, r24
    3d1e:	80 91 dd 01 	lds	r24, 0x01DD
    3d22:	08 2f       	mov	r16, r24
    3d24:	10 e0       	ldi	r17, 0x00	; 0
    3d26:	8a 81       	ldd	r24, Y+2	; 0x02
    3d28:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <strlen>
    3d2e:	08 17       	cp	r16, r24
    3d30:	19 07       	cpc	r17, r25
    3d32:	78 f2       	brcs	.-98     	; 0x3cd2 <Store_Password+0x1c>
	{
		EEPROM_voidWrite(password[iterator], users[user_index].address + 5 + iterator);	/*Write the password in the desired location in EEPROM*/
	}
	EEPROM_voidWrite('\0', users[user_index].address + 5 + iterator);			/*Add NULL after the ID*/
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	28 2f       	mov	r18, r24
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	c9 01       	movw	r24, r18
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	82 0f       	add	r24, r18
    3d42:	93 1f       	adc	r25, r19
    3d44:	fc 01       	movw	r30, r24
    3d46:	e2 52       	subi	r30, 0x22	; 34
    3d48:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4a:	80 81       	ld	r24, Z
    3d4c:	91 81       	ldd	r25, Z+1	; 0x01
    3d4e:	98 2f       	mov	r25, r24
    3d50:	80 91 dd 01 	lds	r24, 0x01DD
    3d54:	89 0f       	add	r24, r25
    3d56:	98 2f       	mov	r25, r24
    3d58:	9b 5f       	subi	r25, 0xFB	; 251
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	69 2f       	mov	r22, r25
    3d5e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
}
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	cf 91       	pop	r28
    3d6a:	df 91       	pop	r29
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	08 95       	ret

00003d72 <Open_Smart_System>:

u8 Open_Smart_System(void)														/*Entered Open System Mode*/
{
    3d72:	df 93       	push	r29
    3d74:	cf 93       	push	r28
    3d76:	0f 92       	push	r0
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
	u8 user_index = INVALID_USER;												/*Local variable to check the user is valid or not*/
    3d7c:	8f ef       	ldi	r24, 0xFF	; 255
    3d7e:	89 83       	std	Y+1, r24	; 0x01
	user_index = Valid_User();													/*Save the user index*/
    3d80:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <Valid_User>
    3d84:	89 83       	std	Y+1, r24	; 0x01
	if(user_index >=0 && user_index != 255)										/*Check the user is valid or not*/
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	8f 3f       	cpi	r24, 0xFF	; 255
    3d8a:	31 f0       	breq	.+12     	; 0x3d98 <Open_Smart_System+0x26>
	{
		MGIE_voidEnable();														/*Initialize Global Interrupt*/
    3d8c:	0e 94 cf 09 	call	0x139e	; 0x139e <MGIE_voidEnable>
		M_Timer0Init();															/*Initialize Timer0*/
    3d90:	0e 94 3d 08 	call	0x107a	; 0x107a <M_Timer0Init>
		MADC_voidInit();														/*Initialize ADC*/
    3d94:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <MADC_voidInit>
	{
		//un authorized user
		//we can count false attempts here and block the system after 3 false attempts
		//return;
	}
	return 1;
    3d98:	81 e0       	ldi	r24, 0x01	; 1

}
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <Add_User>:


u8 Add_User(void)																/*Entered Add User Mode*/
{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
    3daa:	aa 97       	sbiw	r28, 0x2a	; 42
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	de bf       	out	0x3e, r29	; 62
    3db2:	0f be       	out	0x3f, r0	; 63
    3db4:	cd bf       	out	0x3d, r28	; 61
	char user_id[20];															/*Local variable to save user id*/
	char password[20];															/*Local variable to save user password*/
	u8 check_space = 255;														/*Local variable to check the space in EEPROM*/
    3db6:	8f ef       	ldi	r24, 0xFF	; 255
    3db8:	8a 83       	std	Y+2, r24	; 0x02
	u8 user_index = INVALID_USER;												/*Local variable to check the user is valid or not*/
    3dba:	8f ef       	ldi	r24, 0xFF	; 255
    3dbc:	89 83       	std	Y+1, r24	; 0x01
	user_index = Valid_User();													/*Save the user index*/
    3dbe:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <Valid_User>
    3dc2:	89 83       	std	Y+1, r24	; 0x01

	if(user_index != INVALID_USER)												/*Check the user is valid or not*/
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    3dc8:	81 f1       	breq	.+96     	; 0x3e2a <Add_User+0x88>
	{
		//check if there is space for new user
		check_space = Check_Available_Space();									/*Save the index space*/
    3dca:	0e 94 1d 22 	call	0x443a	; 0x443a <Check_Available_Space>
    3dce:	8a 83       	std	Y+2, r24	; 0x02
		if(check_space)															/*Check the space*/
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	88 23       	and	r24, r24
    3dd4:	41 f1       	breq	.+80     	; 0x3e26 <Add_User+0x84>
		{
			Enter_User_ID();													/*Read the id*/
    3dd6:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <Enter_User_ID>
			strcpy(user_id,Get_User_ID());										/*Copy the entered id to user_id*/
    3dda:	0e 94 47 22 	call	0x448e	; 0x448e <Get_User_ID>
    3dde:	9c 01       	movw	r18, r24
    3de0:	ce 01       	movw	r24, r28
    3de2:	03 96       	adiw	r24, 0x03	; 3
    3de4:	b9 01       	movw	r22, r18
    3de6:	0e 94 96 07 	call	0xf2c	; 0xf2c <strcpy>

			Enter_User_Password();												/*Read the password*/
    3dea:	0e 94 24 20 	call	0x4048	; 0x4048 <Enter_User_Password>
			strcpy(password,Get_Password());									/*Copy the entered id to password*/
    3dee:	0e 94 66 22 	call	0x44cc	; 0x44cc <Get_Password>
    3df2:	9c 01       	movw	r18, r24
    3df4:	ce 01       	movw	r24, r28
    3df6:	47 96       	adiw	r24, 0x17	; 23
    3df8:	b9 01       	movw	r22, r18
    3dfa:	0e 94 96 07 	call	0xf2c	; 0xf2c <strcpy>

			Store_ID(check_space,user_id);										/*Save the id*/
    3dfe:	9e 01       	movw	r18, r28
    3e00:	2d 5f       	subi	r18, 0xFD	; 253
    3e02:	3f 4f       	sbci	r19, 0xFF	; 255
    3e04:	8a 81       	ldd	r24, Y+2	; 0x02
    3e06:	b9 01       	movw	r22, r18
    3e08:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <Store_ID>
			Store_Password(check_space,password);								/*Save the password*/
    3e0c:	9e 01       	movw	r18, r28
    3e0e:	29 5e       	subi	r18, 0xE9	; 233
    3e10:	3f 4f       	sbci	r19, 0xFF	; 255
    3e12:	8a 81       	ldd	r24, Y+2	; 0x02
    3e14:	b9 01       	movw	r22, r18
    3e16:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <Store_Password>
			mark_user_as_not_available(check_space);							/*Make the user is available*/
    3e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1c:	0e 94 85 22 	call	0x450a	; 0x450a <mark_user_as_not_available>
			User_Added();														/*Print User is Added*/
    3e20:	0e 94 b3 20 	call	0x4166	; 0x4166 <User_Added>
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <Add_User+0x88>

		}
		else																	/*No space for new user*/
		{
			No_Space();															/*Print No space*/
    3e26:	0e 94 42 21 	call	0x4284	; 0x4284 <No_Space>
		}
	}
	return 1;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
}
    3e2c:	aa 96       	adiw	r28, 0x2a	; 42
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	cd bf       	out	0x3d, r28	; 61
    3e38:	cf 91       	pop	r28
    3e3a:	df 91       	pop	r29
    3e3c:	08 95       	ret

00003e3e <Change_Password>:

u8 Change_Password(void)														/*Entered Change Password Mode*/
{
    3e3e:	df 93       	push	r29
    3e40:	cf 93       	push	r28
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	65 97       	sbiw	r28, 0x15	; 21
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
	char password[20];															/*Local variable to save user password*/
	u8 user_index = INVALID_USER;												/*Local variable to check the user is valid or not*/
    3e52:	8f ef       	ldi	r24, 0xFF	; 255
    3e54:	89 83       	std	Y+1, r24	; 0x01
	user_index = Valid_User();													/*Save the user index*/
    3e56:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <Valid_User>
    3e5a:	89 83       	std	Y+1, r24	; 0x01

	if(user_index != INVALID_USER)												/*Check the user is valid or not*/
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3e60:	99 f0       	breq	.+38     	; 0x3e88 <Change_Password+0x4a>
	{
		Enter_User_Password();													/*Read the password*/
    3e62:	0e 94 24 20 	call	0x4048	; 0x4048 <Enter_User_Password>
		strcpy(password,Get_Password());										/*Copy the entered id to password*/
    3e66:	0e 94 66 22 	call	0x44cc	; 0x44cc <Get_Password>
    3e6a:	9c 01       	movw	r18, r24
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	02 96       	adiw	r24, 0x02	; 2
    3e70:	b9 01       	movw	r22, r18
    3e72:	0e 94 96 07 	call	0xf2c	; 0xf2c <strcpy>

		Store_Password(user_index,password);									/*Save the new password*/
    3e76:	9e 01       	movw	r18, r28
    3e78:	2e 5f       	subi	r18, 0xFE	; 254
    3e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	b9 01       	movw	r22, r18
    3e80:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <Store_Password>
		Password_Changed();														/*Print Password is Changed*/
    3e84:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <Password_Changed>
	}																			/**/
	return 1;																	/**/
    3e88:	81 e0       	ldi	r24, 0x01	; 1
}																				/**/
    3e8a:	65 96       	adiw	r28, 0x15	; 21
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	cf 91       	pop	r28
    3e98:	df 91       	pop	r29
    3e9a:	08 95       	ret

00003e9c <Valid_User>:

u8 Valid_User(void)																/**/
{																				/**/
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
    3ea4:	aa 97       	sbiw	r28, 0x2a	; 42
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	cd bf       	out	0x3d, r28	; 61
	u8 user_status = INVALID_USER;												/**/
    3eb0:	8f ef       	ldi	r24, 0xFF	; 255
    3eb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 user_index;																/**/
	char user_id[20];															/**/
	char password[20];															/**/

	Enter_User_ID();															/**/
    3eb4:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <Enter_User_ID>
	strcpy(user_id,Get_User_ID());												/**/
    3eb8:	0e 94 47 22 	call	0x448e	; 0x448e <Get_User_ID>
    3ebc:	9c 01       	movw	r18, r24
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	03 96       	adiw	r24, 0x03	; 3
    3ec2:	b9 01       	movw	r22, r18
    3ec4:	0e 94 96 07 	call	0xf2c	; 0xf2c <strcpy>

	user_index = Search_For_User(user_id);										/**/
    3ec8:	ce 01       	movw	r24, r28
    3eca:	03 96       	adiw	r24, 0x03	; 3
    3ecc:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <Search_For_User>
    3ed0:	89 83       	std	Y+1, r24	; 0x01
	if(user_index != USER_NOT_FOUND)											/**/
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ed6:	d9 f0       	breq	.+54     	; 0x3f0e <Valid_User+0x72>
	{																			/**/
		Enter_User_Password();													/**/
    3ed8:	0e 94 24 20 	call	0x4048	; 0x4048 <Enter_User_Password>
		strcpy(password,Get_Password());										/**/
    3edc:	0e 94 66 22 	call	0x44cc	; 0x44cc <Get_Password>
    3ee0:	9c 01       	movw	r18, r24
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	47 96       	adiw	r24, 0x17	; 23
    3ee6:	b9 01       	movw	r22, r18
    3ee8:	0e 94 96 07 	call	0xf2c	; 0xf2c <strcpy>

		if(Check_Password(user_index,password) == PASSWORD_CORRECT)				/**/
    3eec:	9e 01       	movw	r18, r28
    3eee:	29 5e       	subi	r18, 0xE9	; 233
    3ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	b9 01       	movw	r22, r18
    3ef6:	0e 94 fd 21 	call	0x43fa	; 0x43fa <Check_Password>
    3efa:	81 30       	cpi	r24, 0x01	; 1
    3efc:	19 f4       	brne	.+6      	; 0x3f04 <Valid_User+0x68>
		{																		/**/
			user_status = user_index;											/**/
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	8a 83       	std	Y+2, r24	; 0x02
    3f02:	09 c0       	rjmp	.+18     	; 0x3f16 <Valid_User+0x7a>
		}																		/**/
		else																	/**/
		{																		/**/
			Wrong_Password();													/**/
    3f04:	0e 94 da 23 	call	0x47b4	; 0x47b4 <Wrong_Password>
			user_status =  PASSWORD_INCORRECT;									/**/
    3f08:	8f ef       	ldi	r24, 0xFF	; 255
    3f0a:	8a 83       	std	Y+2, r24	; 0x02
    3f0c:	04 c0       	rjmp	.+8      	; 0x3f16 <Valid_User+0x7a>
		}																		/**/
	}																			/**/
	else																		/**/
	{																			/**/
		User_Not_Found();														/**/
    3f0e:	0e 94 69 24 	call	0x48d2	; 0x48d2 <User_Not_Found>
		user_status = INVALID_USER;												/**/
    3f12:	8f ef       	ldi	r24, 0xFF	; 255
    3f14:	8a 83       	std	Y+2, r24	; 0x02
	}																			/**/
	return user_status;															/**/
    3f16:	8a 81       	ldd	r24, Y+2	; 0x02
}																				/**/
    3f18:	aa 96       	adiw	r28, 0x2a	; 42
    3f1a:	0f b6       	in	r0, 0x3f	; 63
    3f1c:	f8 94       	cli
    3f1e:	de bf       	out	0x3e, r29	; 62
    3f20:	0f be       	out	0x3f, r0	; 63
    3f22:	cd bf       	out	0x3d, r28	; 61
    3f24:	cf 91       	pop	r28
    3f26:	df 91       	pop	r29
    3f28:	08 95       	ret

00003f2a <Enter_User_ID>:

void Enter_User_ID(void)														/**/
{																				/**/
    3f2a:	df 93       	push	r29
    3f2c:	cf 93       	push	r28
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	2e 97       	sbiw	r28, 0x0e	; 14
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidclear();															/**/
    3f3e:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	HLCD_voidgotoXY(0,0);														/**/
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("Enter User ID:");										/**/
    3f4a:	8d ec       	ldi	r24, 0xCD	; 205
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	aa ef       	ldi	r26, 0xFA	; 250
    3f58:	b3 e4       	ldi	r27, 0x43	; 67
    3f5a:	8b 87       	std	Y+11, r24	; 0x0b
    3f5c:	9c 87       	std	Y+12, r25	; 0x0c
    3f5e:	ad 87       	std	Y+13, r26	; 0x0d
    3f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	4a ef       	ldi	r20, 0xFA	; 250
    3f70:	54 e4       	ldi	r21, 0x44	; 68
    3f72:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	8f 83       	std	Y+7, r24	; 0x07
    3f7c:	98 87       	std	Y+8, r25	; 0x08
    3f7e:	a9 87       	std	Y+9, r26	; 0x09
    3f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f82:	6f 81       	ldd	r22, Y+7	; 0x07
    3f84:	78 85       	ldd	r23, Y+8	; 0x08
    3f86:	89 85       	ldd	r24, Y+9	; 0x09
    3f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	40 e8       	ldi	r20, 0x80	; 128
    3f90:	5f e3       	ldi	r21, 0x3F	; 63
    3f92:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    3f96:	88 23       	and	r24, r24
    3f98:	2c f4       	brge	.+10     	; 0x3fa4 <Enter_User_ID+0x7a>
		__ticks = 1;
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	9e 83       	std	Y+6, r25	; 0x06
    3fa0:	8d 83       	std	Y+5, r24	; 0x05
    3fa2:	3f c0       	rjmp	.+126    	; 0x4022 <Enter_User_ID+0xf8>
	else if (__tmp > 65535)
    3fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa6:	78 85       	ldd	r23, Y+8	; 0x08
    3fa8:	89 85       	ldd	r24, Y+9	; 0x09
    3faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	3f ef       	ldi	r19, 0xFF	; 255
    3fb0:	4f e7       	ldi	r20, 0x7F	; 127
    3fb2:	57 e4       	ldi	r21, 0x47	; 71
    3fb4:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    3fb8:	18 16       	cp	r1, r24
    3fba:	4c f5       	brge	.+82     	; 0x400e <Enter_User_ID+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e2       	ldi	r20, 0x20	; 32
    3fca:	51 e4       	ldi	r21, 0x41	; 65
    3fcc:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	9e 83       	std	Y+6, r25	; 0x06
    3fe2:	8d 83       	std	Y+5, r24	; 0x05
    3fe4:	0f c0       	rjmp	.+30     	; 0x4004 <Enter_User_ID+0xda>
    3fe6:	88 ec       	ldi	r24, 0xC8	; 200
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	9c 83       	std	Y+4, r25	; 0x04
    3fec:	8b 83       	std	Y+3, r24	; 0x03
    3fee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <Enter_User_ID+0xc8>
    3ff6:	9c 83       	std	Y+4, r25	; 0x04
    3ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	9e 83       	std	Y+6, r25	; 0x06
    4002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4004:	8d 81       	ldd	r24, Y+5	; 0x05
    4006:	9e 81       	ldd	r25, Y+6	; 0x06
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	69 f7       	brne	.-38     	; 0x3fe6 <Enter_User_ID+0xbc>
    400c:	14 c0       	rjmp	.+40     	; 0x4036 <Enter_User_ID+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400e:	6f 81       	ldd	r22, Y+7	; 0x07
    4010:	78 85       	ldd	r23, Y+8	; 0x08
    4012:	89 85       	ldd	r24, Y+9	; 0x09
    4014:	9a 85       	ldd	r25, Y+10	; 0x0a
    4016:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	9e 83       	std	Y+6, r25	; 0x06
    4020:	8d 83       	std	Y+5, r24	; 0x05
    4022:	8d 81       	ldd	r24, Y+5	; 0x05
    4024:	9e 81       	ldd	r25, Y+6	; 0x06
    4026:	9a 83       	std	Y+2, r25	; 0x02
    4028:	89 83       	std	Y+1, r24	; 0x01
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	9a 81       	ldd	r25, Y+2	; 0x02
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <Enter_User_ID+0x104>
    4032:	9a 83       	std	Y+2, r25	; 0x02
    4034:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);																/**/
}																				/**/
    4036:	2e 96       	adiw	r28, 0x0e	; 14
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	cf 91       	pop	r28
    4044:	df 91       	pop	r29
    4046:	08 95       	ret

00004048 <Enter_User_Password>:

void Enter_User_Password(void)													/**/
{																				/**/
    4048:	df 93       	push	r29
    404a:	cf 93       	push	r28
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	2e 97       	sbiw	r28, 0x0e	; 14
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	f8 94       	cli
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidclear();															/**/
    405c:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	HLCD_voidgotoXY(0,0);														/**/
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("Enter Password:");										/**/
    4068:	8c ed       	ldi	r24, 0xDC	; 220
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	aa ef       	ldi	r26, 0xFA	; 250
    4076:	b3 e4       	ldi	r27, 0x43	; 67
    4078:	8b 87       	std	Y+11, r24	; 0x0b
    407a:	9c 87       	std	Y+12, r25	; 0x0c
    407c:	ad 87       	std	Y+13, r26	; 0x0d
    407e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4080:	6b 85       	ldd	r22, Y+11	; 0x0b
    4082:	7c 85       	ldd	r23, Y+12	; 0x0c
    4084:	8d 85       	ldd	r24, Y+13	; 0x0d
    4086:	9e 85       	ldd	r25, Y+14	; 0x0e
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	4a ef       	ldi	r20, 0xFA	; 250
    408e:	54 e4       	ldi	r21, 0x44	; 68
    4090:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	8f 83       	std	Y+7, r24	; 0x07
    409a:	98 87       	std	Y+8, r25	; 0x08
    409c:	a9 87       	std	Y+9, r26	; 0x09
    409e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40a0:	6f 81       	ldd	r22, Y+7	; 0x07
    40a2:	78 85       	ldd	r23, Y+8	; 0x08
    40a4:	89 85       	ldd	r24, Y+9	; 0x09
    40a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e8       	ldi	r20, 0x80	; 128
    40ae:	5f e3       	ldi	r21, 0x3F	; 63
    40b0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    40b4:	88 23       	and	r24, r24
    40b6:	2c f4       	brge	.+10     	; 0x40c2 <Enter_User_Password+0x7a>
		__ticks = 1;
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	9e 83       	std	Y+6, r25	; 0x06
    40be:	8d 83       	std	Y+5, r24	; 0x05
    40c0:	3f c0       	rjmp	.+126    	; 0x4140 <Enter_User_Password+0xf8>
	else if (__tmp > 65535)
    40c2:	6f 81       	ldd	r22, Y+7	; 0x07
    40c4:	78 85       	ldd	r23, Y+8	; 0x08
    40c6:	89 85       	ldd	r24, Y+9	; 0x09
    40c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	3f ef       	ldi	r19, 0xFF	; 255
    40ce:	4f e7       	ldi	r20, 0x7F	; 127
    40d0:	57 e4       	ldi	r21, 0x47	; 71
    40d2:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    40d6:	18 16       	cp	r1, r24
    40d8:	4c f5       	brge	.+82     	; 0x412c <Enter_User_Password+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40da:	6b 85       	ldd	r22, Y+11	; 0x0b
    40dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    40de:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e2       	ldi	r20, 0x20	; 32
    40e8:	51 e4       	ldi	r21, 0x41	; 65
    40ea:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	bc 01       	movw	r22, r24
    40f4:	cd 01       	movw	r24, r26
    40f6:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	9e 83       	std	Y+6, r25	; 0x06
    4100:	8d 83       	std	Y+5, r24	; 0x05
    4102:	0f c0       	rjmp	.+30     	; 0x4122 <Enter_User_Password+0xda>
    4104:	88 ec       	ldi	r24, 0xC8	; 200
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	9c 83       	std	Y+4, r25	; 0x04
    410a:	8b 83       	std	Y+3, r24	; 0x03
    410c:	8b 81       	ldd	r24, Y+3	; 0x03
    410e:	9c 81       	ldd	r25, Y+4	; 0x04
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	f1 f7       	brne	.-4      	; 0x4110 <Enter_User_Password+0xc8>
    4114:	9c 83       	std	Y+4, r25	; 0x04
    4116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4118:	8d 81       	ldd	r24, Y+5	; 0x05
    411a:	9e 81       	ldd	r25, Y+6	; 0x06
    411c:	01 97       	sbiw	r24, 0x01	; 1
    411e:	9e 83       	std	Y+6, r25	; 0x06
    4120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4122:	8d 81       	ldd	r24, Y+5	; 0x05
    4124:	9e 81       	ldd	r25, Y+6	; 0x06
    4126:	00 97       	sbiw	r24, 0x00	; 0
    4128:	69 f7       	brne	.-38     	; 0x4104 <Enter_User_Password+0xbc>
    412a:	14 c0       	rjmp	.+40     	; 0x4154 <Enter_User_Password+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412c:	6f 81       	ldd	r22, Y+7	; 0x07
    412e:	78 85       	ldd	r23, Y+8	; 0x08
    4130:	89 85       	ldd	r24, Y+9	; 0x09
    4132:	9a 85       	ldd	r25, Y+10	; 0x0a
    4134:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
    4140:	8d 81       	ldd	r24, Y+5	; 0x05
    4142:	9e 81       	ldd	r25, Y+6	; 0x06
    4144:	9a 83       	std	Y+2, r25	; 0x02
    4146:	89 83       	std	Y+1, r24	; 0x01
    4148:	89 81       	ldd	r24, Y+1	; 0x01
    414a:	9a 81       	ldd	r25, Y+2	; 0x02
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	f1 f7       	brne	.-4      	; 0x414c <Enter_User_Password+0x104>
    4150:	9a 83       	std	Y+2, r25	; 0x02
    4152:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);																/**/
}																				/**/
    4154:	2e 96       	adiw	r28, 0x0e	; 14
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	cf 91       	pop	r28
    4162:	df 91       	pop	r29
    4164:	08 95       	ret

00004166 <User_Added>:

void User_Added(void)															/**/
{																				/**/
    4166:	df 93       	push	r29
    4168:	cf 93       	push	r28
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	2e 97       	sbiw	r28, 0x0e	; 14
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidclear();															/**/
    417a:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	HLCD_voidgotoXY(0,0);														/**/
    417e:	80 e0       	ldi	r24, 0x00	; 0
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("User Added");											/**/
    4186:	8c ee       	ldi	r24, 0xEC	; 236
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	aa ef       	ldi	r26, 0xFA	; 250
    4194:	b3 e4       	ldi	r27, 0x43	; 67
    4196:	8b 87       	std	Y+11, r24	; 0x0b
    4198:	9c 87       	std	Y+12, r25	; 0x0c
    419a:	ad 87       	std	Y+13, r26	; 0x0d
    419c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419e:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	4a ef       	ldi	r20, 0xFA	; 250
    41ac:	54 e4       	ldi	r21, 0x44	; 68
    41ae:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	8f 83       	std	Y+7, r24	; 0x07
    41b8:	98 87       	std	Y+8, r25	; 0x08
    41ba:	a9 87       	std	Y+9, r26	; 0x09
    41bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41be:	6f 81       	ldd	r22, Y+7	; 0x07
    41c0:	78 85       	ldd	r23, Y+8	; 0x08
    41c2:	89 85       	ldd	r24, Y+9	; 0x09
    41c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e8       	ldi	r20, 0x80	; 128
    41cc:	5f e3       	ldi	r21, 0x3F	; 63
    41ce:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    41d2:	88 23       	and	r24, r24
    41d4:	2c f4       	brge	.+10     	; 0x41e0 <User_Added+0x7a>
		__ticks = 1;
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	9e 83       	std	Y+6, r25	; 0x06
    41dc:	8d 83       	std	Y+5, r24	; 0x05
    41de:	3f c0       	rjmp	.+126    	; 0x425e <User_Added+0xf8>
	else if (__tmp > 65535)
    41e0:	6f 81       	ldd	r22, Y+7	; 0x07
    41e2:	78 85       	ldd	r23, Y+8	; 0x08
    41e4:	89 85       	ldd	r24, Y+9	; 0x09
    41e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	4c f5       	brge	.+82     	; 0x424a <User_Added+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e2       	ldi	r20, 0x20	; 32
    4206:	51 e4       	ldi	r21, 0x41	; 65
    4208:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	9e 83       	std	Y+6, r25	; 0x06
    421e:	8d 83       	std	Y+5, r24	; 0x05
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <User_Added+0xda>
    4222:	88 ec       	ldi	r24, 0xC8	; 200
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	9c 83       	std	Y+4, r25	; 0x04
    4228:	8b 83       	std	Y+3, r24	; 0x03
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	9c 81       	ldd	r25, Y+4	; 0x04
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <User_Added+0xc8>
    4232:	9c 83       	std	Y+4, r25	; 0x04
    4234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4236:	8d 81       	ldd	r24, Y+5	; 0x05
    4238:	9e 81       	ldd	r25, Y+6	; 0x06
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	9e 83       	std	Y+6, r25	; 0x06
    423e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4240:	8d 81       	ldd	r24, Y+5	; 0x05
    4242:	9e 81       	ldd	r25, Y+6	; 0x06
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	69 f7       	brne	.-38     	; 0x4222 <User_Added+0xbc>
    4248:	14 c0       	rjmp	.+40     	; 0x4272 <User_Added+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	6f 81       	ldd	r22, Y+7	; 0x07
    424c:	78 85       	ldd	r23, Y+8	; 0x08
    424e:	89 85       	ldd	r24, Y+9	; 0x09
    4250:	9a 85       	ldd	r25, Y+10	; 0x0a
    4252:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	9e 83       	std	Y+6, r25	; 0x06
    425c:	8d 83       	std	Y+5, r24	; 0x05
    425e:	8d 81       	ldd	r24, Y+5	; 0x05
    4260:	9e 81       	ldd	r25, Y+6	; 0x06
    4262:	9a 83       	std	Y+2, r25	; 0x02
    4264:	89 83       	std	Y+1, r24	; 0x01
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	9a 81       	ldd	r25, Y+2	; 0x02
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <User_Added+0x104>
    426e:	9a 83       	std	Y+2, r25	; 0x02
    4270:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);																/**/
}																				/**/
    4272:	2e 96       	adiw	r28, 0x0e	; 14
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	cf 91       	pop	r28
    4280:	df 91       	pop	r29
    4282:	08 95       	ret

00004284 <No_Space>:

void No_Space(void)																/**/
{																				/**/
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
    428c:	2e 97       	sbiw	r28, 0x0e	; 14
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidclear();															/**/
    4298:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	HLCD_voidgotoXY(0,0);														/**/
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	60 e0       	ldi	r22, 0x00	; 0
    42a0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("No Space");											/**/
    42a4:	87 ef       	ldi	r24, 0xF7	; 247
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	aa ef       	ldi	r26, 0xFA	; 250
    42b2:	b3 e4       	ldi	r27, 0x43	; 67
    42b4:	8b 87       	std	Y+11, r24	; 0x0b
    42b6:	9c 87       	std	Y+12, r25	; 0x0c
    42b8:	ad 87       	std	Y+13, r26	; 0x0d
    42ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    42be:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	4a ef       	ldi	r20, 0xFA	; 250
    42ca:	54 e4       	ldi	r21, 0x44	; 68
    42cc:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	8f 83       	std	Y+7, r24	; 0x07
    42d6:	98 87       	std	Y+8, r25	; 0x08
    42d8:	a9 87       	std	Y+9, r26	; 0x09
    42da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42dc:	6f 81       	ldd	r22, Y+7	; 0x07
    42de:	78 85       	ldd	r23, Y+8	; 0x08
    42e0:	89 85       	ldd	r24, Y+9	; 0x09
    42e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	40 e8       	ldi	r20, 0x80	; 128
    42ea:	5f e3       	ldi	r21, 0x3F	; 63
    42ec:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    42f0:	88 23       	and	r24, r24
    42f2:	2c f4       	brge	.+10     	; 0x42fe <No_Space+0x7a>
		__ticks = 1;
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	9e 83       	std	Y+6, r25	; 0x06
    42fa:	8d 83       	std	Y+5, r24	; 0x05
    42fc:	3f c0       	rjmp	.+126    	; 0x437c <No_Space+0xf8>
	else if (__tmp > 65535)
    42fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4300:	78 85       	ldd	r23, Y+8	; 0x08
    4302:	89 85       	ldd	r24, Y+9	; 0x09
    4304:	9a 85       	ldd	r25, Y+10	; 0x0a
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	3f ef       	ldi	r19, 0xFF	; 255
    430a:	4f e7       	ldi	r20, 0x7F	; 127
    430c:	57 e4       	ldi	r21, 0x47	; 71
    430e:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    4312:	18 16       	cp	r1, r24
    4314:	4c f5       	brge	.+82     	; 0x4368 <No_Space+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4316:	6b 85       	ldd	r22, Y+11	; 0x0b
    4318:	7c 85       	ldd	r23, Y+12	; 0x0c
    431a:	8d 85       	ldd	r24, Y+13	; 0x0d
    431c:	9e 85       	ldd	r25, Y+14	; 0x0e
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e2       	ldi	r20, 0x20	; 32
    4324:	51 e4       	ldi	r21, 0x41	; 65
    4326:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    432a:	dc 01       	movw	r26, r24
    432c:	cb 01       	movw	r24, r22
    432e:	bc 01       	movw	r22, r24
    4330:	cd 01       	movw	r24, r26
    4332:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4336:	dc 01       	movw	r26, r24
    4338:	cb 01       	movw	r24, r22
    433a:	9e 83       	std	Y+6, r25	; 0x06
    433c:	8d 83       	std	Y+5, r24	; 0x05
    433e:	0f c0       	rjmp	.+30     	; 0x435e <No_Space+0xda>
    4340:	88 ec       	ldi	r24, 0xC8	; 200
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	9c 83       	std	Y+4, r25	; 0x04
    4346:	8b 83       	std	Y+3, r24	; 0x03
    4348:	8b 81       	ldd	r24, Y+3	; 0x03
    434a:	9c 81       	ldd	r25, Y+4	; 0x04
    434c:	01 97       	sbiw	r24, 0x01	; 1
    434e:	f1 f7       	brne	.-4      	; 0x434c <No_Space+0xc8>
    4350:	9c 83       	std	Y+4, r25	; 0x04
    4352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4354:	8d 81       	ldd	r24, Y+5	; 0x05
    4356:	9e 81       	ldd	r25, Y+6	; 0x06
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	9e 83       	std	Y+6, r25	; 0x06
    435c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    435e:	8d 81       	ldd	r24, Y+5	; 0x05
    4360:	9e 81       	ldd	r25, Y+6	; 0x06
    4362:	00 97       	sbiw	r24, 0x00	; 0
    4364:	69 f7       	brne	.-38     	; 0x4340 <No_Space+0xbc>
    4366:	14 c0       	rjmp	.+40     	; 0x4390 <No_Space+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4368:	6f 81       	ldd	r22, Y+7	; 0x07
    436a:	78 85       	ldd	r23, Y+8	; 0x08
    436c:	89 85       	ldd	r24, Y+9	; 0x09
    436e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4370:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	9e 83       	std	Y+6, r25	; 0x06
    437a:	8d 83       	std	Y+5, r24	; 0x05
    437c:	8d 81       	ldd	r24, Y+5	; 0x05
    437e:	9e 81       	ldd	r25, Y+6	; 0x06
    4380:	9a 83       	std	Y+2, r25	; 0x02
    4382:	89 83       	std	Y+1, r24	; 0x01
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	9a 81       	ldd	r25, Y+2	; 0x02
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	f1 f7       	brne	.-4      	; 0x4388 <No_Space+0x104>
    438c:	9a 83       	std	Y+2, r25	; 0x02
    438e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);																/**/
}																				/**/
    4390:	2e 96       	adiw	r28, 0x0e	; 14
    4392:	0f b6       	in	r0, 0x3f	; 63
    4394:	f8 94       	cli
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	cd bf       	out	0x3d, r28	; 61
    439c:	cf 91       	pop	r28
    439e:	df 91       	pop	r29
    43a0:	08 95       	ret

000043a2 <Search_For_User>:

s8 Search_For_User(char* user_id)												/**/
{																				/**/
    43a2:	df 93       	push	r29
    43a4:	cf 93       	push	r28
    43a6:	00 d0       	rcall	.+0      	; 0x43a8 <Search_For_User+0x6>
    43a8:	0f 92       	push	r0
    43aa:	cd b7       	in	r28, 0x3d	; 61
    43ac:	de b7       	in	r29, 0x3e	; 62
    43ae:	9a 83       	std	Y+2, r25	; 0x02
    43b0:	89 83       	std	Y+1, r24	; 0x01
	for(iterator=0;iterator<MAX_N_OF_USERS;iterator++)							/**/
    43b2:	10 92 dd 01 	sts	0x01DD, r1
    43b6:	14 c0       	rjmp	.+40     	; 0x43e0 <Search_For_User+0x3e>
	{																			/**/
		if(strcmp(read_user_id(iterator),user_id)==0)							/**/
    43b8:	80 91 dd 01 	lds	r24, 0x01DD
    43bc:	0e 94 61 23 	call	0x46c2	; 0x46c2 <read_user_id>
    43c0:	29 81       	ldd	r18, Y+1	; 0x01
    43c2:	3a 81       	ldd	r19, Y+2	; 0x02
    43c4:	b9 01       	movw	r22, r18
    43c6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <strcmp>
    43ca:	00 97       	sbiw	r24, 0x00	; 0
    43cc:	21 f4       	brne	.+8      	; 0x43d6 <Search_For_User+0x34>
		{																		/**/
			//user found
			//return user index
			return iterator;													/**/
    43ce:	80 91 dd 01 	lds	r24, 0x01DD
    43d2:	8b 83       	std	Y+3, r24	; 0x03
    43d4:	0b c0       	rjmp	.+22     	; 0x43ec <Search_For_User+0x4a>
	_delay_ms(500);																/**/
}																				/**/

s8 Search_For_User(char* user_id)												/**/
{																				/**/
	for(iterator=0;iterator<MAX_N_OF_USERS;iterator++)							/**/
    43d6:	80 91 dd 01 	lds	r24, 0x01DD
    43da:	8f 5f       	subi	r24, 0xFF	; 255
    43dc:	80 93 dd 01 	sts	0x01DD, r24
    43e0:	80 91 dd 01 	lds	r24, 0x01DD
    43e4:	8a 30       	cpi	r24, 0x0A	; 10
    43e6:	40 f3       	brcs	.-48     	; 0x43b8 <Search_For_User+0x16>
			return iterator;													/**/
		}																		/**/
		else																	/**/
		{}																		/**/
	}																			/**/
	return USER_NOT_FOUND;														/**/
    43e8:	8f ef       	ldi	r24, 0xFF	; 255
    43ea:	8b 83       	std	Y+3, r24	; 0x03
    43ec:	8b 81       	ldd	r24, Y+3	; 0x03
}																				/**/
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
    43f4:	cf 91       	pop	r28
    43f6:	df 91       	pop	r29
    43f8:	08 95       	ret

000043fa <Check_Password>:

u8 Check_Password(u8 user_index,char* password)
{
    43fa:	df 93       	push	r29
    43fc:	cf 93       	push	r28
    43fe:	00 d0       	rcall	.+0      	; 0x4400 <Check_Password+0x6>
    4400:	00 d0       	rcall	.+0      	; 0x4402 <Check_Password+0x8>
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	89 83       	std	Y+1, r24	; 0x01
    4408:	7b 83       	std	Y+3, r23	; 0x03
    440a:	6a 83       	std	Y+2, r22	; 0x02
	if(strcmp(read_password(user_index),password)==0)
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	0e 94 9d 23 	call	0x473a	; 0x473a <read_password>
    4412:	2a 81       	ldd	r18, Y+2	; 0x02
    4414:	3b 81       	ldd	r19, Y+3	; 0x03
    4416:	b9 01       	movw	r22, r18
    4418:	0e 94 8d 07 	call	0xf1a	; 0xf1a <strcmp>
    441c:	00 97       	sbiw	r24, 0x00	; 0
    441e:	19 f4       	brne	.+6      	; 0x4426 <Check_Password+0x2c>
	{
		//password is correct
		//return 1
		return PASSWORD_CORRECT;
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	8c 83       	std	Y+4, r24	; 0x04
    4424:	02 c0       	rjmp	.+4      	; 0x442a <Check_Password+0x30>
	}
	//password is incorrect
	//return 0
	return PASSWORD_INCORRECT;
    4426:	8f ef       	ldi	r24, 0xFF	; 255
    4428:	8c 83       	std	Y+4, r24	; 0x04
    442a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    442c:	0f 90       	pop	r0
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <Check_Available_Space>:

u8 Check_Available_Space(void)
{
    443a:	df 93       	push	r29
    443c:	cf 93       	push	r28
    443e:	0f 92       	push	r0
    4440:	cd b7       	in	r28, 0x3d	; 61
    4442:	de b7       	in	r29, 0x3e	; 62
	for(iterator=0; iterator<MAX_N_OF_USERS; iterator++)
    4444:	10 92 dd 01 	sts	0x01DD, r1
    4448:	18 c0       	rjmp	.+48     	; 0x447a <Check_Available_Space+0x40>
	{
		if(users[iterator].availability == available)
    444a:	80 91 dd 01 	lds	r24, 0x01DD
    444e:	28 2f       	mov	r18, r24
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	c9 01       	movw	r24, r18
    4454:	88 0f       	add	r24, r24
    4456:	99 1f       	adc	r25, r25
    4458:	82 0f       	add	r24, r18
    445a:	93 1f       	adc	r25, r19
    445c:	fc 01       	movw	r30, r24
    445e:	e0 52       	subi	r30, 0x20	; 32
    4460:	fe 4f       	sbci	r31, 0xFE	; 254
    4462:	80 81       	ld	r24, Z
    4464:	88 23       	and	r24, r24
    4466:	21 f4       	brne	.+8      	; 0x4470 <Check_Available_Space+0x36>
		{
			return iterator;
    4468:	80 91 dd 01 	lds	r24, 0x01DD
    446c:	89 83       	std	Y+1, r24	; 0x01
    446e:	0a c0       	rjmp	.+20     	; 0x4484 <Check_Available_Space+0x4a>
	return PASSWORD_INCORRECT;
}

u8 Check_Available_Space(void)
{
	for(iterator=0; iterator<MAX_N_OF_USERS; iterator++)
    4470:	80 91 dd 01 	lds	r24, 0x01DD
    4474:	8f 5f       	subi	r24, 0xFF	; 255
    4476:	80 93 dd 01 	sts	0x01DD, r24
    447a:	80 91 dd 01 	lds	r24, 0x01DD
    447e:	8a 30       	cpi	r24, 0x0A	; 10
    4480:	20 f3       	brcs	.-56     	; 0x444a <Check_Available_Space+0x10>
		if(users[iterator].availability == available)
		{
			return iterator;
		}
	}
	return 0;
    4482:	19 82       	std	Y+1, r1	; 0x01
    4484:	89 81       	ldd	r24, Y+1	; 0x01
}
    4486:	0f 90       	pop	r0
    4488:	cf 91       	pop	r28
    448a:	df 91       	pop	r29
    448c:	08 95       	ret

0000448e <Get_User_ID>:

char* Get_User_ID(void)
{
    448e:	df 93       	push	r29
    4490:	cf 93       	push	r28
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
	static char user_id[20];
	HLCD_voidgotoXY(0,0);
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("Enter User ID");
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
	HLCD_voidgotoXY(1,0);
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	60 e0       	ldi	r22, 0x00	; 0
    44aa:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	strcpy(user_id,Hkeypad_charGet_String());
    44ae:	0e 94 12 16 	call	0x2c24	; 0x2c24 <Hkeypad_charGet_String>
    44b2:	9c 01       	movw	r18, r24
    44b4:	86 e8       	ldi	r24, 0x86	; 134
    44b6:	91 e0       	ldi	r25, 0x01	; 1
    44b8:	b9 01       	movw	r22, r18
    44ba:	0e 94 96 07 	call	0xf2c	; 0xf2c <strcpy>
	HLCD_voidclear();
    44be:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	return user_id;
    44c2:	86 e8       	ldi	r24, 0x86	; 134
    44c4:	91 e0       	ldi	r25, 0x01	; 1
}
    44c6:	cf 91       	pop	r28
    44c8:	df 91       	pop	r29
    44ca:	08 95       	ret

000044cc <Get_Password>:

char* Get_Password(void)
{
    44cc:	df 93       	push	r29
    44ce:	cf 93       	push	r28
    44d0:	cd b7       	in	r28, 0x3d	; 61
    44d2:	de b7       	in	r29, 0x3e	; 62
	static char password[20];
	HLCD_voidgotoXY(0,0);
    44d4:	80 e0       	ldi	r24, 0x00	; 0
    44d6:	60 e0       	ldi	r22, 0x00	; 0
    44d8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("Enter Password");
    44dc:	8e e0       	ldi	r24, 0x0E	; 14
    44de:	91 e0       	ldi	r25, 0x01	; 1
    44e0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
	HLCD_voidgotoXY(1,0);
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	60 e0       	ldi	r22, 0x00	; 0
    44e8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	strcpy(password,Hkeypad_charGet_String());
    44ec:	0e 94 12 16 	call	0x2c24	; 0x2c24 <Hkeypad_charGet_String>
    44f0:	9c 01       	movw	r18, r24
    44f2:	8a e9       	ldi	r24, 0x9A	; 154
    44f4:	91 e0       	ldi	r25, 0x01	; 1
    44f6:	b9 01       	movw	r22, r18
    44f8:	0e 94 96 07 	call	0xf2c	; 0xf2c <strcpy>
	HLCD_voidclear();
    44fc:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	return password;
    4500:	8a e9       	ldi	r24, 0x9A	; 154
    4502:	91 e0       	ldi	r25, 0x01	; 1
}
    4504:	cf 91       	pop	r28
    4506:	df 91       	pop	r29
    4508:	08 95       	ret

0000450a <mark_user_as_not_available>:

void mark_user_as_not_available(u8 user_index)
{
    450a:	df 93       	push	r29
    450c:	cf 93       	push	r28
    450e:	0f 92       	push	r0
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
    4514:	89 83       	std	Y+1, r24	; 0x01
	users[user_index].availability = not_available;
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	28 2f       	mov	r18, r24
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	c9 01       	movw	r24, r18
    451e:	88 0f       	add	r24, r24
    4520:	99 1f       	adc	r25, r25
    4522:	82 0f       	add	r24, r18
    4524:	93 1f       	adc	r25, r19
    4526:	fc 01       	movw	r30, r24
    4528:	e0 52       	subi	r30, 0x20	; 32
    452a:	fe 4f       	sbci	r31, 0xFE	; 254
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	80 83       	st	Z, r24
	EEPROM_voidWrite(not_available,users[user_index].address+10);
    4530:	89 81       	ldd	r24, Y+1	; 0x01
    4532:	28 2f       	mov	r18, r24
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	c9 01       	movw	r24, r18
    4538:	88 0f       	add	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	82 0f       	add	r24, r18
    453e:	93 1f       	adc	r25, r19
    4540:	fc 01       	movw	r30, r24
    4542:	e2 52       	subi	r30, 0x22	; 34
    4544:	fe 4f       	sbci	r31, 0xFE	; 254
    4546:	80 81       	ld	r24, Z
    4548:	91 81       	ldd	r25, Z+1	; 0x01
    454a:	98 2f       	mov	r25, r24
    454c:	96 5f       	subi	r25, 0xF6	; 246
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	69 2f       	mov	r22, r25
    4552:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
}
    4556:	0f 90       	pop	r0
    4558:	cf 91       	pop	r28
    455a:	df 91       	pop	r29
    455c:	08 95       	ret

0000455e <mark_user_as_available>:

void mark_user_as_available(u8 user_index)
{
    455e:	df 93       	push	r29
    4560:	cf 93       	push	r28
    4562:	0f 92       	push	r0
    4564:	cd b7       	in	r28, 0x3d	; 61
    4566:	de b7       	in	r29, 0x3e	; 62
    4568:	89 83       	std	Y+1, r24	; 0x01
	users[user_index].availability = available;
    456a:	89 81       	ldd	r24, Y+1	; 0x01
    456c:	28 2f       	mov	r18, r24
    456e:	30 e0       	ldi	r19, 0x00	; 0
    4570:	c9 01       	movw	r24, r18
    4572:	88 0f       	add	r24, r24
    4574:	99 1f       	adc	r25, r25
    4576:	82 0f       	add	r24, r18
    4578:	93 1f       	adc	r25, r19
    457a:	fc 01       	movw	r30, r24
    457c:	e0 52       	subi	r30, 0x20	; 32
    457e:	fe 4f       	sbci	r31, 0xFE	; 254
    4580:	10 82       	st	Z, r1
	EEPROM_voidWrite(available,users[user_index].address+10);
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	28 2f       	mov	r18, r24
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	c9 01       	movw	r24, r18
    458a:	88 0f       	add	r24, r24
    458c:	99 1f       	adc	r25, r25
    458e:	82 0f       	add	r24, r18
    4590:	93 1f       	adc	r25, r19
    4592:	fc 01       	movw	r30, r24
    4594:	e2 52       	subi	r30, 0x22	; 34
    4596:	fe 4f       	sbci	r31, 0xFE	; 254
    4598:	80 81       	ld	r24, Z
    459a:	91 81       	ldd	r25, Z+1	; 0x01
    459c:	98 2f       	mov	r25, r24
    459e:	96 5f       	subi	r25, 0xF6	; 246
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	69 2f       	mov	r22, r25
    45a4:	0e 94 42 16 	call	0x2c84	; 0x2c84 <EEPROM_voidWrite>
}
    45a8:	0f 90       	pop	r0
    45aa:	cf 91       	pop	r28
    45ac:	df 91       	pop	r29
    45ae:	08 95       	ret

000045b0 <debug>:

void debug(u8 debug_value)
{
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	2f 97       	sbiw	r28, 0x0f	; 15
    45ba:	0f b6       	in	r0, 0x3f	; 63
    45bc:	f8 94       	cli
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_voidsendNumber(debug_value);
    45c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c8:	0e 94 82 13 	call	0x2704	; 0x2704 <HLCD_voidsendNumber>
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	aa ef       	ldi	r26, 0xFA	; 250
    45d2:	b3 e4       	ldi	r27, 0x43	; 67
    45d4:	8b 87       	std	Y+11, r24	; 0x0b
    45d6:	9c 87       	std	Y+12, r25	; 0x0c
    45d8:	ad 87       	std	Y+13, r26	; 0x0d
    45da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    45de:	7c 85       	ldd	r23, Y+12	; 0x0c
    45e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    45e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	4a ef       	ldi	r20, 0xFA	; 250
    45ea:	54 e4       	ldi	r21, 0x44	; 68
    45ec:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	8f 83       	std	Y+7, r24	; 0x07
    45f6:	98 87       	std	Y+8, r25	; 0x08
    45f8:	a9 87       	std	Y+9, r26	; 0x09
    45fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45fc:	6f 81       	ldd	r22, Y+7	; 0x07
    45fe:	78 85       	ldd	r23, Y+8	; 0x08
    4600:	89 85       	ldd	r24, Y+9	; 0x09
    4602:	9a 85       	ldd	r25, Y+10	; 0x0a
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	40 e8       	ldi	r20, 0x80	; 128
    460a:	5f e3       	ldi	r21, 0x3F	; 63
    460c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    4610:	88 23       	and	r24, r24
    4612:	2c f4       	brge	.+10     	; 0x461e <debug+0x6e>
		__ticks = 1;
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	9e 83       	std	Y+6, r25	; 0x06
    461a:	8d 83       	std	Y+5, r24	; 0x05
    461c:	3f c0       	rjmp	.+126    	; 0x469c <debug+0xec>
	else if (__tmp > 65535)
    461e:	6f 81       	ldd	r22, Y+7	; 0x07
    4620:	78 85       	ldd	r23, Y+8	; 0x08
    4622:	89 85       	ldd	r24, Y+9	; 0x09
    4624:	9a 85       	ldd	r25, Y+10	; 0x0a
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	3f ef       	ldi	r19, 0xFF	; 255
    462a:	4f e7       	ldi	r20, 0x7F	; 127
    462c:	57 e4       	ldi	r21, 0x47	; 71
    462e:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    4632:	18 16       	cp	r1, r24
    4634:	4c f5       	brge	.+82     	; 0x4688 <debug+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4636:	6b 85       	ldd	r22, Y+11	; 0x0b
    4638:	7c 85       	ldd	r23, Y+12	; 0x0c
    463a:	8d 85       	ldd	r24, Y+13	; 0x0d
    463c:	9e 85       	ldd	r25, Y+14	; 0x0e
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	40 e2       	ldi	r20, 0x20	; 32
    4644:	51 e4       	ldi	r21, 0x41	; 65
    4646:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	bc 01       	movw	r22, r24
    4650:	cd 01       	movw	r24, r26
    4652:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	9e 83       	std	Y+6, r25	; 0x06
    465c:	8d 83       	std	Y+5, r24	; 0x05
    465e:	0f c0       	rjmp	.+30     	; 0x467e <debug+0xce>
    4660:	88 ec       	ldi	r24, 0xC8	; 200
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	9c 83       	std	Y+4, r25	; 0x04
    4666:	8b 83       	std	Y+3, r24	; 0x03
    4668:	8b 81       	ldd	r24, Y+3	; 0x03
    466a:	9c 81       	ldd	r25, Y+4	; 0x04
    466c:	01 97       	sbiw	r24, 0x01	; 1
    466e:	f1 f7       	brne	.-4      	; 0x466c <debug+0xbc>
    4670:	9c 83       	std	Y+4, r25	; 0x04
    4672:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4674:	8d 81       	ldd	r24, Y+5	; 0x05
    4676:	9e 81       	ldd	r25, Y+6	; 0x06
    4678:	01 97       	sbiw	r24, 0x01	; 1
    467a:	9e 83       	std	Y+6, r25	; 0x06
    467c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    467e:	8d 81       	ldd	r24, Y+5	; 0x05
    4680:	9e 81       	ldd	r25, Y+6	; 0x06
    4682:	00 97       	sbiw	r24, 0x00	; 0
    4684:	69 f7       	brne	.-38     	; 0x4660 <debug+0xb0>
    4686:	14 c0       	rjmp	.+40     	; 0x46b0 <debug+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4688:	6f 81       	ldd	r22, Y+7	; 0x07
    468a:	78 85       	ldd	r23, Y+8	; 0x08
    468c:	89 85       	ldd	r24, Y+9	; 0x09
    468e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4690:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4694:	dc 01       	movw	r26, r24
    4696:	cb 01       	movw	r24, r22
    4698:	9e 83       	std	Y+6, r25	; 0x06
    469a:	8d 83       	std	Y+5, r24	; 0x05
    469c:	8d 81       	ldd	r24, Y+5	; 0x05
    469e:	9e 81       	ldd	r25, Y+6	; 0x06
    46a0:	9a 83       	std	Y+2, r25	; 0x02
    46a2:	89 83       	std	Y+1, r24	; 0x01
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <debug+0xf8>
    46ac:	9a 83       	std	Y+2, r25	; 0x02
    46ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    46b0:	2f 96       	adiw	r28, 0x0f	; 15
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
    46bc:	cf 91       	pop	r28
    46be:	df 91       	pop	r29
    46c0:	08 95       	ret

000046c2 <read_user_id>:

char* read_user_id(u8 user_index)
{
    46c2:	df 93       	push	r29
    46c4:	cf 93       	push	r28
    46c6:	00 d0       	rcall	.+0      	; 0x46c8 <read_user_id+0x6>
    46c8:	cd b7       	in	r28, 0x3d	; 61
    46ca:	de b7       	in	r29, 0x3e	; 62
    46cc:	8a 83       	std	Y+2, r24	; 0x02
	iterator=0;
    46ce:	10 92 dd 01 	sts	0x01DD, r1
    46d2:	25 c0       	rjmp	.+74     	; 0x471e <read_user_id+0x5c>
	char temp;
	static char user_id[20];
	while (temp != '\0' && iterator<20){
		EEPROM_voidRead(users[user_index].address+iterator,&temp);
    46d4:	8a 81       	ldd	r24, Y+2	; 0x02
    46d6:	28 2f       	mov	r18, r24
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	c9 01       	movw	r24, r18
    46dc:	88 0f       	add	r24, r24
    46de:	99 1f       	adc	r25, r25
    46e0:	82 0f       	add	r24, r18
    46e2:	93 1f       	adc	r25, r19
    46e4:	fc 01       	movw	r30, r24
    46e6:	e2 52       	subi	r30, 0x22	; 34
    46e8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	98 2f       	mov	r25, r24
    46f0:	80 91 dd 01 	lds	r24, 0x01DD
    46f4:	89 0f       	add	r24, r25
    46f6:	9e 01       	movw	r18, r28
    46f8:	2f 5f       	subi	r18, 0xFF	; 255
    46fa:	3f 4f       	sbci	r19, 0xFF	; 255
    46fc:	b9 01       	movw	r22, r18
    46fe:	0e 94 d6 16 	call	0x2dac	; 0x2dac <EEPROM_voidRead>
		user_id[iterator] = temp;
    4702:	80 91 dd 01 	lds	r24, 0x01DD
    4706:	88 2f       	mov	r24, r24
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	29 81       	ldd	r18, Y+1	; 0x01
    470c:	fc 01       	movw	r30, r24
    470e:	e2 55       	subi	r30, 0x52	; 82
    4710:	fe 4f       	sbci	r31, 0xFE	; 254
    4712:	20 83       	st	Z, r18
		iterator++;
    4714:	80 91 dd 01 	lds	r24, 0x01DD
    4718:	8f 5f       	subi	r24, 0xFF	; 255
    471a:	80 93 dd 01 	sts	0x01DD, r24
char* read_user_id(u8 user_index)
{
	iterator=0;
	char temp;
	static char user_id[20];
	while (temp != '\0' && iterator<20){
    471e:	89 81       	ldd	r24, Y+1	; 0x01
    4720:	88 23       	and	r24, r24
    4722:	21 f0       	breq	.+8      	; 0x472c <read_user_id+0x6a>
    4724:	80 91 dd 01 	lds	r24, 0x01DD
    4728:	84 31       	cpi	r24, 0x14	; 20
    472a:	a0 f2       	brcs	.-88     	; 0x46d4 <read_user_id+0x12>
		EEPROM_voidRead(users[user_index].address+iterator,&temp);
		user_id[iterator] = temp;
		iterator++;
	}
	return user_id;
    472c:	8e ea       	ldi	r24, 0xAE	; 174
    472e:	91 e0       	ldi	r25, 0x01	; 1
}
    4730:	0f 90       	pop	r0
    4732:	0f 90       	pop	r0
    4734:	cf 91       	pop	r28
    4736:	df 91       	pop	r29
    4738:	08 95       	ret

0000473a <read_password>:

char* read_password(u8 user_index)
{
    473a:	df 93       	push	r29
    473c:	cf 93       	push	r28
    473e:	00 d0       	rcall	.+0      	; 0x4740 <read_password+0x6>
    4740:	cd b7       	in	r28, 0x3d	; 61
    4742:	de b7       	in	r29, 0x3e	; 62
    4744:	8a 83       	std	Y+2, r24	; 0x02
	iterator=0;
    4746:	10 92 dd 01 	sts	0x01DD, r1
    474a:	26 c0       	rjmp	.+76     	; 0x4798 <read_password+0x5e>
	char temp;
	static char password[20];
	while (temp != '\0'&&iterator<20){
		EEPROM_voidRead(users[user_index].address + 5 + iterator, &temp);
    474c:	8a 81       	ldd	r24, Y+2	; 0x02
    474e:	28 2f       	mov	r18, r24
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	c9 01       	movw	r24, r18
    4754:	88 0f       	add	r24, r24
    4756:	99 1f       	adc	r25, r25
    4758:	82 0f       	add	r24, r18
    475a:	93 1f       	adc	r25, r19
    475c:	fc 01       	movw	r30, r24
    475e:	e2 52       	subi	r30, 0x22	; 34
    4760:	fe 4f       	sbci	r31, 0xFE	; 254
    4762:	80 81       	ld	r24, Z
    4764:	91 81       	ldd	r25, Z+1	; 0x01
    4766:	98 2f       	mov	r25, r24
    4768:	80 91 dd 01 	lds	r24, 0x01DD
    476c:	89 0f       	add	r24, r25
    476e:	8b 5f       	subi	r24, 0xFB	; 251
    4770:	9e 01       	movw	r18, r28
    4772:	2f 5f       	subi	r18, 0xFF	; 255
    4774:	3f 4f       	sbci	r19, 0xFF	; 255
    4776:	b9 01       	movw	r22, r18
    4778:	0e 94 d6 16 	call	0x2dac	; 0x2dac <EEPROM_voidRead>
		password[iterator] = temp;
    477c:	80 91 dd 01 	lds	r24, 0x01DD
    4780:	88 2f       	mov	r24, r24
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	29 81       	ldd	r18, Y+1	; 0x01
    4786:	fc 01       	movw	r30, r24
    4788:	ee 53       	subi	r30, 0x3E	; 62
    478a:	fe 4f       	sbci	r31, 0xFE	; 254
    478c:	20 83       	st	Z, r18
		iterator++;
    478e:	80 91 dd 01 	lds	r24, 0x01DD
    4792:	8f 5f       	subi	r24, 0xFF	; 255
    4794:	80 93 dd 01 	sts	0x01DD, r24
char* read_password(u8 user_index)
{
	iterator=0;
	char temp;
	static char password[20];
	while (temp != '\0'&&iterator<20){
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	88 23       	and	r24, r24
    479c:	21 f0       	breq	.+8      	; 0x47a6 <read_password+0x6c>
    479e:	80 91 dd 01 	lds	r24, 0x01DD
    47a2:	84 31       	cpi	r24, 0x14	; 20
    47a4:	98 f2       	brcs	.-90     	; 0x474c <read_password+0x12>
		EEPROM_voidRead(users[user_index].address + 5 + iterator, &temp);
		password[iterator] = temp;
		iterator++;
	}
	return password;
    47a6:	82 ec       	ldi	r24, 0xC2	; 194
    47a8:	91 e0       	ldi	r25, 0x01	; 1
}
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	cf 91       	pop	r28
    47b0:	df 91       	pop	r29
    47b2:	08 95       	ret

000047b4 <Wrong_Password>:

void Wrong_Password(void)
{
    47b4:	df 93       	push	r29
    47b6:	cf 93       	push	r28
    47b8:	cd b7       	in	r28, 0x3d	; 61
    47ba:	de b7       	in	r29, 0x3e	; 62
    47bc:	2e 97       	sbiw	r28, 0x0e	; 14
    47be:	0f b6       	in	r0, 0x3f	; 63
    47c0:	f8 94       	cli
    47c2:	de bf       	out	0x3e, r29	; 62
    47c4:	0f be       	out	0x3f, r0	; 63
    47c6:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidclear();
    47c8:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	HLCD_voidgotoXY(0,0);
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	60 e0       	ldi	r22, 0x00	; 0
    47d0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("Wrong Password");
    47d4:	8d e1       	ldi	r24, 0x1D	; 29
    47d6:	91 e0       	ldi	r25, 0x01	; 1
    47d8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	aa ef       	ldi	r26, 0xFA	; 250
    47e2:	b3 e4       	ldi	r27, 0x43	; 67
    47e4:	8b 87       	std	Y+11, r24	; 0x0b
    47e6:	9c 87       	std	Y+12, r25	; 0x0c
    47e8:	ad 87       	std	Y+13, r26	; 0x0d
    47ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	4a ef       	ldi	r20, 0xFA	; 250
    47fa:	54 e4       	ldi	r21, 0x44	; 68
    47fc:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	8f 83       	std	Y+7, r24	; 0x07
    4806:	98 87       	std	Y+8, r25	; 0x08
    4808:	a9 87       	std	Y+9, r26	; 0x09
    480a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    480c:	6f 81       	ldd	r22, Y+7	; 0x07
    480e:	78 85       	ldd	r23, Y+8	; 0x08
    4810:	89 85       	ldd	r24, Y+9	; 0x09
    4812:	9a 85       	ldd	r25, Y+10	; 0x0a
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	40 e8       	ldi	r20, 0x80	; 128
    481a:	5f e3       	ldi	r21, 0x3F	; 63
    481c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    4820:	88 23       	and	r24, r24
    4822:	2c f4       	brge	.+10     	; 0x482e <Wrong_Password+0x7a>
		__ticks = 1;
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	9e 83       	std	Y+6, r25	; 0x06
    482a:	8d 83       	std	Y+5, r24	; 0x05
    482c:	3f c0       	rjmp	.+126    	; 0x48ac <Wrong_Password+0xf8>
	else if (__tmp > 65535)
    482e:	6f 81       	ldd	r22, Y+7	; 0x07
    4830:	78 85       	ldd	r23, Y+8	; 0x08
    4832:	89 85       	ldd	r24, Y+9	; 0x09
    4834:	9a 85       	ldd	r25, Y+10	; 0x0a
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	3f ef       	ldi	r19, 0xFF	; 255
    483a:	4f e7       	ldi	r20, 0x7F	; 127
    483c:	57 e4       	ldi	r21, 0x47	; 71
    483e:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    4842:	18 16       	cp	r1, r24
    4844:	4c f5       	brge	.+82     	; 0x4898 <Wrong_Password+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4846:	6b 85       	ldd	r22, Y+11	; 0x0b
    4848:	7c 85       	ldd	r23, Y+12	; 0x0c
    484a:	8d 85       	ldd	r24, Y+13	; 0x0d
    484c:	9e 85       	ldd	r25, Y+14	; 0x0e
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	40 e2       	ldi	r20, 0x20	; 32
    4854:	51 e4       	ldi	r21, 0x41	; 65
    4856:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	bc 01       	movw	r22, r24
    4860:	cd 01       	movw	r24, r26
    4862:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4866:	dc 01       	movw	r26, r24
    4868:	cb 01       	movw	r24, r22
    486a:	9e 83       	std	Y+6, r25	; 0x06
    486c:	8d 83       	std	Y+5, r24	; 0x05
    486e:	0f c0       	rjmp	.+30     	; 0x488e <Wrong_Password+0xda>
    4870:	88 ec       	ldi	r24, 0xC8	; 200
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	9c 83       	std	Y+4, r25	; 0x04
    4876:	8b 83       	std	Y+3, r24	; 0x03
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	9c 81       	ldd	r25, Y+4	; 0x04
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	f1 f7       	brne	.-4      	; 0x487c <Wrong_Password+0xc8>
    4880:	9c 83       	std	Y+4, r25	; 0x04
    4882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4884:	8d 81       	ldd	r24, Y+5	; 0x05
    4886:	9e 81       	ldd	r25, Y+6	; 0x06
    4888:	01 97       	sbiw	r24, 0x01	; 1
    488a:	9e 83       	std	Y+6, r25	; 0x06
    488c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    488e:	8d 81       	ldd	r24, Y+5	; 0x05
    4890:	9e 81       	ldd	r25, Y+6	; 0x06
    4892:	00 97       	sbiw	r24, 0x00	; 0
    4894:	69 f7       	brne	.-38     	; 0x4870 <Wrong_Password+0xbc>
    4896:	14 c0       	rjmp	.+40     	; 0x48c0 <Wrong_Password+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4898:	6f 81       	ldd	r22, Y+7	; 0x07
    489a:	78 85       	ldd	r23, Y+8	; 0x08
    489c:	89 85       	ldd	r24, Y+9	; 0x09
    489e:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a0:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    48a4:	dc 01       	movw	r26, r24
    48a6:	cb 01       	movw	r24, r22
    48a8:	9e 83       	std	Y+6, r25	; 0x06
    48aa:	8d 83       	std	Y+5, r24	; 0x05
    48ac:	8d 81       	ldd	r24, Y+5	; 0x05
    48ae:	9e 81       	ldd	r25, Y+6	; 0x06
    48b0:	9a 83       	std	Y+2, r25	; 0x02
    48b2:	89 83       	std	Y+1, r24	; 0x01
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
    48b6:	9a 81       	ldd	r25, Y+2	; 0x02
    48b8:	01 97       	sbiw	r24, 0x01	; 1
    48ba:	f1 f7       	brne	.-4      	; 0x48b8 <Wrong_Password+0x104>
    48bc:	9a 83       	std	Y+2, r25	; 0x02
    48be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    48c0:	2e 96       	adiw	r28, 0x0e	; 14
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	cd bf       	out	0x3d, r28	; 61
    48cc:	cf 91       	pop	r28
    48ce:	df 91       	pop	r29
    48d0:	08 95       	ret

000048d2 <User_Not_Found>:

void User_Not_Found(void)
{
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	cd b7       	in	r28, 0x3d	; 61
    48d8:	de b7       	in	r29, 0x3e	; 62
    48da:	2e 97       	sbiw	r28, 0x0e	; 14
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	f8 94       	cli
    48e0:	de bf       	out	0x3e, r29	; 62
    48e2:	0f be       	out	0x3f, r0	; 63
    48e4:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidclear();
    48e6:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	HLCD_voidgotoXY(0,0);
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	60 e0       	ldi	r22, 0x00	; 0
    48ee:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("User Not Found");
    48f2:	8c e2       	ldi	r24, 0x2C	; 44
    48f4:	91 e0       	ldi	r25, 0x01	; 1
    48f6:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	aa ef       	ldi	r26, 0xFA	; 250
    4900:	b3 e4       	ldi	r27, 0x43	; 67
    4902:	8b 87       	std	Y+11, r24	; 0x0b
    4904:	9c 87       	std	Y+12, r25	; 0x0c
    4906:	ad 87       	std	Y+13, r26	; 0x0d
    4908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    490a:	6b 85       	ldd	r22, Y+11	; 0x0b
    490c:	7c 85       	ldd	r23, Y+12	; 0x0c
    490e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4910:	9e 85       	ldd	r25, Y+14	; 0x0e
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	4a ef       	ldi	r20, 0xFA	; 250
    4918:	54 e4       	ldi	r21, 0x44	; 68
    491a:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	8f 83       	std	Y+7, r24	; 0x07
    4924:	98 87       	std	Y+8, r25	; 0x08
    4926:	a9 87       	std	Y+9, r26	; 0x09
    4928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    492a:	6f 81       	ldd	r22, Y+7	; 0x07
    492c:	78 85       	ldd	r23, Y+8	; 0x08
    492e:	89 85       	ldd	r24, Y+9	; 0x09
    4930:	9a 85       	ldd	r25, Y+10	; 0x0a
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	40 e8       	ldi	r20, 0x80	; 128
    4938:	5f e3       	ldi	r21, 0x3F	; 63
    493a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    493e:	88 23       	and	r24, r24
    4940:	2c f4       	brge	.+10     	; 0x494c <User_Not_Found+0x7a>
		__ticks = 1;
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	9e 83       	std	Y+6, r25	; 0x06
    4948:	8d 83       	std	Y+5, r24	; 0x05
    494a:	3f c0       	rjmp	.+126    	; 0x49ca <User_Not_Found+0xf8>
	else if (__tmp > 65535)
    494c:	6f 81       	ldd	r22, Y+7	; 0x07
    494e:	78 85       	ldd	r23, Y+8	; 0x08
    4950:	89 85       	ldd	r24, Y+9	; 0x09
    4952:	9a 85       	ldd	r25, Y+10	; 0x0a
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	3f ef       	ldi	r19, 0xFF	; 255
    4958:	4f e7       	ldi	r20, 0x7F	; 127
    495a:	57 e4       	ldi	r21, 0x47	; 71
    495c:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    4960:	18 16       	cp	r1, r24
    4962:	4c f5       	brge	.+82     	; 0x49b6 <User_Not_Found+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4964:	6b 85       	ldd	r22, Y+11	; 0x0b
    4966:	7c 85       	ldd	r23, Y+12	; 0x0c
    4968:	8d 85       	ldd	r24, Y+13	; 0x0d
    496a:	9e 85       	ldd	r25, Y+14	; 0x0e
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	40 e2       	ldi	r20, 0x20	; 32
    4972:	51 e4       	ldi	r21, 0x41	; 65
    4974:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	bc 01       	movw	r22, r24
    497e:	cd 01       	movw	r24, r26
    4980:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	9e 83       	std	Y+6, r25	; 0x06
    498a:	8d 83       	std	Y+5, r24	; 0x05
    498c:	0f c0       	rjmp	.+30     	; 0x49ac <User_Not_Found+0xda>
    498e:	88 ec       	ldi	r24, 0xC8	; 200
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	9c 83       	std	Y+4, r25	; 0x04
    4994:	8b 83       	std	Y+3, r24	; 0x03
    4996:	8b 81       	ldd	r24, Y+3	; 0x03
    4998:	9c 81       	ldd	r25, Y+4	; 0x04
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	f1 f7       	brne	.-4      	; 0x499a <User_Not_Found+0xc8>
    499e:	9c 83       	std	Y+4, r25	; 0x04
    49a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a2:	8d 81       	ldd	r24, Y+5	; 0x05
    49a4:	9e 81       	ldd	r25, Y+6	; 0x06
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	9e 83       	std	Y+6, r25	; 0x06
    49aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ac:	8d 81       	ldd	r24, Y+5	; 0x05
    49ae:	9e 81       	ldd	r25, Y+6	; 0x06
    49b0:	00 97       	sbiw	r24, 0x00	; 0
    49b2:	69 f7       	brne	.-38     	; 0x498e <User_Not_Found+0xbc>
    49b4:	14 c0       	rjmp	.+40     	; 0x49de <User_Not_Found+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b6:	6f 81       	ldd	r22, Y+7	; 0x07
    49b8:	78 85       	ldd	r23, Y+8	; 0x08
    49ba:	89 85       	ldd	r24, Y+9	; 0x09
    49bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49be:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	9e 83       	std	Y+6, r25	; 0x06
    49c8:	8d 83       	std	Y+5, r24	; 0x05
    49ca:	8d 81       	ldd	r24, Y+5	; 0x05
    49cc:	9e 81       	ldd	r25, Y+6	; 0x06
    49ce:	9a 83       	std	Y+2, r25	; 0x02
    49d0:	89 83       	std	Y+1, r24	; 0x01
    49d2:	89 81       	ldd	r24, Y+1	; 0x01
    49d4:	9a 81       	ldd	r25, Y+2	; 0x02
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	f1 f7       	brne	.-4      	; 0x49d6 <User_Not_Found+0x104>
    49da:	9a 83       	std	Y+2, r25	; 0x02
    49dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    49de:	2e 96       	adiw	r28, 0x0e	; 14
    49e0:	0f b6       	in	r0, 0x3f	; 63
    49e2:	f8 94       	cli
    49e4:	de bf       	out	0x3e, r29	; 62
    49e6:	0f be       	out	0x3f, r0	; 63
    49e8:	cd bf       	out	0x3d, r28	; 61
    49ea:	cf 91       	pop	r28
    49ec:	df 91       	pop	r29
    49ee:	08 95       	ret

000049f0 <Password_Changed>:

void Password_Changed(void)
{
    49f0:	df 93       	push	r29
    49f2:	cf 93       	push	r28
    49f4:	cd b7       	in	r28, 0x3d	; 61
    49f6:	de b7       	in	r29, 0x3e	; 62
    49f8:	2e 97       	sbiw	r28, 0x0e	; 14
    49fa:	0f b6       	in	r0, 0x3f	; 63
    49fc:	f8 94       	cli
    49fe:	de bf       	out	0x3e, r29	; 62
    4a00:	0f be       	out	0x3f, r0	; 63
    4a02:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidclear();
    4a04:	0e 94 75 13 	call	0x26ea	; 0x26ea <HLCD_voidclear>
	HLCD_voidgotoXY(0,0);
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <HLCD_voidgotoXY>
	HLCD_voidsendString("password changed");
    4a10:	8b e3       	ldi	r24, 0x3B	; 59
    4a12:	91 e0       	ldi	r25, 0x01	; 1
    4a14:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidsendString>
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	aa ef       	ldi	r26, 0xFA	; 250
    4a1e:	b3 e4       	ldi	r27, 0x43	; 67
    4a20:	8b 87       	std	Y+11, r24	; 0x0b
    4a22:	9c 87       	std	Y+12, r25	; 0x0c
    4a24:	ad 87       	std	Y+13, r26	; 0x0d
    4a26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	4a ef       	ldi	r20, 0xFA	; 250
    4a36:	54 e4       	ldi	r21, 0x44	; 68
    4a38:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	8f 83       	std	Y+7, r24	; 0x07
    4a42:	98 87       	std	Y+8, r25	; 0x08
    4a44:	a9 87       	std	Y+9, r26	; 0x09
    4a46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a48:	6f 81       	ldd	r22, Y+7	; 0x07
    4a4a:	78 85       	ldd	r23, Y+8	; 0x08
    4a4c:	89 85       	ldd	r24, Y+9	; 0x09
    4a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	5f e3       	ldi	r21, 0x3F	; 63
    4a58:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    4a5c:	88 23       	and	r24, r24
    4a5e:	2c f4       	brge	.+10     	; 0x4a6a <Password_Changed+0x7a>
		__ticks = 1;
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	9e 83       	std	Y+6, r25	; 0x06
    4a66:	8d 83       	std	Y+5, r24	; 0x05
    4a68:	3f c0       	rjmp	.+126    	; 0x4ae8 <Password_Changed+0xf8>
	else if (__tmp > 65535)
    4a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a6c:	78 85       	ldd	r23, Y+8	; 0x08
    4a6e:	89 85       	ldd	r24, Y+9	; 0x09
    4a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	3f ef       	ldi	r19, 0xFF	; 255
    4a76:	4f e7       	ldi	r20, 0x7F	; 127
    4a78:	57 e4       	ldi	r21, 0x47	; 71
    4a7a:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    4a7e:	18 16       	cp	r1, r24
    4a80:	4c f5       	brge	.+82     	; 0x4ad4 <Password_Changed+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a8a:	20 e0       	ldi	r18, 0x00	; 0
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	40 e2       	ldi	r20, 0x20	; 32
    4a90:	51 e4       	ldi	r21, 0x41	; 65
    4a92:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    4a96:	dc 01       	movw	r26, r24
    4a98:	cb 01       	movw	r24, r22
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9e 83       	std	Y+6, r25	; 0x06
    4aa8:	8d 83       	std	Y+5, r24	; 0x05
    4aaa:	0f c0       	rjmp	.+30     	; 0x4aca <Password_Changed+0xda>
    4aac:	88 ec       	ldi	r24, 0xC8	; 200
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	9c 83       	std	Y+4, r25	; 0x04
    4ab2:	8b 83       	std	Y+3, r24	; 0x03
    4ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <Password_Changed+0xc8>
    4abc:	9c 83       	std	Y+4, r25	; 0x04
    4abe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac4:	01 97       	sbiw	r24, 0x01	; 1
    4ac6:	9e 83       	std	Y+6, r25	; 0x06
    4ac8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aca:	8d 81       	ldd	r24, Y+5	; 0x05
    4acc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ace:	00 97       	sbiw	r24, 0x00	; 0
    4ad0:	69 f7       	brne	.-38     	; 0x4aac <Password_Changed+0xbc>
    4ad2:	14 c0       	rjmp	.+40     	; 0x4afc <Password_Changed+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ad6:	78 85       	ldd	r23, Y+8	; 0x08
    4ad8:	89 85       	ldd	r24, Y+9	; 0x09
    4ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    4adc:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	9e 83       	std	Y+6, r25	; 0x06
    4ae6:	8d 83       	std	Y+5, r24	; 0x05
    4ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    4aea:	9e 81       	ldd	r25, Y+6	; 0x06
    4aec:	9a 83       	std	Y+2, r25	; 0x02
    4aee:	89 83       	std	Y+1, r24	; 0x01
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	9a 81       	ldd	r25, Y+2	; 0x02
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <Password_Changed+0x104>
    4af8:	9a 83       	std	Y+2, r25	; 0x02
    4afa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    4afc:	2e 96       	adiw	r28, 0x0e	; 14
    4afe:	0f b6       	in	r0, 0x3f	; 63
    4b00:	f8 94       	cli
    4b02:	de bf       	out	0x3e, r29	; 62
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	cd bf       	out	0x3d, r28	; 61
    4b08:	cf 91       	pop	r28
    4b0a:	df 91       	pop	r29
    4b0c:	08 95       	ret

00004b0e <main>:
EN_FirstEntryFlag_t Change_Password_Flag = FIRST_ENTRY_TRUE;
EN_FirstEntryFlag_t Add_User_Flag = FIRST_ENTRY_TRUE;


int main()
{
    4b0e:	df 93       	push	r29
    4b10:	cf 93       	push	r28
    4b12:	00 d0       	rcall	.+0      	; 0x4b14 <main+0x6>
    4b14:	cd b7       	in	r28, 0x3d	; 61
    4b16:	de b7       	in	r29, 0x3e	; 62
	Port_VoidInit();															/*Initialize Ports*/
    4b18:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <Port_VoidInit>

	HLCD_voidinit();															/*Initialize LCD*/
    4b1c:	0e 94 de 12 	call	0x25bc	; 0x25bc <HLCD_voidinit>

	Init_Default_ID();															/*Create the default id*/
    4b20:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <Init_Default_ID>
	Init_Users();																/*Create users*/
    4b24:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <Init_Users>

	while(1)
	{
		switch(Current_state)
    4b28:	80 91 d6 01 	lds	r24, 0x01D6
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	3a 83       	std	Y+2, r19	; 0x02
    4b32:	29 83       	std	Y+1, r18	; 0x01
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	9a 81       	ldd	r25, Y+2	; 0x02
    4b38:	81 30       	cpi	r24, 0x01	; 1
    4b3a:	91 05       	cpc	r25, r1
    4b3c:	e9 f0       	breq	.+58     	; 0x4b78 <main+0x6a>
    4b3e:	29 81       	ldd	r18, Y+1	; 0x01
    4b40:	3a 81       	ldd	r19, Y+2	; 0x02
    4b42:	22 30       	cpi	r18, 0x02	; 2
    4b44:	31 05       	cpc	r19, r1
    4b46:	2c f4       	brge	.+10     	; 0x4b52 <main+0x44>
    4b48:	89 81       	ldd	r24, Y+1	; 0x01
    4b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	61 f0       	breq	.+24     	; 0x4b68 <main+0x5a>
    4b50:	eb cf       	rjmp	.-42     	; 0x4b28 <main+0x1a>
    4b52:	29 81       	ldd	r18, Y+1	; 0x01
    4b54:	3a 81       	ldd	r19, Y+2	; 0x02
    4b56:	22 30       	cpi	r18, 0x02	; 2
    4b58:	31 05       	cpc	r19, r1
    4b5a:	b1 f0       	breq	.+44     	; 0x4b88 <main+0x7a>
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
    4b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b60:	83 30       	cpi	r24, 0x03	; 3
    4b62:	91 05       	cpc	r25, r1
    4b64:	c9 f0       	breq	.+50     	; 0x4b98 <main+0x8a>
    4b66:	e0 cf       	rjmp	.-64     	; 0x4b28 <main+0x1a>
		{
		case MENU:
			Menu_state(&Menu_Flag, &Current_state);
    4b68:	8c e6       	ldi	r24, 0x6C	; 108
    4b6a:	91 e0       	ldi	r25, 0x01	; 1
    4b6c:	26 ed       	ldi	r18, 0xD6	; 214
    4b6e:	31 e0       	ldi	r19, 0x01	; 1
    4b70:	b9 01       	movw	r22, r18
    4b72:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <Menu_state>
    4b76:	d8 cf       	rjmp	.-80     	; 0x4b28 <main+0x1a>
			break;

		case OPEN_SYSTEM:
			Open_System_state(&Open_System_Flag, &Current_state);
    4b78:	8d e6       	ldi	r24, 0x6D	; 109
    4b7a:	91 e0       	ldi	r25, 0x01	; 1
    4b7c:	26 ed       	ldi	r18, 0xD6	; 214
    4b7e:	31 e0       	ldi	r19, 0x01	; 1
    4b80:	b9 01       	movw	r22, r18
    4b82:	0e 94 63 18 	call	0x30c6	; 0x30c6 <Open_System_state>
    4b86:	d0 cf       	rjmp	.-96     	; 0x4b28 <main+0x1a>
			break;

		case CHANGE_PASSWORD:
			Change_Password_state(&Change_Password_Flag, &Current_state);
    4b88:	8e e6       	ldi	r24, 0x6E	; 110
    4b8a:	91 e0       	ldi	r25, 0x01	; 1
    4b8c:	26 ed       	ldi	r18, 0xD6	; 214
    4b8e:	31 e0       	ldi	r19, 0x01	; 1
    4b90:	b9 01       	movw	r22, r18
    4b92:	0e 94 1c 19 	call	0x3238	; 0x3238 <Change_Password_state>
    4b96:	c8 cf       	rjmp	.-112    	; 0x4b28 <main+0x1a>
			break;

		case ADD_USER:
			Add_User_state(&Add_User_Flag, &Current_state);
    4b98:	8f e6       	ldi	r24, 0x6F	; 111
    4b9a:	91 e0       	ldi	r25, 0x01	; 1
    4b9c:	26 ed       	ldi	r18, 0xD6	; 214
    4b9e:	31 e0       	ldi	r19, 0x01	; 1
    4ba0:	b9 01       	movw	r22, r18
    4ba2:	0e 94 d5 19 	call	0x33aa	; 0x33aa <Add_User_state>
    4ba6:	c0 cf       	rjmp	.-128    	; 0x4b28 <main+0x1a>

00004ba8 <__mulsi3>:
    4ba8:	62 9f       	mul	r22, r18
    4baa:	d0 01       	movw	r26, r0
    4bac:	73 9f       	mul	r23, r19
    4bae:	f0 01       	movw	r30, r0
    4bb0:	82 9f       	mul	r24, r18
    4bb2:	e0 0d       	add	r30, r0
    4bb4:	f1 1d       	adc	r31, r1
    4bb6:	64 9f       	mul	r22, r20
    4bb8:	e0 0d       	add	r30, r0
    4bba:	f1 1d       	adc	r31, r1
    4bbc:	92 9f       	mul	r25, r18
    4bbe:	f0 0d       	add	r31, r0
    4bc0:	83 9f       	mul	r24, r19
    4bc2:	f0 0d       	add	r31, r0
    4bc4:	74 9f       	mul	r23, r20
    4bc6:	f0 0d       	add	r31, r0
    4bc8:	65 9f       	mul	r22, r21
    4bca:	f0 0d       	add	r31, r0
    4bcc:	99 27       	eor	r25, r25
    4bce:	72 9f       	mul	r23, r18
    4bd0:	b0 0d       	add	r27, r0
    4bd2:	e1 1d       	adc	r30, r1
    4bd4:	f9 1f       	adc	r31, r25
    4bd6:	63 9f       	mul	r22, r19
    4bd8:	b0 0d       	add	r27, r0
    4bda:	e1 1d       	adc	r30, r1
    4bdc:	f9 1f       	adc	r31, r25
    4bde:	bd 01       	movw	r22, r26
    4be0:	cf 01       	movw	r24, r30
    4be2:	11 24       	eor	r1, r1
    4be4:	08 95       	ret

00004be6 <__udivmodhi4>:
    4be6:	aa 1b       	sub	r26, r26
    4be8:	bb 1b       	sub	r27, r27
    4bea:	51 e1       	ldi	r21, 0x11	; 17
    4bec:	07 c0       	rjmp	.+14     	; 0x4bfc <__udivmodhi4_ep>

00004bee <__udivmodhi4_loop>:
    4bee:	aa 1f       	adc	r26, r26
    4bf0:	bb 1f       	adc	r27, r27
    4bf2:	a6 17       	cp	r26, r22
    4bf4:	b7 07       	cpc	r27, r23
    4bf6:	10 f0       	brcs	.+4      	; 0x4bfc <__udivmodhi4_ep>
    4bf8:	a6 1b       	sub	r26, r22
    4bfa:	b7 0b       	sbc	r27, r23

00004bfc <__udivmodhi4_ep>:
    4bfc:	88 1f       	adc	r24, r24
    4bfe:	99 1f       	adc	r25, r25
    4c00:	5a 95       	dec	r21
    4c02:	a9 f7       	brne	.-22     	; 0x4bee <__udivmodhi4_loop>
    4c04:	80 95       	com	r24
    4c06:	90 95       	com	r25
    4c08:	bc 01       	movw	r22, r24
    4c0a:	cd 01       	movw	r24, r26
    4c0c:	08 95       	ret

00004c0e <__udivmodsi4>:
    4c0e:	a1 e2       	ldi	r26, 0x21	; 33
    4c10:	1a 2e       	mov	r1, r26
    4c12:	aa 1b       	sub	r26, r26
    4c14:	bb 1b       	sub	r27, r27
    4c16:	fd 01       	movw	r30, r26
    4c18:	0d c0       	rjmp	.+26     	; 0x4c34 <__udivmodsi4_ep>

00004c1a <__udivmodsi4_loop>:
    4c1a:	aa 1f       	adc	r26, r26
    4c1c:	bb 1f       	adc	r27, r27
    4c1e:	ee 1f       	adc	r30, r30
    4c20:	ff 1f       	adc	r31, r31
    4c22:	a2 17       	cp	r26, r18
    4c24:	b3 07       	cpc	r27, r19
    4c26:	e4 07       	cpc	r30, r20
    4c28:	f5 07       	cpc	r31, r21
    4c2a:	20 f0       	brcs	.+8      	; 0x4c34 <__udivmodsi4_ep>
    4c2c:	a2 1b       	sub	r26, r18
    4c2e:	b3 0b       	sbc	r27, r19
    4c30:	e4 0b       	sbc	r30, r20
    4c32:	f5 0b       	sbc	r31, r21

00004c34 <__udivmodsi4_ep>:
    4c34:	66 1f       	adc	r22, r22
    4c36:	77 1f       	adc	r23, r23
    4c38:	88 1f       	adc	r24, r24
    4c3a:	99 1f       	adc	r25, r25
    4c3c:	1a 94       	dec	r1
    4c3e:	69 f7       	brne	.-38     	; 0x4c1a <__udivmodsi4_loop>
    4c40:	60 95       	com	r22
    4c42:	70 95       	com	r23
    4c44:	80 95       	com	r24
    4c46:	90 95       	com	r25
    4c48:	9b 01       	movw	r18, r22
    4c4a:	ac 01       	movw	r20, r24
    4c4c:	bd 01       	movw	r22, r26
    4c4e:	cf 01       	movw	r24, r30
    4c50:	08 95       	ret

00004c52 <__prologue_saves__>:
    4c52:	2f 92       	push	r2
    4c54:	3f 92       	push	r3
    4c56:	4f 92       	push	r4
    4c58:	5f 92       	push	r5
    4c5a:	6f 92       	push	r6
    4c5c:	7f 92       	push	r7
    4c5e:	8f 92       	push	r8
    4c60:	9f 92       	push	r9
    4c62:	af 92       	push	r10
    4c64:	bf 92       	push	r11
    4c66:	cf 92       	push	r12
    4c68:	df 92       	push	r13
    4c6a:	ef 92       	push	r14
    4c6c:	ff 92       	push	r15
    4c6e:	0f 93       	push	r16
    4c70:	1f 93       	push	r17
    4c72:	cf 93       	push	r28
    4c74:	df 93       	push	r29
    4c76:	cd b7       	in	r28, 0x3d	; 61
    4c78:	de b7       	in	r29, 0x3e	; 62
    4c7a:	ca 1b       	sub	r28, r26
    4c7c:	db 0b       	sbc	r29, r27
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	de bf       	out	0x3e, r29	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	09 94       	ijmp

00004c8a <__epilogue_restores__>:
    4c8a:	2a 88       	ldd	r2, Y+18	; 0x12
    4c8c:	39 88       	ldd	r3, Y+17	; 0x11
    4c8e:	48 88       	ldd	r4, Y+16	; 0x10
    4c90:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c92:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c94:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c96:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c98:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c9c:	b9 84       	ldd	r11, Y+9	; 0x09
    4c9e:	c8 84       	ldd	r12, Y+8	; 0x08
    4ca0:	df 80       	ldd	r13, Y+7	; 0x07
    4ca2:	ee 80       	ldd	r14, Y+6	; 0x06
    4ca4:	fd 80       	ldd	r15, Y+5	; 0x05
    4ca6:	0c 81       	ldd	r16, Y+4	; 0x04
    4ca8:	1b 81       	ldd	r17, Y+3	; 0x03
    4caa:	aa 81       	ldd	r26, Y+2	; 0x02
    4cac:	b9 81       	ldd	r27, Y+1	; 0x01
    4cae:	ce 0f       	add	r28, r30
    4cb0:	d1 1d       	adc	r29, r1
    4cb2:	0f b6       	in	r0, 0x3f	; 63
    4cb4:	f8 94       	cli
    4cb6:	de bf       	out	0x3e, r29	; 62
    4cb8:	0f be       	out	0x3f, r0	; 63
    4cba:	cd bf       	out	0x3d, r28	; 61
    4cbc:	ed 01       	movw	r28, r26
    4cbe:	08 95       	ret

00004cc0 <_exit>:
    4cc0:	f8 94       	cli

00004cc2 <__stop_program>:
    4cc2:	ff cf       	rjmp	.-2      	; 0x4cc2 <__stop_program>
